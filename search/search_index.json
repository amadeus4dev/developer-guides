{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amadeus for Developers docs","text":"<p>Welcome to the Amadeus for Developers docs portal! </p> <p>Our main focus here is on the Self-Service APIs. If you need any information on the Enterprise APIs, please reach out to our customer support team and we'll be happy to assist you further.</p>"},{"location":"#what-are-the-self-service-apis","title":"What are the Self-Service APIs?","text":"<p>Target independent developers and start-ups that wish to connect to Amadeus APIs in a quick and easy manner. You can access and start to test these new REST/JSON APIs in less than 3 minutes, and get quick access to production data with a flexible pay-as-you-go pricing model. Please note that the catalog includes some selected APIs, although we will be constantly releasing new APIs. Currently, you can find APIs around flights, destination Experiences, cars &amp; transfers, market insights, hotels, and itinerary management.</p> <p>Self-Service users have at their disposal detailed documentation, guides, and SDKs to be able to integrate the APIs in their apps. </p>"},{"location":"#what-are-the-enterprise-apis","title":"What are the Enterprise APIs?","text":"<p>Provide access to the full Amadeus APIs catalog, tailored to companies with scale needs and leading brands in the travel industry. Customers of Enterprise APIs receive dedicated support from their account managers and enjoy a customized pricing scheme to meet their needs. Please note that access to Enterprise APIs is only granted on a request basis, and some special requirements may apply.</p> <p>Warning</p> <p>You can potentially use APIs from both catalogs, but please keep in mind that the requirements and conditions of each offer are very different!</p>"},{"location":"#discover-the-amadeus-self-service-apis","title":"Discover the Amadeus Self-Service APIs","text":"<p>Amadeus for Developers provides a set of Self-Service APIs, which were implemented using the API-first approach. We produce an API specification in the OpenAPI format before any implementation.</p> <p>Information</p> <p>The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic.</p> <ul> <li>To see all Amadeus Self-Service APIs in one place, check out our API catalogue.</li> <li>Don\u2019t forget to stop by our GitHub workspace where you can find tons of samples and prototypes to get inspiration, as well as the latest versions of the SDKs in multiple programming languages.</li> <li>If you are a happy Postman user, as we are, feel free to use the Amadeus for Developers Postman collection.</li> </ul> <p>Important</p> <p>Something not clear? Typos? We would be happy to receive your pull requests and feedback to this documentation guides. Feel free to contribute!</p> <p>Happy coding!</p> <p>The Amadeus for Developers Team</p>"},{"location":"api-rate-limits/","title":"Rate limits","text":""},{"location":"api-rate-limits/#rate-limits-per-api","title":"Rate limits per API","text":"<p>Amadeus Self-Service APIs have two types of rate limits in place to protect against abuse by third parties.</p>"},{"location":"api-rate-limits/#artificial-intelligence-and-partners-apis","title":"Artificial Intelligence and Partners' APIs","text":"<p>Artificial intelligence APIs and APIs from Amadeus partners' are currently following the rate limits below. </p> Test and Production 20 transactions per second, per user No more than 1 request every 50ms"},{"location":"api-rate-limits/#list-of-apis-with-the-above-rate-limits","title":"List of APIs with the above rate limits:","text":"<ul> <li>Points of Interest</li> <li>Tours and Activities</li> <li>Location Score</li> <li>Airport On-time Performance</li> <li>Flight Price Analysis</li> <li>Flight Delay Prediction</li> <li>Flight Choice Prediction</li> </ul>"},{"location":"api-rate-limits/#the-other-apis","title":"The other APIs","text":"<p>The rest of Self-Service APIs apart from Artificial intelligence and Partners' APIs are below rate limits per environment.</p> Test Production 10 transactions per second, per user 40 transactions per second, per user No more than 1 request every 100ms"},{"location":"api-rate-limits/#rate-limits-examples","title":"Rate limits Examples","text":"<p>To manage the rate limits in APIs, there are mainly two options:  - Use an external library - Build a request queue from scratch</p> <p>The right choice depends on your resources and requisites. </p> <p>Check out the rate limits examples in Node, Python and Java using the respective Amadeus SDKs.</p>"},{"location":"common-errors/","title":"Common client and server errors","text":"<p>Amadeus for Developers Self-Service APIs use HTTP status codes to communicate whether a request has been successfully processed.</p>"},{"location":"common-errors/#types-of-errors","title":"Types of errors","text":"<p>There two main types of errors are:</p> <ul> <li>Client:  typically occur when the request has not been properly built. </li> <li>Server: occur when there is an issue on the server side.</li> </ul>"},{"location":"common-errors/#client-errors","title":"Client errors","text":"<p>If your API request is invalid, you will receive a <code>Client Error</code> response with an HTTP <code>4xx</code> status code. The body of the response will match the format defined in our <code>swagger</code> schema and provide details about the error.</p>"},{"location":"common-errors/#authorization-errors","title":"Authorization errors","text":"<p>400 Bad request - Unsupported grant type</p> <p>Occurs when using a grant type other than <code>client credentials</code>. For more information, read our Authorization Guide.</p> <pre><code>{\n    \"error\": \"unsupported_grant_type\",\n    \"error_description\": \"Only client_credentials value is allowed for the body parameter grant_type\",\n    \"code\": 38187,\n    \"title\": \"Invalid parameters\"\n}\n</code></pre> <p>401 Unauthorized - Invalid access token</p> <p>Occurs when the access token provided in the Authorization header is expired or not longer valid. You must generate a new token.</p> <pre><code>{\n  \"errors\": [\n      {\n        \"code\": 38190,\n        \"title\": \"Invalid access token\",\n        \"detail\": \"The access token provided in the Authorization header is invalid\",\n        \"status\": 401\n      }\n  ]\n}\n</code></pre> <p>401 Unauthorized -  Invalid client</p> <p>Occurs when the client credentials have an invalid format and are not recognized.</p> <pre><code>{\n    \"error\": \"invalid_client\",\n    \"error_description\": \"Client credentials are invalid\",\n    \"code\": 38187,\n    \"title\": \"Invalid parameters\"\n}\n</code></pre> <p>401 Unauthorized - Invalid HTTP header</p> <p>The Authorization header is missing or its format invalid, e.g. the required word \"Bearer\" is wrongly spelled or not present at all in the Authorization header in an API request. <pre><code>{\n    \"errors\": [\n        {\n            \"code\": \"38191\",\n            \"title\": \"Invalid HTTP header\",\n            \"detail\": \"Missing or invalid format for mandatory Authorization header\",\n            \"status\": \"401\"\n        }\n    ]\n}\n</code></pre></p> <p>401 Unauthorized \u2013 Access token expired</p> <p>The access token sent by the client is expired. Access tokens are only valid for 30 minutes. To ease the generation of access tokens you can use our SDKs. <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38192,\n            \"title\": \"Access token expired\",\n            \"detail\": \"The access token is expired\",\n            \"status\": 401\n        }\n    ]\n}\n</code></pre></p> <p>401 Unauthorized \u2013 Access token revoked</p> <p>The access token has been revoked. Please generate a new one. <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38193,\n            \"title\": \"Access token revoked\",\n            \"detail\": \"The access token is revoked\",\n            \"status\": 401\n        }\n    ]\n}\n</code></pre></p> <p>401 Unauthorized \u2013API revoked</p> <p>The API credentials have been revoked. This could be because we found it searchable in a public repository, in this case you can generate new keys in your Self-Service workspace. Or it could be that you have unpaid bills and we revoked your access, if that is the case please contact support.</p> <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 39683,\n            \"title\": \"API key revoked\",\n            \"detail\": \"The API key is revoked\",\n            \"status\": 401\n        }\n    ]\n}\n</code></pre> <p>401 Unauthorized \u2013 Invalid API key</p> <p>The API key used is invalid. Please check for spaces in the end and make sure you are using the correct key and case URL. <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 39686,\n            \"title\": \"Invalid API key\",\n            \"detail\": \"The API key is invalid\",\n            \"status\": 401\n        }\n    ]\n}\n</code></pre></p>"},{"location":"common-errors/#data-format-errors","title":"Data Format Errors","text":"<p>400 Bad request - Invalid format</p> <p>Occurs when an input query parameter is incorrect. In the example below, the Airport &amp; City Search API returns an error because the location parameter is not in the expected IATA standard.</p> <pre><code>{\n    \"errors\": [\n        {\n            \"status\": 400,\n            \"code\": 477,\n            \"title\": \"INVALID FORMAT\",\n            \"detail\": \"City/Airport - 3 characters [IATA code](https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code) from which the traveler will depart.\",\n            \"source\": {\n                \"parameter\": \"origin\"\n            }\n        }\n    ]\n}\n</code></pre> <p>403 Forbidden</p> <p>The HTTP protocol is used instead of HTTPS when making the API call. Or you are attempting to reach an endpoint which requires additional permission.  <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38197,\n            \"title\": \"Forbidden\",\n            \"detail\": \"Access forbidden\",\n            \"status\": 403\n        }\n    ]\n}\n</code></pre></p>"},{"location":"common-errors/#too-many-requests-errors","title":"Too Many Requests Errors","text":"<p>429 Too many requests</p> <p>Too many requests are sent in the given timeframe. Please check our rate limits and adjust accordingly for the targeted environment and API. <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38194,\n            \"title\": \"Too many requests\",\n            \"detail\": \"The network rate limit is exceeded, please try again later\",\n            \"status\": 429\n        }\n    ]\n}\n</code></pre></p> <p>429 Quota limit exceeded</p> <p>The number of free transactions allowed in test has been reached for this month. Please consider moving your app to production or wait next month to keep using the APIs. <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38195,\n            \"title\": \"Quota limit exceeded\",\n            \"detail\": \"The quota limit is exceeded.\",\n            \"status\": 429\n        }\n    ]\n}\n</code></pre></p>"},{"location":"common-errors/#resource-errors","title":"Resource Errors","text":"<p>404 Not found - Resource not found</p> <p>Occurs when the endpoint or URL does not exist. Make sure you are calling a valid endpoint and that there are no spelling errors.</p> <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38196,\n            \"title\": \"Resource not found\",\n            \"detail\": \"The targeted resource doesn't exist\",\n            \"status\": 404\n        }\n    ]\n}\n</code></pre>"},{"location":"common-errors/#server-errors","title":"Server errors","text":"<p>If an error occurs during the execution of your request, you will receive a <code>Server error</code> resonse with an HTTP <code>5xx</code> status code. The body will match the defined error format, allowing your application to read it and display an appropriate message to the client. It may also contain debugging information which you can submit to us to further investigate the error.</p> <p>500 Internal error</p> <pre><code>{\n    \"errors\": [\n        {\n            \"code\": 38189,\n            \"title\": \"Internal error\",\n            \"detail\": \"An internal error occured, please contact your administrator\",\n            \"status\": 500\n        }\n    ]\n}\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This page provides help with the most common questions about Amadeus Self-service APIs.</p>"},{"location":"faq/#account-registration","title":"Account registration","text":""},{"location":"faq/#how-do-i-change-my-password","title":"How do I change my password?","text":"<p>To change your password, sign in to the Developers portal and click on My Account in the top right corner of the screen. You'll find the option to change your password at the bottom of the page. Please remember that we never send your password in any correspondence.</p>"},{"location":"faq/#i-registered-but-never-received-a-confirmation-email-what-should-i-do","title":"I registered but never received a confirmation email? What should I do?","text":"<p>If you haven't received a confirmation mail, it is often because the email address was entered incorrectly. Please sign in to the Developers portal and visit the My Account section to confirm that the email address used to create the account is correct. If so, please check your spam folder for an email from noreply@amadeus.com.</p>"},{"location":"faq/#business-enquiries","title":"Business enquiries","text":""},{"location":"faq/#how-can-i-monetise-my-application","title":"How can I monetise my application?","text":"<p>You are free to create your own business models around our APIs, such as charging users to use our APIs in their apps or adopting a subscription-based model. However, we do not give any commission or other types of incentives for the Self-Service API. The latter is only possible in the Enterprise framework. If you're offering flight booking services, you can generate revenue for your apps by applying a markup on flight offers.</p>"},{"location":"faq/#i-would-like-to-partner-up-with-amadeus","title":"I would like to partner up with Amadeus","text":"<p>You can partner with Amadeus through the Amadeus Partner Network. This includes different types of partnerships, with the possibility to get access to technology or to connect to Amadeus' global network of customers and partners.</p>"},{"location":"faq/#self-service-vs-enterprise","title":"Self-Service vs Enterprise","text":""},{"location":"faq/#what-is-the-difference-between-self-service-and-enterprise-apis","title":"What is the difference between Self-Service and Enterprise APIs?","text":"<p>Amadeus for Developers provides two different offers, each of which meets distinct customer needs: Self-Service and Enterprise. </p> <p>The Self-Service offer targets independent developers and start-ups that wish to connect to Amadeus APIs in a quick and easy manner. You can access and start testing these new REST/JSON APIs in less than 3 minutes, and get quick access to production data with a flexible pay-as-you-go pricing model. Please note that the catalog includes some selected APIs only, although we will be constantly releasing new APIs.</p> <p>The Enterprise offer provides access to the full Amadeus APIs catalog, tailored to companies with scaling needs as well as the leading brands in the travel industry. Customers of Enterprise APIs receive dedicated support from their account managers and enjoy a customized pricing scheme to meet their needs. Please note that access to Enterprise APIs is only granted on a request basis, and some special requirements may apply. Our Enterprise commercial teams will be happy to guide you through the process.</p>"},{"location":"faq/#can-i-use-apis-from-both-self-service-and-enterprise","title":"Can I use APIs from both Self-Service and Enterprise?","text":"<p>Yes, you can use APIs from both catalogs, but please keep in mind that the requirements and conditions of each offer are very different. Please check our Get Started guide for more information.</p>"},{"location":"faq/#how-can-i-contact-enterprise","title":"How can I contact Enterprise?","text":"<p>To contact the Enterprise team, please fill in the following contact us form and someone from the Enterprise team will get back to you shortly. Please keep in mind that the access to Enterprise requires an implementation fee as well as monthly fees.</p>"},{"location":"faq/#how-much-do-i-need-to-pay-to-access-enterprise-apis","title":"How much do I need to pay to access Enterprise APIs?","text":"<p>The access to Enterprise APIs is subject to certain requirements depending on your market and the functionalities you want to access. It is usually reserved for experienced companies with the need to scale. Before we can disclose the pricing details you will need to sign an NDA. </p>"},{"location":"faq/#self-service-apis-general","title":"Self-Service APIs general","text":""},{"location":"faq/#is-there-a-test-environment-to-try-the-self-service-apis","title":"Is there a test environment to try the Self-Service APIs?","text":"<p>Yes! You can try Self-Service APIs in our test environment and enjoy a free monthly request quota to build and test your app. If you exceed this free request quota in the test environment, you'll receive a 429 error code in JSON and not be able to call the APIs.</p> <p>If you need to increase the number of monthly API calls, please consider moving your application to production. It's a quick and easy process and you will keep the free request quota you enjoyed in test. Once you reach your threshold in production, you will simply pay for the additional API calls you make.</p>"},{"location":"faq/#how-do-i-access-the-self-service-apis-documentation","title":"How do I access the Self-Service APIs documentation?","text":"<p>Check our Amadeus for Developers docs portal for links to interactive reference documentation for each API and helpful guides covering topics such as authorization, pagination and common errors. On the Amadeus for Developers GitHub page, you can also find code samples and SDKs.</p>"},{"location":"faq/#do-you-provide-sdks","title":"Do you provide SDKs?","text":"<p>Yes! On the Amadeus for Developers GitHub page you can find open-source SDKs in various languages. Alternatively, you can use OpenAPI Generator to create an SDK from our OpenAPI files.</p>"},{"location":"faq/#where-can-i-see-code-examples-for-amadeus-self-service-apis","title":"Where can I see code examples for Amadeus Self-Service APIs?","text":"<p>Code examples for all Amadeus Self-Service APIs are available in our GitHub.</p>"},{"location":"faq/#how-do-i-make-my-first-self-service-api-call","title":"How do I make my first Self-Service API call?","text":"<p>On the Get Started with Self-Service APIs page you can find information on creating an account, getting your API key and making your first call.</p>"},{"location":"faq/#how-do-i-move-self-service-apis-from-test-to-production","title":"How do I move Self-Service APIs from test to production?","text":"<p>To launch your application to production, please follow the steps described in our Moving to production guide.</p> <p>You will be asked to sign a contract and provide billing information before receiving your new API key. When you move to production, you will maintain the same free monthly request quota you enjoyed in test. When you reach your monthly threshold, you will be billed for the additional API calls you make at the rates shown on our Pricing page.</p>"},{"location":"faq/#how-do-i-delete-my-application-built-using-self-service-apis","title":"How do I delete my application built using Self-Service APIs?","text":"<p>To delete an application, visit the My apps section of your My Self-Service Workspace. Remember that deleted apps cannot be recovered.</p>"},{"location":"faq/#will-you-include-more-apis-in-the-self-service-catalog","title":"Will you include more APIs in the Self-Service catalog?","text":"<p>We are constantly expanding our Self-Service API catalog with new APIs from all travel segments such as flights, hotels, cars or destination content. If you have any specific requests or feedback regarding APIs that you would like to add to your catalog, please contact us. We'd love to hear from you!</p>"},{"location":"faq/#what-are-the-terms-of-service-for-amadeus-self-service-apis","title":"What are the terms of service for Amadeus Self-Service APIs?","text":"<p>To find out more about our terms and conditions for the test environment, please visit our Terms and Conditions page.</p> <p>If you are already in production, you should have received an email with the legal terms regulating API usage in the production environment. If you have not received this information, please contact us.</p>"},{"location":"faq/#i-am-not-a-travel-agent-and-have-no-experience-in-the-travel-industry-can-i-still-use-the-self-service-apis","title":"I am not a travel agent and have no experience in the travel industry, can I still use the Self-Service APIs?","text":"<p>Our Self-Service offer is designed for newcomers to Amadeus, there are no prerequisites. Any developer who wishes to connect to Amadeus travel data can do so in a quick and easy way via our Self-Service offer.  For more details, please check our Get Started guide.</p>"},{"location":"faq/#are-there-any-limitations-to-the-self-service-api-dataset","title":"Are there any limitations to the Self-Service API dataset?","text":"<p>We do not return data on American Airlines, Delta, British Airways and Low cost carriers. For other arlines we only return published rates. We do not return negotiated rates or any other special rates. The Flight Offers Search only returns the bag allowance information for one passenger type code. Airlines blacklisted in the EU are not returned using the Flight Offers Search GET, e.g., Iraqi Airways. There is a possibility to override this with the POST method.</p>"},{"location":"faq/#how-can-i-do-group-booking","title":"How can I do group booking?","text":"<p>Our Self-Service APIs allow you to book up to 9 passengers on the same PNR number. For more passengers you will need to create a new booking.</p>"},{"location":"faq/#what-is-it-returning-different-prices-with-the-self-service-apis-and-other-amadeus-solutions","title":"What is it returning different prices with the Self-Service APIs and other Amadeus solutions?","text":"<p>The Self-Service catalog only returns published GDS rates. If you have access to special rates through another solution, they will not be available through our Self-Service APIs.</p>"},{"location":"faq/#do-i-need-an-iata-license","title":"Do I need an IATA license?","text":"<p>IATA or ARC licenses (depending on your market) are mandatory if you want to issue flight tickets, but this option is only available in our Enterprise framework. In Self-Service you will need to work with an airline consolidator to issue flight tickets, therefore no IATA or ARC license is needed.</p>"},{"location":"faq/#api-keys","title":"API keys","text":""},{"location":"faq/#what-is-an-api-key","title":"What is an API key?","text":"<p>An API key is a unique reference number which identifies your application to Amadeus. The API key is part of the authorization process and must be sent with each API request. If you have multiple applications using Amadeus APIs, each application must have its own API key. For more details, check our Authorization guide.</p> <p>Your API keys are also used to track usage. To avoid unwanted charges, please do no share or post them in public repositories. For more information, see this article on best practices for secure API key storage.</p>"},{"location":"faq/#how-do-i-get-my-self-service-api-key","title":"How do I get my Self-Service API key?","text":"<p>To get a Self-Service API key, simply create an account in the Amadeus for Developers portal. Next, visit the My Self-Service Workspace area and create your first application. An API key will be generated automatically. Remember, your API key is private and should not be shared publicly.</p>"},{"location":"faq/#why-is-my-self-service-api-key-not-working","title":"Why is my Self-Service API key not working?","text":"<p>If your API key is not working, please verify that it is the same exact key that was provided in the My Self-Service Workspace.</p> <p>Please keep in mind that we automatically revoke API keys that are publicly searchable. This is done to protect users against unwanted usage bills. As a general rule, you should not put your API keys in the source code you commit to GitHub or other public repositories. Instead, you should store your keys as environment variables rather than hard-coding them in your script. For more information, see this article on best practices for secure API key storage.</p>"},{"location":"faq/#how-long-is-my-self-service-access-token-valid-for","title":"How long is my Self-Service access token valid for?","text":"<p>The access token is valid for 1800 seconds (30mins). If you get an authentication fail, please request a new token.</p>"},{"location":"faq/#can-i-use-my-api-key-in-a-public-repository","title":"Can I use my API key in a public repository?","text":"<p>Storing your API keys or any other sensitive information in a public repository must be avoided at all costs to prevent malicious access to your APIs, which could result in unwanted usage bills.</p> <p>In order to protect our users, we automatically revoke API keys that are publicly searchable. We recommend that you store your keys as environment variables rather than hard-coding them in your script. For more information, see this article on best practices for secure API key storage.</p>"},{"location":"faq/#why-has-my-api-key-been-revoked","title":"Why has my API key been revoked?","text":"<p>We automatically revoke publicly searchable API keys to prevent unwanted charges to your account. To prevent this from happening, you should read your API key from a system environment variable rather than putting it in the source code you commit to GitHub. If you need to get a new API key, please go to My Self-Service Workspace.</p>"},{"location":"faq/#billing","title":"Billing","text":""},{"location":"faq/#how-is-billing-calculated-for-self-service-apis","title":"How is billing calculated for Self-Service APIs?","text":"<p>It is free to test and prototype with Self-Service APIs and you will enjoy a free monthly request quota in both the test and production environments.</p> <p>When you exceed your free request quota in production, you will be billed for the additional calls you make at the rates indicated on our Pricing page, with no additional fees. Please note that prices vary from one API to another.</p> <p>You can check your monthly usage and select your preferred payment method (credit card or bank transfer) in your Self-Service Workspace.</p>"},{"location":"faq/#how-do-i-request-a-refund-of-my-self-service-usage-bill","title":"How do I request a refund of my Self-Service usage bill?","text":"<p>If you're a Self-Service API user, please send your refund requests via the contact us and our team will carefully analyse them. You will be notified if your refund is approved and be reimbursed within the following days (please note that refund processing times may vary depending on your bank).</p>"},{"location":"faq/#where-can-i-find-my-invoices","title":"Where can I find my invoices?","text":"<p>You will receive your invoices on a monthly basis from data.distribution@amadeus.com. Please note that once opened, you will not be able to open the same invoice again.</p>"},{"location":"faq/#test-collection","title":"Test collection","text":""},{"location":"faq/#is-there-a-limit-to-the-calls-i-can-make-to-self-service-apis-in-the-test-environment","title":"Is there a limit to the calls I can make to Self-Service APIs in the test environment?","text":"<p>Yes, each Self-Service API in test includes a limited number of free monthly calls. This free request quota varies from one API to another and it applies to the sum of all your applications. If you exceed the quota in test, you'll receive a 429 error code in JSON.</p> <p>To see how many free requests remain, log into your account and check your API usage &amp; quota in your Workspace area. Please keep in mind that it can take up to 12 minutes for data to appear.</p> <p>Your free request quota should be sufficient for testing purposes. If you need to increase your number of monthly API calls, please consider moving your application to production. The process is quick and simple and you will keep the free request quotas you enjoyed in test.</p>"},{"location":"faq/#what-should-i-do-if-im-about-to-reach-my-self-service-free-request-quota-limit","title":"What should I do if I'm about to reach my Self-Service free request quota limit?","text":"<p>The test environment is designed for testing purposes. Every month, you'll receive a free request quota to build and test your app. If you need to increase your number of monthly API calls, please move your application to production. The process is quick and easy, and you will keep the free monthly request quota you enjoyed in test. Once you exceed your quota in production, you will be billed for the additional API calls you make.</p>"},{"location":"faq/#is-there-a-limit-to-the-calls-i-can-make-to-self-service-apis-in-the-production-environment","title":"Is there a limit to the calls I can make to Self-Service APIs in the production environment?","text":"<p>There is no consumption limit in production, as long as there are no outstanding usage bills and your account's payment method is up to date.</p>"},{"location":"faq/#why-do-i-get-a-429-error-in-json-if-i-have-some-free-calls-left","title":"Why do I get a 429 error in JSON if I have some free calls left?","text":"<p>After making API call, it can take up to 12 minutes for the data to appear on your usage &amp; quota page. If you are nearing your limit free request quota limit and receive a 429 error, it's likely that you have run out of free calls.</p> <p>To keep using the APIs, you can either move your app to production or wait until the free request quota is reset at the beginning of each month.  </p>"},{"location":"faq/#why-do-i-get-an-error-code-429-when-i-call-a-self-service-api","title":"Why do I get an error code 429 when I call a Self-Service API?","text":"<p>This error indicates you carried out too many requests and went over your limit of free calls for this API. </p> <p>If you wish to keep using the APIs, you can either move your app to production and enter your preferred payment method or alternatively wait until the following month to get more free calls.</p>"},{"location":"faq/#is-the-data-returned-in-the-self-service-test-environment-accurate","title":"Is the data returned in the Self-Service test environment accurate?","text":"<p>The information returned in test environment is from limited data collections. This is done as a security measure to protect our data and our customers. When you move to production, you will get access to complete and live data.</p>"},{"location":"faq/#flight-inspiration-search","title":"Flight Inspiration Search","text":""},{"location":"faq/#why-didnt-i-get-any-results-for-flight-inspiration-search","title":"Why didn't I get any results for Flight Inspiration Search?","text":"<p>This API works with cached data in the test environment and not all airports are cached. You can find a list of airports included in the cached data in our guides section. When combining these searches with the Airport Nearest Relevant API, it is better to search using the city code rather than the airport code.</p>"},{"location":"faq/#why-are-some-origin-and-destination-pairings-not-returning-results","title":"Why are some origin and destination pairings not returning results?","text":"<p>The Flight Inspiration Search and Flight Cheapest Date Search APIs are built on top of a pre-computed cache of selected origin-destination pairs. This is why, even in production, you cannot find all possible origin-destination pairs. If you need to access more results, you need to use the live Flight Offers Search API.</p>"},{"location":"faq/#airport-routes","title":"Airport routes","text":""},{"location":"faq/#the-api-returns-an-airport-that-has-been-permanently-closed","title":"The API returns an airport that has been permanently closed","text":"<p>This is the expected behavior. The IATA code in the response corresponds to the Destination City IATA code but not the Airport Code.</p>"},{"location":"faq/#airport-nearest-relevant-api","title":"Airport Nearest Relevant API","text":""},{"location":"faq/#why-isnt-the-airport-nearest-relevant-api-returning-a-specific-airport-near-me","title":"Why isn't the Airport Nearest Relevant API returning a specific airport near me?","text":"<p>This may be because an airport is near a national boarder. If so, please check the API parameters for location. Also, please keep in mind that our Airport Nearest Relevant API excludes private and military airports.</p>"},{"location":"faq/#flight-offers-search","title":"Flight Offers Search","text":""},{"location":"faq/#why-are-the-prices-returned-more-expensive-than-on-other-websites","title":"Why are the prices returned more expensive than on other websites?","text":"<p>The API only returns published rates, which are the standard rates given by airlines. Amadeus then redistributes them to the travel agencies around the world. However, big players in the industry can negotiate their rates directly with the airlines, which can help them be more competitive or maximise returns made form selling tickets.</p>"},{"location":"faq/#what-does-nonhomogeneous-mean-in-the-api-response","title":"What does nonHomogeneous mean in the API response?","text":"<p>PNRs are designed to be homogeneous, meaning that one PNR contains the same type of content (e.g., flights only) and number of passengers. However, nowadays, there can be a mix of different content, such as air and hotel. When nonHomogeneous is true, it means that a single PNR can contain records that would initially be split across different PNRs.</p>"},{"location":"faq/#why-the-datawindow-parameter-returns-less-results-with-i3d-or-i2d","title":"Why the dataWindow parameter returns less results with I3D or I2D?","text":"<p>This is normal behaviour. Flight Offers Search returns the cheapest option for all flights. When you request an extra delay in the search (+/- xDays), Flight Offers Search takes a matching flight (i.e., AF111), checks all possible days, and returns only the cheapest offers. Using more filters does not increase the number of results. It increases the range of data the API uses to find the cheapest offers to return. Having fewer options between 'I3D' and 'I2D' is normal. With 'I2D,' you most likely compare a working week with very regular flights, and with 'ID3,' you always include weekend flights on top, so there are more options.</p>"},{"location":"faq/#how-can-i-add-a-loyalty-program-to-a-booking","title":"How can I add a loyalty program to a booking?","text":"<p>Flight Offers Price and SeatMap Display both accept frequent flyer information, so end-users can benefit from their loyalty program. When adding frequent flyer information, please remember that each airline policy is different, and some require additional information like passenger name, email, or phone number to validate the account. If validation fails, your user won\u2019t receive their loyalty program advantages.</p>"},{"location":"faq/#post-and-get-do-not-return-the-same-results","title":"POST and GET do not return the same results","text":"<p>By default the GET method does not return airlines blacklisted in Europe. However, users can override this using the POST method.</p>"},{"location":"faq/#how-do-i-add-bags-to-a-check-in-bag-for-flight-reservation","title":"How do I add bags to a check in bag for flight reservation?","text":"<p>You can add a checked-in bag to a flight booking using the \u2018\u2019additionalServices\u2019\u2019 element in the flight offer when calling Flight Offers Price. For more details, please check our guide on adding baggage with Amadeus flight booking APIs. </p>"},{"location":"faq/#how-do-i-add-bags-to-a-cabin-bag-for-flight-reservation","title":"How do I add bags to a cabin bag for flight reservation?","text":"<p>Our APIs do not return cabin bag information in the responses, and it is not possible to add an additional cabin bag to a booking. </p>"},{"location":"faq/#can-i-display-the-price-of-flights-using-air-milesloyalty-points-and-book-a-flight","title":"Can I display the price of flights using air miles/loyalty points and book a flight?","text":"<p>Our Self-Service APIs do not let you display the prices in loyalty points or book a flight using loyalty points.</p>"},{"location":"faq/#why-are-some-taxes-refundable","title":"Why are some taxes refundable?","text":"<p>A refundable tax is a type of tax or fee that is collected when you purchase an airline ticket but can be refunded to the passenger under certain circumstances, these conditions will vary depending on the specific country and airline. </p>"},{"location":"faq/#how-can-i-integrate-flight-booking","title":"How can I integrate flight booking?","text":"<p>You can integrate flight booking using our Self-Service APIs. Production access is subject to certain requirements, including being registered in one of our approved markets, meeting your local legal requirements, and working with an airline consolidator to issue tickets.</p> <p>The booking flow involves the following APIs: - Flight Offers Search: to search for the best bookable flight offers. - Flight Offers Price: confirms the latest price and availability of a specific chosen flight. - Flight Create Orders: to book flights and ancillary services proposed by the airline. - Flight Orders Management: to manage and consult your bookings. This API also includes an endpoint to cancel the reservation.</p> <p>Once you generate a booking in production, your consolidator will receive it in their back office and issue the tickets from there. After the ticket has been issued, you will need to contact your consolidator for any modifications to the booking or refund requests.  For more information on flight booking please check our guide on how to build a flight booking engine.</p>"},{"location":"faq/#do-you-provide-co2-emission","title":"Do you provide Co2 emission?","text":"<p>New update from January 2024:  You can return Co2 emission in the Flight Offers Price API response when you are validating the price and available, or after the booking step in the Flight Create Orders API response.</p>"},{"location":"faq/#what-are-fare-rules","title":"What are fare rules?","text":"<p>Fare rules are a set of conditions that determine the price of an air ticket for each seat class. They also define whether a ticket is refundable/nonrefundable or whether additional charges are applicable. You can return those with our Self-Service APIs using Flight Offers Price and adding ''include=detailed-fare-rules'' in your base URL:</p> <p><code>https://test.api.amadeus.com/v1/shopping/flight-offers/pricing?include=detailed-fare-rules</code></p> <p>Please keep in mind that this will return the fare rules in a raw format. If you want a structured version of these, you will need to use our Enterprise APIs.</p>"},{"location":"faq/#do-you-return-airline-logos","title":"Do you return airline logos?","text":"<p>We do not return airline logos in our Self-Service catalog.</p>"},{"location":"faq/#flight-offers-price","title":"Flight Offers Price","text":""},{"location":"faq/#how-can-we-get-information-on-refundable-flights","title":"How can we get information on refundable flights?","text":"<p>To get the refund policy for a specific flight, you will need to use the Flight Offers Price API, with the parameter <code>include</code> set to <code>detailed-fare-rules</code> at the endpoint of the URL as follows: https://api.amadeus.com/v1/shopping/flight-offers/pricing?include=detailed-fare-rules </p>"},{"location":"faq/#flight-price-analysis","title":"Flight Price Analysis","text":""},{"location":"faq/#why-do-some-origin-and-destination-pairings-not-return-any-results","title":"Why do some origin and destination pairings not return any results?","text":"<p>Not all possible routes are supported by the API even in production. The reason is that the machine learning model filters out all the routes with an error rate below 15% MAPE (Mean absolute percentage error). For more insights on how the model works, please refer to this blog post.</p>"},{"location":"faq/#flight-delay-prediction","title":"Flight Delay Prediction","text":""},{"location":"faq/#why-do-i-get-the-inference-error","title":"Why do I get the INFERENCE error?","text":"<p>This means the requested origin/city pairing was not included in our training data. So, we have no previous information on whether that flight is normally delayed or not.</p>"},{"location":"faq/#flight-cheapest-date-search","title":"Flight Cheapest Date Search","text":""},{"location":"faq/#why-are-some-origin-and-destination-pairings-not-returning-results_1","title":"Why are some origin and destination pairings not returning results?","text":"<p>The Flight Inspiration Search &amp; Flight Cheapest Date Search APIs are built on top of a pre-computed cache of selected origin-destination pairs. This is why, even in production, you cannot find all possible origin-destination pairs. To access more results, you need to use the live Flight Offers Search API.</p>"},{"location":"faq/#why-do-i-get-the-500-error-message","title":"Why do I get the 500 error message?","text":"<p>The 500 error message <code>'SYSTEM ERROR HAS OCCURRED', 'detail': 'Primitive Timeout'</code>  is caused by the search being too generic, and the API taking too much time to fetch the data. Unfortunately, there is nothing we can do about this for now. The solution will be to filter the search down using more parameters.</p>"},{"location":"faq/#flight-availabilities-search","title":"Flight Availabilities Search","text":""},{"location":"faq/#why-are-some-travel-classes-not-returned-in-the-search-results","title":"Why are some travel classes not returned in the search results?","text":"<p>Travel class is not standardized, and some airlines may use different letters for the same travel class. For example, All Nippon Airways does not use 'Class: I'. By default, this API excludes closed booking classes, departed flights, and cancelled flights. To return closed content, you can use the parameter <code>includeClosedContent</code> and set it to <code>true</code>.</p>"},{"location":"faq/#branded-fares-upsell","title":"Branded Fares Upsell","text":""},{"location":"faq/#why-do-additional-services-change-between-segments-in-an-itinerary","title":"Why do additional services change between segments in an Itinerary?","text":"<p>Additional services can change between segments in an itinerary. For example, a passenger could end up with a checked bag which is allowed in one of the segments of an itinerary but not on the others (because of its weight or because it's not included at all). This is normal behavior for this API. The packages are created at the flight level. This means that even an itinerary made up of two flights from the same airline could have different upsell options. Additionally, not every airline will have the option to upsell.</p>"},{"location":"faq/#seatmap-display","title":"SeatMap Display","text":""},{"location":"faq/#is-there-any-way-to-request-a-seat-map-by-cabin-instead-of-having-to-specify-a-booking-class-code","title":"Is there any way to request a seat map by cabin instead of having to specify a booking class code?","text":"<p>There is no way to specify a cabin, but you will get this information in the response of Flight Offers Search. This will allow you to filter based on that.</p>"},{"location":"faq/#why-do-i-get-the-error-code-4926","title":"Why do I get the error code 4926?","text":"<p>Returning the error: <code>'warnings': [{'code': 4926, 'title': 'INVALID DATA RECEIVED', 'detail': 'Invalid departure/Arrival city pair'}]</code> is caused by airlines choosing not to display the seat map of some flights, so the API returns a warning with the information we have.</p>"},{"location":"faq/#seatmap-not-available-as-flight-operated-by-another-carrier","title":"Seatmap not available as flight operated by another carrier","text":"<p>This error is generated when the specified flight in the query is a codeshare, and no agreement exists with the operating flight. Unfortunately, the only way to mitigate this in the future is to avoid calling the SeatMap Display API with this specific operating carrier.</p>"},{"location":"faq/#why-am-i-unable-to-retrieve-seatmap-data","title":"Why am I unable to retrieve seatmap data?","text":"<p>This error message means that the airline never filled in a seat map for the specific flight. It's usually not generic to all flights of the airline. Unfortunately, there is no solution for this one.</p>"},{"location":"faq/#what-does-available-blocked-and-occupied-mean-in-the-response","title":"What does AVAILABLE, BLOCKED, and OCCUPIED mean in the response?","text":"<ul> <li><code>AVAILABLE</code>: the seat is\u202fnot occupied\u202fand\u202fis\u202favailable to book. </li> <li><code>BLOCKED</code>:\u202fthe seat is not occupied but isn\u2019t\u202favailable to book for the user. This is usually due to the passenger type (e.g., children may not sit in exit rows), or their fare class (e.g., some seats may be reserved for travelers in higher classes).</li> <li><code>OCCUPIED</code>: the seat is\u202foccupied\u202fand\u202funavailable to book.</li> </ul>"},{"location":"faq/#flight-create-orders-api","title":"Flight Create Orders API","text":""},{"location":"faq/#how-are-tickets-issued-for-flights-booked-with-flight-create-orders-in-self-service","title":"How are tickets issued for flights booked with Flight Create Orders in Self-Service?","text":"<p>For Self-Service users, ticketing must be done via airline consolidator. Airline consolidators are essentially air ticket wholesalers that have special arrangements with airlines and, among other functions, can serve as host agencies for travel agents without the necessary IATA/ARC certifications necessary to issue tickets.</p> <p>To access Flight Create Orders in production, you must have a contract signed with a consolidator for ticket issuance. If you need help finding a consolidator, please contact our support team to put in touch with the best consolidator in your region.</p>"},{"location":"faq/#how-can-i-retrieve-booking-made-with-flight-create-orders-in-self-service","title":"How can I retrieve booking made with Flight Create Orders in Self-Service?","text":"<p>You can consult booking made through Flight Create Orders using the Flight Order Management API. This API works using a unique identifier(the flight offer id) that is returned by the Flight Create Orders API.</p>"},{"location":"faq/#does-amadeus-pay-a-commission-for-flights-booked-with-flight-create-orders-in-self-service","title":"Does Amadeus pay a commission for flights booked with Flight Create Orders in Self-Service?","text":"<p>Generally, Amadeus does not offer booking commissions for Self-Service users.</p>"},{"location":"faq/#why-do-i-get-the-invalid-data-received-error","title":"Why do I get the INVALID DATA RECEIVED error?","text":"<p>Getting the error message: <code>INVALID DATA RECEIVED</code>. Some of the data in the query is false. It could be that the fare does not match the traveling class, or that the flight number is incorrect. This is common to all our APIs. It comes from the API backend validating your query. All the fields of the price reply should be exactly the same as the one from the book query to be sure there is a problem.</p>"},{"location":"faq/#why-do-i-get-the-segment-sell-failure-error","title":"Why do I get the SEGMENT SELL FAILURE error?","text":"<p>Getting the error message: <code>SEGMENT SELL FAILURE</code> means that you were not able to book the seat in the airline inventory. Most of the time, it comes from the flight being full. This often happens in the test environment, as you can perform many bookings without restrictions (no real payment). But the inventory is a copy of the real one, so if you book many seats, the inventory can get empty and you won't be able to book anymore. The good practice here is to use Flight Offers Price right before booking and avoid last-minute flights that tend to quickly get full.</p>"},{"location":"faq/#how-does-payment-work-when-i-book-a-flight","title":"How does payment work when I book a flight?","text":"<p>There are two things to consider regarding payments for flight booking:</p> <ol> <li> <p>The payment between you (the app owner) and your customers (for the services provided + the price of the flight ticket). You decide how to collect this payment. It is not included in the API. A third-party payment gateway, like Stripe for example, will be the easiest solution for this.</p> </li> <li> <p>The payment between you and the consolidator (to be able to pay the airline and issue the flight ticket). This will be done between you and your consolidator of choice and is to be agreed upon with the consolidator.</p> </li> </ol>"},{"location":"faq/#how-can-i-cancel-a-flight","title":"How can I cancel a flight?","text":"<p>Cancellation is possible with the Flight Orders Management API as long as the booking has not been issued by the consolidator yet. If the booking has been issued, it will need to be canceled by the consolidator directly.</p>"},{"location":"faq/#how-to-make-the-airline-consolidator-wait-before-issuing-a-ticket","title":"How to make the airline consolidator wait before issuing a ticket?","text":"<p>You can delay ticketing using the <code>ticketingAgreement</code> parameter in Flight Create Orders. For this, you can use the following options:</p> <ul> <li><code>DELAY_TO_QUEUE</code>: this allows you to queue the reservation for the desired date if the traveller does not make the payment.</li> <li><code>DELAY_TO_CANCEL</code>: if the traveler does not make the payment, the reservation for the desired date will be cancelled.</li> </ul> <p>The queuing and cancellation take place based on the local date and time. If no specific time is mentioned, the reservation is queued or cancelled at 00:00.</p>"},{"location":"faq/#can-i-markup-prices-of-flight-tickets-sold","title":"Can I markup prices of flight tickets sold?","text":"<p>Yes you are free to add a markup on any flight ticket. This must be done through your own payment gateway.</p>"},{"location":"faq/#how-can-i-modify-my-booking-once-the-ticket-is-issued","title":"How can I modify my booking once the ticket is issued?","text":"<p>This is not possible through our Self-Service APIs. Once a ticket has been issued you will need to contact the consolidator for any changes, and this will be subject to a fee.  In case the ticket has not been issued. You will need to delete the booking and rebook with the modifications.</p>"},{"location":"faq/#hotel-search-book","title":"Hotel Search &amp; Book","text":""},{"location":"faq/#what-are-guarantee-deposit-and-prepay","title":"What are guarantee, deposit and prepay?","text":"<ul> <li>Guarantee: The hotel will save credit card information during booking but will not make any charges to the account. In the case of a no-show or out-of-policy cancellation, the hotel may charge penalties to the card.</li> <li>Deposit: At the time of booking or on a given deadline, the hotel will charge the guest a percentage of the total amount of the reservation. The remaining amount is paid by the traveler directly at the hotel.</li> <li>Prepay: The traveler must pay the total amount of the reservation during booking.</li> </ul>"},{"location":"faq/#what-is-the-total-price","title":"What is the total price?","text":"<p>The price total refers to the total price to be paid for the full stay. The variations, on the other hand, represent the average price per night. In the example you highlighted, a guest will need to pay \u20ac548.56 for the three nights, and the average price for the room is \u20ac182.85 per night (\u20ac548.55 overall). For more details, you can refer to our data model found in the OpenAPI specification of the Hotel Search API.</p>"},{"location":"faq/#what-is-the-latest-possible-date-for-check-in","title":"What is the latest possible date for check-in?","text":"<p>The maximum date for the 'checkInDate' parameter is 359 days from today. Anything beyond this will return the error message 'MAXIMUM ADVANCE DAYS BOOKING EXCEEDED'.</p>"},{"location":"faq/#how-to-search-a-hotel-by-location","title":"How to search a hotel by location","text":"<p>Regarding the input for a specific location in a hotel search, you have the following options:</p> <ul> <li> <p>Since the commissioning of Hotel Search v3, we can no longer search hotels by IATA codes. In order to search by location you will need to use the third endpoint of Hotel List <code>/reference-data/locations/hotels/by-geocode</code>, which allows you to search using a latitude &amp; longitude. The Hotel List API returns <code>hotelIds</code> based on the specific search coordinates. You will then need to use this <code>hotelId</code> in the third endpoint of the Hotel Search API.</p> </li> <li> <p>Alternatively, you can use the Google API to retrieve the geo location of a specific location and use the Hotel Search by geo location.</p> </li> </ul>"},{"location":"faq/#what-type-of-payments-are-supported","title":"What type of payments are supported?","text":"<p>The current version of the Hotel Booking API only supports credit card payments. The Hotel Search API returns the payment policy of each hotel under <code>acceptedPayments</code> in the policies section.</p>"},{"location":"faq/#can-i-markup-the-room-prices","title":"Can I markup the room prices?","text":"<p>It is not possible to markup the prices of the hotel rooms with the current version of the Hotel Booking API. The reason is that the content we offer today in our Hotel Search/Book API is post-paid, meaning the traveler will pay directly at the hotel. The Hotel Booking API is here to enable making a reservation but not to pay directly. We are working on adding more hotel offers, especially offers that will be pre-paid, meaning you will be able to charge the travelers directly and add a markup. However, you still need to add a credit card while booking in case of cancellations or no-shows.</p>"},{"location":"faq/#payment-providers-and-gateways","title":"Payment providers and gateways","text":"<p>The Hotel Booking API works by using the guest's payment information and sending it to a chosen hotel for the reservation. You can use a payment gateway in your app, but this will not change the way the API works. The hotels will never collect any money from you. Instead, the payments are always done at the time of checkout between the guest and the hotel. During the booking process, Amadeus passes the payment and guest information to the hotel but does not validate information, so it doesn\u2019t play the role of payment gateway. Be sure to validate the payment and guest information as invalid information may result in the reservation being canceled. As soon as your application stores, transmits, or processes cardholder information, you will need to comply with the PCI Data Security Standard (PCI DSS). For more information, visit the PCI Security Council website.</p>"},{"location":"faq/#how-can-i-cancel-a-room-booking","title":"How can I cancel a room booking?","text":"<p>As of now, the hotel booking API does not allow canceling rooms. If this option is possible with your hotel offer, the cancellation will have to be done manually with the hotels. We are working on an API for the cancellation; however, it is still too soon to commit to anything.</p>"},{"location":"faq/#why-do-i-get-500-status-code","title":"Why do I get 500 status code?","text":"<p>The process of booking a hotel in the test environment involves sending your request to each hotel provider, and each provider has its own environment and rules. Due to these differences, there may be connectivity issues with the providers that can result in a timeout. Additionally, if many requests are sent to a particular hotel, they may choose to block them. If you provide us with a timestamp and details of another API request that has failed, including the hotel in question, we can search our logs to find more information. However, it is likely that the issue is one of the aforementioned cases.</p>"},{"location":"faq/#how-can-i-see-amadeus-api-coverage-for-a-hotel-chain","title":"How can I see Amadeus API coverage for a hotel chain?","text":"<p>You can find the list of supported hotel chains in our data collection.</p>"},{"location":"faq/#what-is-considered-a-query","title":"What is considered a query?","text":"<p>When you make an initial call to the Hotel Search API with a cityCode parameter, it is considered one query that returns 10 hotels. If you then click on each hotel to view room details and other information, you are making additional API calls using the second endpoint of the Hotel Search. Each hotel that you click on generates another API call. For example, if you click on 5 hotels to see room details, you will be making a total of 5 additional queries.</p>"},{"location":"faq/#do-i-need-any-legal-documents-to-make-a-booking","title":"Do I need any legal documents to make a booking?","text":"<p>No, there are no legal documents required. However, you will need to comply with any local legal requirements for your market.</p>"},{"location":"faq/#what-are-the-room-type-codes","title":"What are the room type codes?","text":"<p>The room type code is a 3-character identifier that indicates the room type category, the number of beds, and the bed type. However, some hotels may not follow this pattern and instead use custom types. In such cases, the room description is the best way to understand the room type.</p>"},{"location":"faq/#how-do-i-cancel-a-hotel","title":"How do I cancel a hotel?","text":"<p>There is no way to cancel hotel bookings through the APIs. This needs to be done offline by ringing the hotels. </p>"},{"location":"faq/#why-is-hotel-search-returning-empty-responses-data","title":"Why is Hotel Search returning empty responses \u2018{\"data\": []}\u2019?","text":"<p>You are returning this because this specific hotel is closed or unavailable for this specific date. You can either try to change the check-in date or use the ''includeClosed'' parameter set to ''true''. The latter will return further information on the hotel, but you will not be able to book it.</p>"},{"location":"faq/#do-you-return-hotel-images","title":"Do you return hotel images?","text":"<p>Hotel images are not available through our Self-Service catalog.</p>"},{"location":"faq/#airline-consolidators","title":"Airline consolidators","text":""},{"location":"faq/#what-is-an-airline-consolidator","title":"What is an airline consolidator?","text":"<p>Airlines consolidators are wholesalers of air tickets. They usually partner with airlines to get negotiated rates for air tickets, and then resell the air tickets to travel agents or consumers.</p> <p>Many airlines consolidators act as host agencies for retail travel agencies or online travel agency startups that do not have the license from the International Air Transport Association (IATA) to issue air tickets. To issue air tickets via airline consolidators, the travel startups have to settle commercial agreements with the airline consolidators in the markets in which they want to operate. </p> <p>It is to be noted that not all the airline consolidators provide post-ticketing services such as monitoring and notifying travel agencies about schedule changes and flight cancellations. This is something that startups have to check with their potential airline consolidators. </p>"},{"location":"faq/#how-are-payments-handled-with-my-consolidator","title":"How are payments handled with my consolidator?","text":"<p>Different airline consolidators handle payments in different ways. In some cases, you will be asked to make an initial deposit to cover future ticketing charges. In other cases, you will be billed monthly for the services consumed. Please contact our support team or refer to your airline consolidator contract for more details.</p>"},{"location":"faq/#how-do-i-handle-cancellations-changes-and-post-booking-services-for-bookings-made-with-flight-create-orders-in-self-service","title":"How do I handle cancellations, changes and post-booking services for bookings made with Flight Create Orders in Self-Service?","text":"<p>For Self-Service users, all post-booking services must be handled offline with the consolidator you work with for ticket issuance. In general, these actions can be made while the Passenger Name Record (PNR) is queued for ticketing (before the ticket is issued), though their availability once a ticket has issued depends largely on the consolidator and the clauses of your agreement. </p>"},{"location":"faq/#how-can-i-get-a-consolidator","title":"How can I get a consolidator?","text":"<p>Before requesting a consolidator, please first make sure that you are in one of the approved markets for Flight Create Orders. You need it to implement flight booking in Self-Service. Once this is verified, please go to the Support section and get in touch with us using the Contact form.</p>"},{"location":"faq/#how-do-i-handle-refunds-for-flights-booked-with-flight-create-orders-in-self-service","title":"How do I handle refunds for flights booked with Flight Create Orders in Self-Service?","text":"<p>Refunds must be handled offline directly with your consolidator. </p>"},{"location":"faq/#can-i-use-multiple-consolidators","title":"Can I use multiple consolidators?","text":"<p>Yes you can use different consolidator, but you will need to tell us so we can connect both your accounts. Once we open the access, you can decide where you want your booking to go using the \u2018\u2019queuingOfficeId\u2019\u2019 parameter in the Flight Create Orders request.</p>"},{"location":"faq/#destination-experiences","title":"Destination Experiences","text":""},{"location":"faq/#do-you-provide-tours-and-activities-at-destination","title":"Do you provide tours and activities at destination?","text":"<p>You can search and book activities with our Tours and Activities API. It includes 300,000 activities around the world, such as sightseeing tours, days trips, and museum tickets. The API provides a list of top activities for a given location, including the prices, ratings, descriptions, photos, as well as a deep link to complete the booking with the provider.</p>"},{"location":"faq/#what-are-the-tags-returned-in-points-of-interest","title":"What are the tags returned in Points of Interest?","text":"<p>The Points of Interest API returns the following tags:</p> <p>food, schools, beauty&amp;spas, commercialplace, outdoorplace, tourguide, health&amp;hospital, health&amp;medicalcenter, trail, health&amp;medical, professionalservices, busline, honeymoonpackages, bakery, rental, newspaper, garden, generic, gift, vineyard, cityhall, sport, beauty&amp;hairsalon, beauty&amp;nailsalon, pet, market, machines, icecream, secondhand, communitycenter, toy, kids, health&amp;seniorcenter, daycare, education, rugby, smoke, cemetery, harbor, laundromat, optical, cheese, financialservices, bank, field, college, car, florists, pharmacy, games, atm, building, university, mobilephone, center, donuts, beauty&amp;barbershop, road, chocolate, tattoo, militarybase, surfing, lighthouse, cottage, square, cricket, patio, fusion, health&amp;alternative, printing, basketball, pier, bay, wildlifesanctuary, airlines, lottery, fairground, health&amp;nursinghome, art, tunnel, ski, gunroom, gunrange, camping, meat, antique, discount, prison, servicestation, thriftshop, gayfriendly, skate, creperie, electronic, petrolshelf, street, culturalcenter, volleyball, merchandise, popcorn, reservoir, sleepwear, beauty&amp;professionals, firewall, drinkingwater, publicplace, quarries, health&amp;services, prosthetics, industrialestate, american, mexican, internet, ignore, military, natural, canadian, technology, indian, tea, salon, beer, coffee, spanish, arts, communications, irish, french, river, neighbourhoodsandvillages, celebrities, office, social, japanese, institute, peruvian, british, continental, wine, brazilian, chinese, asian, italian, beauty, hair, religious, mediterranean, generic, african, portuguese, greek, farm, deli, german, european, ocean, english, religiousorganization, basque, latin, family, russian, austrian, southern, accessories, vegetarian, middleeastern, vietnamese, chicken, caribbean, lebanese, cosmetics, cuban, telecommunication, vegan, drink, design, moroccan, texmex, turkish, hawaiian, security, dining, contemporary, cajun, australian, korean, persian, pakistani, eating, painting, pet, bed&amp;breakfast, bar, cooking, latte, ignore, chinese, nature, noodles, game, dating, automotive, car, electrician, funeral, travel, wedding, firestation, tvandradio, environmental, farm, agriculture, company, realestate, eyedoctor, campground, hostel, hotel, inn, lodging, motel, resort, corporatehousing, hiking, golf, events, sports, theater, gym, neighborhood, locality, city, island, region, home, office, dealership, storage, butcher, courthouse, radiostation, conferenceroom, insurance, dentist, photographer, animalshelter, coach, chiropractor, gardener, music, architect, nutritionist, apartments, vacationrental, yoga, tennis, nightlife, bodega, burrito, dance, skating, activelife, basketball, beach, baseball, state, shoppingdistrict, home, pet, veterinarian, mediaproduction, wholesale, factory, plumber, legal, government, fooddelivery, health, doctor, physicaltherapist, mobilehomes, police, conventioncenter, auctionhouse, religiousplace, coworkingspace, recycling, armedforces, marketing, publicservice, stadium, skydiving, sportclub, cine, zoo, massage, cricket, country, lawyer, design, childcare, carpenter, startup, financial, building, painter, retailer, graphicdesign, optometrists, transport, postoffice, itservices, spiritualcenter, distributor, embassy, recruiter, counseling, mover, tailor, festival, huntingandfishing, horseriding, lasertag, paintball, submarinism, rafting, surfing, climbing, summercamp, skate, gamingcafe, province, castle, operahouse, seamstress, hockey, mining, manufacturers, repair, accountant, chamberofcommerce, restorer, lab, publisher, pharmaceutical, psychologist, entertainer, energy, laborunions, traditional, pilates, stargazing, martialarts, rodeo, circus, karting, cheerleading, leisure, classiccuisine, traditionalcuisine, eco, floatels, accommodation, brewery, club, musicvenue, nightclub, pub, restaurant, barbecue, breakfast, buffet, burger, cheap, coffee, fastfood, foodtruck, gastropub, grills, hotdogs, internetcoffe, noodle, pizza, ramen, sandwich, seafood, activities, aquarium, attraction, banquethalls, bike, bowlingalley, casino, snack, steakhouse, sushi, taco, tapas, tea, thai, vegetarian, shopping, baby, bags, boutique, clothing, fashion, home, jewelry, library, liquor, mall, musicstore, outlet, perfume, personalcare, shoe, watches, supermarket, bridge, forest, garden, marina, marine, picnic, restarea, river, beach, capitol, church, lake, mosque, mountain, river, statuary, synagogue, temple, sightseeing, artgallerie, landmark, museum, sights, bridge, capitol, church, historicplace, marina, mosque, palace, synagogue, temple, buddhist, transport, airport, bus, busstation, busstop, gasstation, heliport, metro, metrostation, parking, port, taxi, train, trainstation, tram, boating, boating, park, italiancuisine, juicebar, bathingarea, fountain, statue, volcano, chargingstation, bistro, brasserie, churrasco, foodstand, mediterraneancuisine, moderncuisine, regionalcuisine, snackbar, spanishcuisine, swissfood, souvenir, amusementpark, boat, historic, japanese, guesthouse, camping, archery, bingohall, birdwatching, luxurybybrand, luxuryname, luxury.</p>"},{"location":"faq/#cars-transfers","title":"Cars &amp; Transfers","text":""},{"location":"faq/#who-are-the-providers-available-in-the-car-transfers-apis","title":"Who are the providers available in the Car &amp; Transfers APIs?","text":"<p>The Transfers APIs will allow you to offer private transfers, hourly services, taxis, shared transfers, airport express, airport buses, private jets, and helicopter transfer. The API uses the following providers:</p> Name Code Drivania DRV Eco Rent A Car ECO EZ Shuttle ZA ESZ FlygTaxi FGT Get-E GET GroundScope GSE GroundSpan GSN HolidayTaxis HTX iVcardo IVC JPD Transport JPD Servantrip SVP Sixt Ride SMD SuperShuttle SPS Svea Taxi Allians TXB Talixo TXO Taxibokning TXB TaxiTender TXT World Transfer WTR"},{"location":"faq/#technical-support","title":"Technical support","text":""},{"location":"faq/#what-kind-of-support-does-amadeus-for-developers-offer","title":"What kind of support does Amadeus for Developers offer?","text":"<p>There are two different support paths available based on our two different offer: Self-Service and Enterprise.</p> <ol> <li>Self-Service users have at their disposal detailed documentation, guides and SDKs, to help them solve any doubts they may have. Check the Self-Service Docs page for more information. For any other Self-Service support queries, such as billing issues or a refund request, please go to the support section and click on contact us about Self-Service support.</li> </ol> <p>Important</p> <p>Contact Support  You need to be registered and signed in to reach out to the Self-Service support.</p> <ol> <li>Enterprise users have access to dedicated support. If you are an Enterprise user, get in touch with your Account Manager or open a ticket via the Amadeus Service Hub.</li> </ol>"},{"location":"faq/#where-do-i-go-for-self-service-technical-support-what-does-it-cost","title":"Where do I go for Self-Service technical support? What does it cost?","text":"<p>If you are a Self-Service customer experiencing a technical issue, you should do the following:</p> <ol> <li>First, look for an answer in our Self-Service APIs Docs and this FAQs page. We update this page regularly with explanations on fixing common issues.</li> <li>Search for a solution in Stack Overflow, or ask the community for help. Our developer advocacy team actively monitors and answers the questions on Stack Overflow that relate to our APIs.</li> <li>Finally, if you are still experiencing a problem with Self-Service APIs, you can get in touch with our developer advocates via the contact form in the Support page. We will try to get back to you as quickly as possible, however please understand that in times of high demand we may not be able to guarantee a prompt answer.</li> </ol>"},{"location":"faq/#do-you-offer-phone-support-for-self-service-apis","title":"Do you offer phone support for Self-Service APIs?","text":"<p>We do not currently offer phone support for Self-Service APIs. If you need assistance you can get in touch with our Developer Advocates via the contact form in the Support page. Please keep in mind that in times of high demand we may not be able to guarantee a prompt answer.</p>"},{"location":"faq/#how-can-i-report-bugs-or-suggest-improvements-to-the-self-service-section","title":"How can I report bugs or suggest improvements to the Self-Service section?","text":"<p>We love feedback from our community and it helps us create the best possible product for all users! If you want to report a bug or suggest improvements, please go to the Support section and get in touch using the Contact form.</p>"},{"location":"glossary/","title":"Key concepts","text":"<p>This page provides help with the most common terminology used across Amadeus Self-service APIs.</p>"},{"location":"glossary/#air-and-trip","title":"Air  and Trip","text":"Term Definition Additional Baggage Luggage beyond the standard allowance provided by an airline, subject to additional fees. Aircraft Code IATA aircraft code . Airline Code Airline code following IATA or ICAO standard - e.g. 1X; AF or ESY. Airline consolidators Wholesalers of air tickets that usually partner with airlines to get negotiated rates for air tickets, and then resell the air tickets to travel agents or consumers. Amadeus Office ID An identification number assigned to travel agencies to access Amadeus system and book reservations. Amenities Additional services or features offered to enhance the experience of the passengers, such as food, entertainment, Wi-Fi, extra legroom, baggage allowance, frequent flyer programs, and lounge access. They can vary depending on the class of service and the airline/train company. Baggage allowance The amount of luggage that a passenger is allowed to carry on a flight without additional charges. Booking The process of reserving a seat on a flight or a room in a hotel. Cabin The section of an aircraft or train where passengers sit during their trip. It is divided into different classes, such as first class, business class, and economy class, each one with different amenities and prices. Commission Fee paid to intermediaries for booking travel-related services, usually a percentage of the total cost. Carrier Code 2 to 3-character IATA carrier code (IATA table codes). Country Code Country code following ISO 3166 Alpha-2 standard. Direct flight A flight that goes from one destination to another without any stops in between. Fare The price of a ticket for a particular flight or travel itinerary. Fare Rules The terms and conditions that apply to a specific airline ticket or fare, including restrictions and information on refunds, cancellations, changes, baggage, seat assignments, upgrades, and frequent flyer programs. Flight Order Id Unique identifier returned by the Flight Create Orders API . GDS (Global Distribution System) A computerized system used by travel agents and airlines to search for and book flights, hotels, rental cars, and other travel-related services IATA International Air Transport Association IATA Code Code  used by IATA to identify locations, airlines and aircraft. For example, the Airport &amp; City Search API  returns IATA codes for cities as the <code>iataCode</code> parameter. ICAO International Civil Aviation Organization ISO8601 date format PnYnMnDTnHnMnS format, e.g. PT2H10M. Layover A stopover in a destination en route to the final destination. Location Id Amadeus-defined identifier that you can see in the search results when querying Self-Service APIs that retrieve information on geographical locations. Multi-stop flight A flight itinerary that includes stops at multiple destinations before reaching the final destination. Non-stop flight A flight that goes from one destination to another without any stops in between. Pricing The process of determining the cost of a product or service, in the context of travel it refers to the cost of airline tickets, hotel rooms, rental cars. PNR (Passenger Name Record) A record in a computer reservation system that contains the details of a passenger's itinerary and contact information. Round-trip A trip that includes travel to a destination and then back to the original departure point. Seatmap A map or diagram of the seating layout in the cabin of an aircraft or train. It shows the location of different types of seats, such as exit row, bulkhead seat, aisle seat, window seat. It can be used to choose a seat or to see the availability of seats for a certain flight. Ticketing The process of issuing a travel document, typically a paper or electronic ticket, that confirms that a passenger has purchased a seat on a flight, train, bus, or other form of transportation. It can be refundable or non-refundable, one-way or round-trip, and open-jaw. Travel Classes Differentiation of service level and amenities offered to passengers on an aircraft or train, like first class, business class, economy class."},{"location":"glossary/#hotel","title":"Hotel","text":"Term Definition Hotel Ids Amadeus Property Codes (8 chars). Comma-separated list of Amadeus Hotel Ids (max. 3). Amadeus Hotel Ids are found in the Hotel Search response (parameter name is <code>hotelId</code>)."},{"location":"glossary/#destination-content","title":"Destination content","text":"Term Definition Avuxi Amadeus' data provider on locations popularity. Activity Id Tours and Activities  API  returns a unique activity Id along with the activity name, short description, geolocation, customer rating, image, price and deep link to the provider page to complete the booking. GeoSure Amadeus's provider od data on locations crime rate, health and economic data, official travel alerts, local reporting and a variety of other sources. GeoSure GeoSafeScores Algorithm that analyzes crime, health and economic data, official travel alerts, local reporting and a variety of other sources."},{"location":"pagination/","title":"Pagination on Self-Service APIs","text":"<p>Amadeus for Developers Self-Service APIs can often return a lot of results. For example, when calling the Safe Place API, you may get a response hundreds of pages long. That's where pagination comes in. Using pagination, you can split the results into different pages to make the responses easier to handle.</p> <p>Not all Amadeus Self-Service APIs support pagination. The following APIs currently support pagination:</p> <ul> <li>Points of Interest</li> <li>Airport Nearest Relevant</li> <li>Airport &amp; City Search</li> <li>Flight Most Travelled Destinations</li> <li>Flight Most Booked Destinations</li> </ul>"},{"location":"pagination/#accessing-paginated-results","title":"Accessing paginated results","text":""},{"location":"pagination/#using-sdks","title":"Using SDKs","text":"<p>Amadeus for Developers SDKs make it simple to access paginated results. If the API endpoint supports pagination, you can get page results using the the <code>.next</code>, <code>.previous</code>, <code>.last</code> and <code>.first</code> methods.</p> <p>Example in <code>Node</code>:</p> <pre><code>amadeus.referenceData.locations.get({\n  keyword: 'LON',\n  subType: 'AIRPORT,CITY'\n}).then(function(response){\n  console.log(response.data); // first page\n  return amadeus.next(response);\n}).then(function(nextReponse){\n  console.log(nextReponse.data); // second page\n});\n</code></pre> <p>If a page is not available, the response will resolve to <code>null</code>.</p> <p>The same approach is valid for other languages, such as <code>Ruby</code>:</p> <pre><code>response = amadeus.reference_data.locations.get(\n  keyword: 'LON',\n  subType: Amadeus::Location::ANY\n)\namadeus.next(response) #=&gt; returns a new response for the next page\n</code></pre> <p>In this case, the method will return <code>nil</code> if the page is not available.</p>"},{"location":"pagination/#manually-parsing-the-response","title":"Manually parsing the response","text":"<p>The response will contain the following <code>JSON</code> content:</p> <pre><code>{\n  \"meta\": {\n     \"count\": 28,\n     \"links\": {\n        \"self\": \"https://api.amadeus.com/v1/reference-data/locations/airports?latitude=49.0000&amp;longitude=2.55\",\n        \"next\": \"https://test.api.amadeus.com/v1/reference-data/locations/airports?latitude=49.0000&amp;longitude=2.55&amp;page%5Boffset%5D=10\",\n        \"last\": \"https://test.api.amadeus.com/v1/reference-data/locations/airports?latitude=49.0000&amp;longitude=2.55&amp;page%5Boffset%5D=18\"\n     }\n  },\n  \"data\": [\n     {\n       /* large amount of items */\n     }\n  ]\n}\n</code></pre> <p>You can access the next page of the results using the value of <code>meta/links/next</code> or <code>meta/links/last</code> node within the JSON response.</p> <p>Note that indexing elements between pages is done via the <code>page[offset]</code> query parameter. For example, <code>page[offset]=18</code>. The <code>next</code> and <code>last</code> returned in the example above encode the special characters <code>[]</code> as <code>%5B</code> and <code>%5D</code>. This is called percent encoding and is used to encode special characters in the url parameter values.</p>"},{"location":"pricing/","title":"Pricing options for Amadeus Travel APIs","text":"<p>Amadeus for Developers provides two environments: test and production. </p> <p>The <code>test</code> environment is the default environment for all new applications with access to a subset of the real data. This is where you will enjoy free request quota each month to build and test your apps.</p> <p>The <code>production</code> environment gives you access to the full real-time data. When you move to production, you maintain your monthly free request quota and pay only for the additional calls you make.</p> <p>Check out the pricing page to find out more about the pricing options.</p>"},{"location":"quick-start/","title":"Making your first API call","text":""},{"location":"quick-start/#step-1-create-an-account","title":"Step 1: Create an account","text":"<p>The first step to start using Amadeus Self-Service APIs is to register and create an account:</p> <ul> <li>Open the Amadeus Developers Portal.</li> <li>Click on Register.</li> <li>Complete the form using a valid email address and click on the <code>Create account</code> button. An automatic confirmation email will be sent to the email address you provided.</li> <li>In the confirmation email you receive, click on <code>Activate your account</code>. </li> </ul> <p>You can now log in to the portal with your new credentials! Welcome to Amadeus for Developers!</p>"},{"location":"quick-start/#step-2-get-your-api-key","title":"Step 2: Get your API key","text":"<p>To start using the APIs, you need to tell the system that you are allowed to do so. This process is called authorization.</p> <p>Danger</p> <p>Remember that the API Key and API Secret are for personal use only. Do not share them with anyone.</p> <p>All you need to do, is to attach an alphanumeric string called token to your calls. This token will identify you as a valid user.  Each token is generated from two parameters: <code>API Key</code> and <code>API Secret</code>. Once your account has been verified, you can get your API key and API Secret by following these steps:</p> <ul> <li>Sign in to the Developers Portal.</li> <li>Click on your username (located in the top right corner of the Developers portal page) </li> <li> <p>Go to My Self-Service Workspace.      </p> </li> <li> <p>Click on Create New App button.     </p> </li> <li> <p>Enter your application details and click on Create.     </p> </li> </ul> <p>Important</p> <p>Test environment  At this stage, you are using the testing environment, where you will enjoy a fixed number of free API call quotas per month for all your applications. When you reach the limit, you will receive an error message. This environment will help you build and test your app for free and get ready for deploying it to the market.</p>"},{"location":"quick-start/#step-3-calling-the-api","title":"Step 3: Calling the API","text":"<p>For our first call, let's get a list of possible destinations from Paris for a maximum amount of 200 EUR using the Flight Inspiration Search API, which returns a list of destinations from a given origin along with the cheapest price for each destination.</p>"},{"location":"quick-start/#creating-the-request","title":"Creating the Request","text":"<p>Before making your first API call, you need to get your access token. For security purposes, we implemented the <code>oauth2</code> process that will give you an access token based on your <code>API Key</code> and <code>API Secret.</code> To retrieve the token, you need to send a <code>POST</code> request to the endpoint <code>/v1/security/oauth2/token</code>with the correct <code>Content-Type</code> header and body. Replace <code>{client_id}</code> with your API Key and <code>{client_secret}</code> with your API Secret in the command below and execute it:</p> <pre><code>curl \"https://test.api.amadeus.com/v1/security/oauth2/token\" \\\n     -H \"Content-Type: application/x-www-form-urlencoded\" \\\n     -d \"grant_type=client_credentials&amp;client_id={client_id}&amp;client_secret={client_secret}\"\n</code></pre> <p>Warning</p> <p>Please take a look at our Authorization guide to understand how the process works in depth.</p> <p>According to the documentation, you need to use <code>v1/shopping/flight-destinations</code> as the endpoint, followed by the mandatory query parameter <code>origin</code>. As you want to filter the offers to those cheaper than 200 EUR, you need to add the <code>maxPrice</code> parameter to your query as well.</p> <p>Our call is therefore:</p> <pre><code>curl 'https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=PAR&amp;maxPrice=200' \\\n      -H 'Authorization: Bearer ABCDEFGH12345'\n</code></pre> <p>Note how we add the <code>Authorization</code> header to the request with the value <code>Bearer</code> string concatenated with the token previously requested.</p>"},{"location":"quick-start/#evaluating-the-response","title":"Evaluating the Response","text":"<p>The response returns a <code>JSON</code> object containing a list of destinations matching our criteria:</p> <pre><code>{\n    \"data\": [\n        {\n            \"type\": \"flight-destination\",\n            \"origin\": \"PAR\",\n            \"destination\": \"CAS\",\n            \"departureDate\": \"2022-09-06\",\n            \"returnDate\": \"2022-09-11\",\n            \"price\": {\n                \"total\": \"161.90\"\n            }\n        },\n        {\n            \"type\": \"flight-destination\",\n            \"origin\": \"PAR\",\n            \"destination\": \"AYT\",\n            \"departureDate\": \"2022-10-16\",\n            \"returnDate\": \"2022-10-31\",\n            \"price\": {\n                \"total\": \"181.50\"\n            }\n        }\n    ]\n}\n</code></pre> <p>Congratulations! You have just made your first Amadeus for Developers API call!</p>"},{"location":"quick-start/#video-tutorial","title":"Video Tutorial","text":"<p>You can check the step by step process in this video tutorial of How to make your first API call from Get Started series. </p> <p></p>"},{"location":"quick-start/#postman-collection","title":"Postman collection","text":"<p>To start testing our APIs without any additional configuration, have a look at our dedicated Postman collection.</p>"},{"location":"quick-start/#test-and-production-environment","title":"Test and Production environment","text":"<p>After successfully developing your travel app with Amadeus APIs in the Test environment, you can now move to Production. Discover the differences between the Test and Production environments in Amadeus Self-Service APIs. Find out how to seamlessly switch to Production at no cost and, depending on your quota, gain access to real-time data, improved results, and quicker response times.</p>"},{"location":"test-data/","title":"Free test data collection of Self-Service APIs","text":"<p>Amadeus for Developers offers a <code>test environment</code> with free limited data. This allows developers to build and test their applications before deploying them to production. To access real-time data, you will need to move to the production environment.</p> <p>Warning</p> <p>It is important to note that the test environment protects our customers and data and it's exclusively intended for development purposes.</p>"},{"location":"test-data/#test-vs-production","title":"Test vs Production","text":"<p>The test environment has the following differences with the production:</p> Billing Rate Limits Data Base URL Test Free monthly quota 10 TPS Limited, cached test.api.amadeus.com Production Unlimited 40 TPS Unlimited, real-time api.amadeus.com <p>Check out the rate limits guide and pricing page if you want to get more information on the specific topics. In this tutorial you can learn how to build a mock server in Postman to help you consume less of your free quota.</p> <p>Important</p> <p>Please note that in the production environment, you will only be charged for API calls that exceed the monthly free limit. Our Flight Order Management API, for instance, may offer a free limit of up to 10,000 calls. So, by registering for production, you can enjoy the benefits of free quotas while accessing our APIs for the latest and unrestricted data without any hidden costs.</p>"},{"location":"test-data/#api-usage","title":"API usage","text":"<p>To make sure you don't pass your monthly quota, you can go to My Self-Service Workspace &gt; API usage and quota and review how many transactions you've performed. In case you pass the limit, you will need to wait for the new month and your quota will be renewed.</p> <p>Information</p> <p>It may take up to 12 minutes to display your most recent API calls.</p> <p>The table below details the available test data for each Self-Service API:</p>"},{"location":"test-data/#test-data-collection","title":"Test Data Collection","text":""},{"location":"test-data/#flights","title":"Flights","text":"API Test data Flight Inspiration Search Cached data including most origin and destination cities. Flight Cheapest Date Search Cached data including most origin and destination cities. Flight Availabilities Search Cached data including most origin and destination cities/airports. Airport Routes Static dataset containing all airport routes in November 2021. Airline Routes Static dataset containing all airport routes in November 2021. Flight Offers Search Cached data including most origin and destination cities/airports. Flight Offers Price Cached data including most origin and destination cities/airports. Branded Fares Upsell Cached data including most airlines. SeatMap Display Works with the response of Flight Offers Search. Flight Create Orders Works with the response of Flight Offers Price. Flight Order Management Works with the response of Flight Create Orders. Flight Price Analysis Contains the following routes in both test and production environments. Flight Delay Prediction No data restrictions in test. Airport On-time Performance No data restrictions in test. Flight Choice Prediction No data restrictions in test. On Demand Flight Status Contains a copy of live data at a given time and real-time updates are not supported. Check out the differences between test and production environment. Airline Code Lookup No data restrictions in test. Airport &amp; City Search Cities/airports in the United States, Spain, the United Kingdom, Germany and India. Airport Nearest Relevant Cities/airports in the United States, Spain, the United Kingdom, Germany and India. Flight Check-in Links See list of valid airlines. Travel Recommendations No data restrictions in test."},{"location":"test-data/#hotels","title":"Hotels","text":"API Test data Hotel List See list of\u00a0valid hotel chains. Hotel Search See list of\u00a0valid hotel chains. Test with major cities like\u00a0<code>LON</code>\u00a0or\u00a0<code>NYC</code>. Hotel Booking Works with the response of\u00a0<code>Hotel Search</code>. Hotel Ratings See list of\u00a0valid hotels. Hotel Name Autocomplete Cached data including most hotels available through Amadeus"},{"location":"test-data/#destination-experiences","title":"Destination experiences","text":"API Test data Points of Interest See list of valid cities. Tours and Activities See list of valid cities. City Search No data restrictions in test."},{"location":"test-data/#itinerary-management","title":"Itinerary management","text":"API Test data Trip Purpose Prediction No data restrictions in test."},{"location":"test-data/#market-insights","title":"Market insights","text":"API Test data Flight Most Traveled Destinations See list of origin and destination cities/airports. Flight Most Booked Destinations See list of origin and destination cities/airports. Flight Busiest Traveling Period See list of origin and destination cities/airports. Location Score See list of valid cities."},{"location":"test-data/#video-tutorial","title":"Video Tutorial","text":"<p>Check out this video to know more about the differences between Test and Production from Get Started with Amadeus Self-Service APIs Series. </p> <p></p>"},{"location":"API-Keys/","title":"API keys","text":"<p>To start working with our Self-Service APIs, you need to register your application with us to obtain API keys. In this section we describe how to authorize your application and move it to production.</p>"},{"location":"API-Keys/authorization/","title":"Authorizing your application","text":"<p>Amadeus for Developers uses <code>OAuth</code> to authenticate access requests. <code>OAuth</code> generates an <code>access token</code> which grants the client permission to access a protected resource. </p> <p>The method to acquire a token is called grant. There are different types of <code>OAuth grants</code>. Amadeus for Developers uses the <code>Client Credentials Grant</code>.</p>"},{"location":"API-Keys/authorization/#requesting-an-access-token","title":"Requesting an access token","text":"<p>Once you have created an app and received your <code>API Key</code> and  <code>API Secret</code>, you can generate an access token by sending a <code>POST</code> request to the authorization server:</p> <p>https://test.api.amadeus.com/v1/security/oauth2/token</p> <p>Information</p> <p>Remember that your <code>API Key</code> and  <code>API Secret</code> should be kept private. Read more about best practices for secure API key storage.</p> <p>The body of the request is encoded as <code>x-www-form-urlencoded</code>, where the keys and values are encoded in key-value tuples separated by '&amp;', with a '=' between the key and the value:</p> Key Value <code>grant_type</code> The value <code>client_credentials</code> <code>client_id</code> The <code>API Key</code> for the application <code>client_secret</code> The <code>API Secret</code> for the application <p>Specify the type of the request using the <code>content-type</code> HTTP header with the value <code>application/x-www-form-urlencoded</code>.</p> <p>The following example uses <code>cURL</code> to request a new token:</p> <p><pre><code>curl \"https://test.api.amadeus.com/v1/security/oauth2/token\" \\\n     -H \"Content-Type: application/x-www-form-urlencoded\" \\\n     -d \"grant_type=client_credentials&amp;client_id={client_id}&amp;client_secret={client_secret}\"\n</code></pre> Note that the <code>-X POST</code> parameter is not needed in the <code>cURL</code> command. As we are sending a body, <code>cURL</code> sends the request as <code>POST</code> automatically.</p>"},{"location":"API-Keys/authorization/#response","title":"Response","text":"<p>The authorization server will respond with a JSON object:</p> <p><pre><code>{\n    \"type\": \"amadeusOAuth2Token\",\n    \"username\": \"foo@bar.com\",\n    \"application_name\": \"BetaTest_foobar\",\n    \"client_id\": \"3sY9VNvXIjyJYd5mmOtOzJLuL1BzJBBp\",\n    \"token_type\": \"Bearer\",\n    \"access_token\": \"CpjU0sEenniHCgPDrndzOSWFk5mN\",\n    \"expires_in\": 1799,\n    \"state\": \"approved\",\n    \"scope\": \"\"\n}\n</code></pre> The response will contain the following parameters:</p> Parameter Description <code>type</code> The type of resource. The value will be <code>amadeusOAuth2Token</code>. <code>username</code> Your username (email address). <code>application_name</code> The name of your application. <code>client_id</code> The <code>API Key</code> for your application <code>token_type</code> The type of token issued by the authentication server. The value will be <code>Bearer</code>. <code>access_token</code> The token to authenticate your requests. <code>expires_in</code> The number of seconds until the token expires. <code>state</code> The status of your request. Values can be <code>approved</code> or <code>expired</code>."},{"location":"API-Keys/authorization/#using-the-token","title":"Using the token","text":"<p>Once the token has been retrieved, you can authenticate your requests to Amadeus Self-Service APIs.</p> <p>Each API call must contain the <code>authorization</code> HTTP header with the value <code>Bearer {access_token}</code>, where <code>acess_token</code> is the token you have just retrieved.</p> <p>The following example is a call to the <code>Flight Check-in Links</code> API to retrieve the check-in URL for Iberia (<code>IB</code>):</p> <pre><code>curl \"https://test.api.amadeus.com/v2/reference-data/urls/checkin-links?airline=IB\" \\\n     -H \"Authorization: Bearer CpjU0sEenniHCgPDrndzOSWFk5mN\"\n</code></pre>"},{"location":"API-Keys/authorization/#managing-tokens-from-your-source-code","title":"Managing tokens from your source code","text":"<p>To retrieve a token using your favourite programming language, send a <code>POST</code> request and parse the <code>JSON</code> response as in the <code>cURL</code> examples above.  </p> <p>There are different strategies to maintain your token updated, like checking the time remaining until expiration before each API call or capturing the <code>unauthorized</code> error when the token expires. In both cases, you must request a new token.</p> <p>To simplify managing the authentication process, you can use the Amadeus for Developers SDKs available on GitHub. The <code>SDKs</code> automatically fetch and store the <code>access_token</code> and set the headers in all API calls.</p> <p>Example of initializing the client and authenticating with the <code>Node</code> SDK:</p> <pre><code>var Amadeus = require('amadeus');\n\nvar amadeus = new Amadeus({\n  clientId: '[API Key]',\n  clientSecret: '[API Secret]'\n});\n</code></pre> <p>You can then call the API. The following example is a call to the <code>Flight Check-in Links</code> API to retrieve the check-in URL for Iberia (<code>IB</code>):</p> <pre><code>var Amadeus = require('amadeus');\n\nvar amadeus = new Amadeus({\n  clientId: '[API Key]',\n  clientSecret: '[API Secret]'\n});\n\namadeus.referenceData.urls.checkinLinks.get({\n  airlineCode : 'IB'\n}).then(function(response){\n  console.log(response.data);\n}).catch(function(responseError){\n  console.log(responseError.code);\n});\n</code></pre>"},{"location":"API-Keys/moving-to-production/","title":"Moving your application to production","text":"<p>When your application is ready to be deployed to the Real World\u2122, you can request your Production Key and access the <code>Production Environment</code>.</p>"},{"location":"API-Keys/moving-to-production/#requesting-a-production-key","title":"Requesting a production key","text":"<p>To request a production key, you must complete the following steps:</p> <ol> <li>Sign in to your account and enter My Self-Service Workspace.</li> <li>Select the application to move to <code>Production</code> and click <code>Get Production environment</code> :</li> </ol> <p></p> <ol> <li>Complete the form with your personal information, billing address, and app information.</li> <li>Indicate whether your application uses <code>Flight Create Orders</code> in the checkbox at the bottom of the form. This API has special access requirements detailed below in the <code>Moving to Production with Flight Create Orders</code> section of this guide.</li> <li>Select your preferred method of payment (credit card or bank transfer) and provide the required billing information.</li> <li>Sign the Terms of Service agreement provided on <code>Docusign</code>. </li> </ol> <p>Once these steps are completed, your application status will be pending:</p> <p></p> <p>You will receive a notification that your application is validated and the status will change to live. This usually occurs within 72 hours. Note that the validation period applies to your first production application. Subsequent applications will be validated automatically.</p> <p></p> <p>Production keys are valid for all Self-Service APIs except <code>Flight Create Orders API</code>, which has special requirements. See the <code>Moving to Production with Flight Create Orders</code> of this guide for more information.</p> <p>Remember that once you exceed your free transactions threshold, you will be billed automatically for your transactions every month. You can manage and track your app usage in My Self-Service Workspace.</p>"},{"location":"API-Keys/moving-to-production/#using-the-production-key","title":"Using the production key","text":"<p>Once you have a production key, you can make the following changes to your source code:</p> <ul> <li>Update the base URL for your API calls to point to <code>https://api.amadeus.com</code>.</li> <li>Update your <code>API key</code> and <code>API secret</code> with the new production keys.</li> </ul> <p>If you are using Amadeus for Developers SDKs, add <code>hostname='production'</code> to the <code>Client</code> together with your API key and API secret as shown below example in python SDK:</p> <pre><code>from amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='REPLACE_BY_YOUR_API_KEY',\n    client_secret='REPLACE_BY_YOUR_API_SECRET',\n    hostname='production'\n)\n\ntry:\n    response = amadeus.shopping.flight_offers_search.get(\n        originLocationCode='MAD',\n        destinationLocationCode='ATH',\n        departureDate='2022-11-01',\n        adults=1)\n    print(response.data)\nexcept ResponseError as error:\n    print(error)\n</code></pre>"},{"location":"API-Keys/moving-to-production/#video-tutorial","title":"Video Tutorial","text":"<p>You can check the step by step process in this video tutorial of How to move to production from Get Started series. </p> <p></p>"},{"location":"API-Keys/moving-to-production/#moving-to-production-with-the-flight-create-orders-api","title":"Moving to production with the Flight Create Orders API","text":"<p>Applications using <code>Flight Create Orders</code> must meet special requirements before moving to <code>Production</code>. The requirements are detailed in the following section.</p>"},{"location":"API-Keys/moving-to-production/#requirements","title":"Requirements","text":"<ol> <li> <p>You have a ticket issuance agreement with a consolidator. Only certified    travel agents can issue flight tickets. Non-certified businesses must issue    tickets via an airline consolidator (an entity that acts as a host agency    for non-certified agents). The Amadeus for Developers team can assist you in finding a consolidator in your region. </p> </li> <li> <p>There are no restrictions in your country. Though we are working to make Self-Service flight booking available worldwide, <code>Flight Create Orders</code> API is currently not available to companies in the following countries: </p> </li> </ol> <p>Algeria, Bangladesh, Bhutan, Bulgaria, Croatia, Egypt, Finland, Iceland, Iran, Iraq, Jordan, Kuwait, Kosovo, Lebanon, Libya, Madagascar, Maldives, Montenegro, Morocco, Nepal, Pakistan, Palestine, Qatar, Saudi Arabia, Serbia, Sri Lanka, Sudan, Syria, Tahiti, Tunisia, United Arab Emirates and Yemen </p> <ol> <li>You comply with local regulations . Flight booking is subject to local    regulations and many areas (notably, California and France) have special    requirements.</li> </ol> <p>Contact us for questions about the above requirements or assistance with local regulations and airline consolidators in your region.</p> <p>If you meet the above requirements, you are ready to move your application  to production. </p>"},{"location":"API-Keys/moving-to-production/#adding-flight-create-orders-to-a-production-app","title":"Adding <code>Flight Create Orders</code> to a production app","text":"<p>To add <code>Flight Create Orders</code> to an application currently in production, select the app in the My Apps section of your Self-Service Workspace and click API requests:</p> <p></p> <p>Then request production access to <code>Flight Create Orders</code> by clicking the Request button located under Actions:</p> <p> </p>"},{"location":"developer-tools/","title":"Amadeus SDKs Tutorials","text":"<p>We have a number of SDKs available to help you integrate Amadeus Self-Service APIs into your applications. To give more context to how each of the SDKs can be used, we also have a dedicated tutorial per programming language.</p> Source code Tutorials Get started examples Support by Node SDK Node SDK tutorial Node SDK example <code>Amadeus</code> Python SDK Python SDK tutorial Python SDK example <code>Amadeus</code> Java SDK Java SDK tutorial Java SDK example <code>Amadeus</code> PHP SDK PHP SDK tutorial N/A <code>community</code> <p>If you need an SDK in a different language, feel free to use the OpenAPI Generator to automatically create an SDK from our OpenAPI Specification files. We also have a tutorial on how to do this.</p>"},{"location":"developer-tools/java/","title":"Java","text":""},{"location":"developer-tools/java/#java-sdk","title":"Java SDK","text":"<p>Amadeus Java SDK for the Self-Service APIs is available as a <code>Maven</code> dependency, which the Amadeus for Developers team is continuously updating as the new APIs and features get released.</p> <p>You can refer to the Amadeus Java SDK or Amadeus Maven dependency for the detailed changelog.</p>"},{"location":"developer-tools/java/#installation","title":"Installation","text":"<p>The SDK can be easily installed using your preferred build automation tool, such as <code>Maven</code> or <code>Gradle</code>:</p>"},{"location":"developer-tools/java/#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.amadeus&lt;/groupId&gt;\n  &lt;artifactId&gt;amadeus-java&lt;/artifactId&gt;\n  &lt;version&gt;7.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"developer-tools/java/#gradle","title":"Gradle","text":"<pre><code>compile \"com.amadeus:amadeus-java:7.0.0\"\n</code></pre> <p>Further information:</p> <p>You can check the library in the Maven repository for futher information.</p>"},{"location":"developer-tools/java/#step-by-step-example","title":"Step-by-step example","text":"<p>This tutorial will guide you through the process of creating a simple Java application which calls the Flight Inspiration Search API using the Amadeus for Developers Java SDK.</p>"},{"location":"developer-tools/java/#using-the-amadeus-java-sdk","title":"Using the Amadeus Java SDK","text":"<p>For this tutorial we will use Unix-based commands. Windows has similar commands for each task.</p> <p>The requirements to follow this tutorial include:</p> <ul> <li>Your favorite editor</li> <li>Java installed</li> <li>A build automation tool, such as <code>Maven</code></li> <li>Amadeus for Developers API key</li> </ul> <p>Let's do something cool by calling one of our Flight Search APIs from your Java code.</p> <p>To help you get started, we have created a small Maven skeleton that is ready to use. </p> <p>Let's create a class <code>FlightSearch.java</code> in the package <code>edu.amadeus.sdk</code> with the following content:</p> <pre><code>package edu.amadeus.sdk;\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\n\nimport com.amadeus.exceptions.ResponseException;\n\nimport com.amadeus.shopping.FlightDestinations;\nimport com.amadeus.resources.FlightDestination;\n\npublic class FlightSearch {\n    public static void main(String[] args) throws ResponseException {\n        Amadeus amadeus = Amadeus.builder(System.getenv()).build();\n\n        Params params = Params.with(\"origin\", \"MAD\");\n\n        FlightDestination[] flightDestinations = amadeus.shopping.flightDestinations.get(params);\n\n        if (flightDestinations[0].getResponse().getStatusCode() != 200) {\n            System.out.println(\"Wrong status code for Flight Inspiration Search: \" + flightDestinations[0].getResponse().getStatusCode());\n            System.exit(-1);\n        }\n\n        System.out.println(flightDestinations[0]);\n    }\n}\n</code></pre> <p>Before testing the example, export your credentials in your terminal:</p> <pre><code>export AMADEUS_CLIENT_ID=YOUR_CLIENT_ID\nexport AMADEUS_CLIENT_SECRET=YOUR_CLIENT_SECRET\n</code></pre> <p>Let's build and run the code to make sure that everything is working properly:</p> <pre><code>./mvnw compile exec:java -Dexec.mainClass=\"edu.amadeus.sdk.FlightSearch\"\n\n[INFO] Scanning for projects...\n[INFO] \n[INFO] ------------&lt; edu.amadeus.sdk:amadeus-java-getting-started &gt;------------\n[INFO] Building amadeus-java-getting-started 0.1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ amadeus-java-getting-started ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Copying 1 resource\n[INFO] \n[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ amadeus-java-getting-started ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 2 source files to /amadeus-java-getting-started/target/classes\n[INFO] \n[INFO] --- exec-maven-plugin:3.0.0:java (default-cli) @ amadeus-java-getting-started ---\nFlightDestination(type=flight-destination, origin=MAD, destination=OPO, departureDate=Mon Oct 03 00:00:00 CEST 2022, returnDate=Tue Oct 18 00:00:00 CEST 2022, price=FlightDestination.Price(total=41.81))\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.407 s\n[INFO] Finished at: 2022-09-19T12:36:39+02:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>As you see in the example, the main method  instantiates an Amadeus object, taking the credentials from the following environment:</p> <pre><code>Amadeus amadeus = Amadeus.builder(System.getenv()).build();\n</code></pre> <p>In order to use the method <code>amadeus.shopping.flightDestinations.get()</code>, you need to pass a <code>Params</code> object as in the below example:</p> <pre><code>Params params = Params.with(\"origin\", \"MAD\");\nFlightDestination[] flightDestinations = amadeus.shopping.flightDestinations.get(params);\n</code></pre> <p>The method <code>amadeus.shopping.flightDestinations.get()</code> will return an Array with the results:</p> <pre><code>System.out.println(flightDestinations[0]);\n</code></pre> <p>Now that you've tried out this example and know how to use the objects, you can review the Javadocs in this SDK and discover new ways to use it.</p>"},{"location":"developer-tools/java/#video-tutorial","title":"Video Tutorial","text":"<p>You can also check the video tutorial on how to get started with the Java SDK.</p> <p></p>"},{"location":"developer-tools/java/#managing-api-rate-limits","title":"Managing API rate limits","text":"<p>Amadeus Self-Service APIs have rate limits in place to protect against abuse by third parties. You can find Rate limit example in Java using the Amadeus Java SDK here. </p>"},{"location":"developer-tools/mock-server/","title":"Mock Server","text":""},{"location":"developer-tools/mock-server/#build-a-mock-server-with-postman","title":"Build a Mock Server with Postman","text":"<p>Mock servers can be used as a tool for testing APIs. They simulate the behavior of a real server allowing developers to test their applications without calling the real service. </p> <p>Let's say that you want to build the frontend of your travel application without consuming your free quota to call the Amadeus for Developers APIs. In this tutorial show you how to build a mock server.</p>"},{"location":"developer-tools/mock-server/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Postman account and it's app or web version</li> <li>The Amadeus for Developers Postman collection forked into your workspace </li> </ul> <p>Let's now check step-by-step to create a mock server.</p>"},{"location":"developer-tools/mock-server/#1-save-a-request-and-response-example","title":"1. Save a request and response example","text":"<p>For the sake of the tutorial we will show you how to create a mock server for the Travel Recommendations API. We will make one request to the Amadeus API and then we will mock the request and response. To learn how to make an API call with Postman, please check this step-by-step guide.</p> <p>Open your Postman application and generate your Amadeus <code>access token</code> as described in the guide above. Then go to Amadeus for Developers &gt; Trip &gt; Artificial Intelligenge &gt; GET Travel Recommendations  and make an API call.</p> <p>Click on Save Response &gt; Save as example, and in the same directory you will see the example that you just saved within your collection.</p> <p></p>"},{"location":"developer-tools/mock-server/#2-add-the-api-and-example-in-a-new-collection","title":"2. Add the API and example in a new collection","text":"<p>In Postman, you always need to create a mock server for a whole collection. That's why in this case you will create a new collection to contain only the API we are going to mock. </p> <p>Let's create a new Postman collection. On the top left of your screen click New &gt; Collection and you will see the new collection with the name <code>New Collection</code>. Feel free to give another name, in our case is called  <code>Mock - Travel Recommendations</code>.</p> <p>Now you are able to add the Travel Recommendations API to the collection. To do so, duplicate the <code>GET Travel Recommendations</code> API, which can be found at the collection Amadeus for Developers &gt; Trip &gt; Artificial Intelligenge &gt; GET Travel Recommendations and drag &amp; drop it your new collection. Your workspace will now look like: </p> <p></p>"},{"location":"developer-tools/mock-server/#3-build-the-mock-server","title":"3. Build the mock server","text":"<p>In order to create a mock server go to New &gt; Mock Server &gt; Select an existing collection and choose the collection you just created. </p> <p>In the next step you can see several options to configure your server. Give a name and click the Create a Mock Server button.</p> <p></p> <p>The mock server generates a URL in which your requests will be sent to. Make sure to copy the URL because you will need it for the next step.</p> <p></p> <p>For this tutorial you built a public mock server, which means that anyone with access to the URL will be able to perform requests. If you want to keep it private, you will have to get a Postman API key and pass it to the request headers.</p>"},{"location":"developer-tools/mock-server/#4-send-a-request-to-the-mock-server","title":"4. Send a request to the mock server","text":"<p>On the top left click on New &gt; HTTP Request and create a <code>GET</code> request. For the base URL use the mock server's one, and contatenate the same path and parameters from the saved example. The full request now looks like:</p> <p><code>GET https://3492878a-5eb2-4837-b97b-b5e2669a18e9.mock.pstmn.io/v1/reference-data/recommended-locations?cityCodes=PAR&amp;travelerCountryCode=FR</code></p> <p>Perform the API request and you will get as response, the one that we saved earlier.</p> <p></p> <p>You can also paste the full URL in your browser and get the results, since it's a public mock server.</p> <p></p> <p>Congratulations! You've created a mock server in Postman. You can now use this server in your code to mock several requests, successful responses and error messages according to your development needs.</p>"},{"location":"developer-tools/node/","title":"Node","text":""},{"location":"developer-tools/node/#node-sdk","title":"Node SDK","text":"<p>Amadeus Node SDK for Self-service APIs is available with <code>npm</code>(node package manager) and Amadeus for Developers team is continuously updating with new APIs and features. </p> <p>You can refer to the amadeus-node or Amadeus npm package for more details on the changelog.</p>"},{"location":"developer-tools/node/#installation","title":"Installation","text":"<p>This module has been tested using Node LTS versions. You can install it using Yarn or NPM.</p> <pre><code>npm install amadeus --save\n</code></pre>"},{"location":"developer-tools/node/#getting-started","title":"Getting Started","text":"<p>To make your first API call, you will need to register for an Amadeus Developers Account and set up your first application.</p> <pre><code>var Amadeus = require('amadeus');\nvar amadeus = new Amadeus({\n  clientId: 'REPLACE_BY_YOUR_API_KEY',\n  clientSecret: 'REPLACE_BY_YOUR_API_SECRET'\n});\n\namadeus.shopping.flightOffersSearch.get({\n    originLocationCode: 'SYD',\n    destinationLocationCode: 'BKK',\n    departureDate: '2022-10-21',\n    adults: '2'\n}).then(function(response){\n  console.log(response.data);\n}).catch(function(responseError){\n  console.log(responseError.code);\n});\n</code></pre>"},{"location":"developer-tools/node/#initialization","title":"Initialization","text":"<p>The client can be initialized directly as below. Your credentials <code>client Id</code> and <code>Client Secret</code> can be found on the Amadeus dashboard.</p> <pre><code>// Initialize using parameters\nvar amadeus = new Amadeus({\n  clientId: 'REPLACE_BY_YOUR_API_KEY',\n  clientSecret: 'REPLACE_BY_YOUR_API_SECRET'\n});\n</code></pre> <p>Warning</p> <p>Remember that hardcoding your credentials is not the best practice due to the potential exposure to others. Read more about best practices for secure API key storage.</p> <p>Alternatively, you can initialize by setting up environment variables. In Node, we like to use dotenv package. </p> <pre><code>npm install dotenv\n</code></pre> <p>Put your API credentials in <code>.env</code> file:</p> <pre><code>AMADEUS_CLIENT_ID=REPLACE_BY_YOUR_API_KEY,\nAMADEUS_CLIENT_SECRET=REPLACE_BY_YOUR_API_SECRET\n</code></pre> <p>Initialize using dotenv package:</p> <pre><code>const dotenv = require('dotenv').config();\nvar amadeus = new Amadeus();\n</code></pre> <p>Important</p> <p>You will also want to add <code>.env</code> to your <code>.gitingore</code> so that your API credentials aren't included in your git repository.</p> <p>If you don't want to use another package, you can also simply export your key in terminal directly to initalize.</p> <p>Export your credentials in terminal:</p> <p><pre><code>export AMADEUS_CLIENT_ID=\"REPLACE_BY_YOUR_API_KEY\"\nexport AMADEUS_CLIENT_SECRET=\"REPLACE_BY_YOUR_API_SECRET\"\n</code></pre> Initialize:</p> <pre><code>var amadeus = new Amadeus();\n</code></pre>"},{"location":"developer-tools/node/#moving-to-production","title":"Moving to Production","text":"<p>By default, the SDK environment is set to <code>test</code> environment. To switch to <code>production</code> (pay-as-you-go) environment, please change the hostname as follows:</p> <pre><code>var amadeus = new Amadeus({\n  hostname: 'production'\n});\n</code></pre>"},{"location":"developer-tools/node/#promises","title":"Promises","text":"<p>Every API call returns a <code>Promise</code> that either resolves or rejects. </p> <p>Every resolved API call returns a <code>Response</code> object containing a <code>body</code> attribute with the raw response. If the API call contained a JSON response, it will parse the JSON into the <code>result</code> attribute. If this data contains a <code>data</code> key, that will be made available in <code>data</code> attribute.</p> <p>For a failed API call, it returns a <code>ResponseError</code>object containing the (parsed or unparsed) response, the request, and an error code.</p> <pre><code>amadeus.referenceData.urls.checkinLinks.get({\n  airlineCode: 'BA'\n}).then(function(response){\n  console.log(response.body);   //=&gt; The raw body\n  console.log(response.result); //=&gt; The fully parsed result\n  console.log(response.data);   //=&gt; The data attribute taken from the result\n}).catch(function(error){\n  console.log(error.response); //=&gt; The response object with (un)parsed data\n  console.log(error.response.request); //=&gt; The details of the request made\n  console.log(error.code); //=&gt; A unique error code to identify the type of error\n});\n</code></pre>"},{"location":"developer-tools/node/#pagination","title":"Pagination","text":"<p>If an API endpoint supports pagination, the other pages are available under the <code>.next</code>, <code>.previous</code>, <code>.last</code> and <code>.first</code> methods.</p> <pre><code>amadeus.referenceData.locations.get({\n  keyword: 'LON',\n  subType: 'AIRPORT,CITY'\n}).then(function(response){\n  console.log(response.data); // first page\n  return amadeus.next(response);\n}).then(function(nextResponse){\n  console.log(nextResponse.data); // second page\n});\n</code></pre> <p>If a page is not available, the response will resolve to <code>null</code>.</p>"},{"location":"developer-tools/node/#video-tutorial","title":"Video Tutorial","text":"<p>You can also check the video tutorial on how to get started with the Node SDK.</p> <p></p>"},{"location":"developer-tools/node/#managing-api-rate-limits","title":"Managing API rate limits","text":"<p>Amadeus Self-Service APIs have rate limits in place to protect against abuse by third parties. You can find Rate limit example in Node using the Amadeus Node SDK here. </p>"},{"location":"developer-tools/openapi-generator/","title":"Generating SDKs from Amadeus OpenAPI specification using the OpenAPI Generator","text":"<p>The OpenAPI Generator is an open-source project for generating REST API clients, server stubs, documentation and schemas based on the OpenAPI specification.</p> <p>At Amadeus, we are following the contract-first approach to API development, which is at the core of the OpenAPI Generator's design philosophy. In this way, we only need to create or update an OpenAPI specification for a particluar API, and the OpenAPI Generator will automatically generate the SDKs in various programming languages and create the required API documentation.</p>"},{"location":"developer-tools/openapi-generator/#amadeus-openapi-specification","title":"Amadeus OpenAPI specification","text":"<p>We have a dedicated GitHub repository where you can find OpenAPI specification files for all our Self-Serving APIs. The OpenAPI Generator can easily consume these files to output a dedicated SDK for any of the languages that it supports.</p>"},{"location":"developer-tools/openapi-generator/#how-to-create-an-sdk-from-amadeus-openapi-specification","title":"How to create an SDK from Amadeus OpenAPI specification","text":"<p>If you are not familiar with the OpenAPI Generator, the following tutorial may help you get started. We will take Ruby as an example and show you the steps to create a turnkey SDK based on the specification for your required Amadeus API. We will use the City Search API in our example.</p>"},{"location":"developer-tools/openapi-generator/#step-1-setting-up-the-openapi-generator","title":"Step 1. Setting up the OpenAPI Generator","text":"<p>Information</p> <p>The current stable release version of the OpenAPI Generator at the time of writing this document is 6.0.1.</p> <p>There are many ways to set up the OpenAPI Generator. To eliminate the need for any system dependencies, we will run the OpenAPI Generator as a Docker container. As a prerequisite to this, we need to install the Docker Desktop on our host and start running it.</p>"},{"location":"developer-tools/openapi-generator/#step-2-downloading-the-openapi-specification-for-the-city-search-api","title":"Step 2. Downloading the OpenAPI specification for the City Search API","text":"<p>Navigate to the Amadeus OpenAPI Specification and download the JSON file for the City Search API specification. </p> <p>Information</p> <p>You can use both JSON and YAML files with the OpenAPI Generator. </p>"},{"location":"developer-tools/openapi-generator/#step-3-creating-the-ruby-sdk-for-the-city-search-api","title":"Step 3. Creating the Ruby SDK for the City Search API","text":"<p>Information</p> <p>The <code>docker run</code> command uses the <code>openapi-generator-cli</code> image: https://hub.docker.com/r/openapitools/openapi-generator-cli/.</p> <p>Navigate to the directory where you downloaded the City Search API specification and run the following command:</p> <pre><code>docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/CitySearch_v1_swagger_specification.json \\\n  -g ruby \\\n  -o /local/city_search_ruby\n</code></pre> <p>This command uses the <code>CitySearch_v1_swagger_specification.json</code> as input (<code>-i</code>) located in the current directory (<code>/local/</code>). It generates (<code>-g</code>) a Ruby SDK (indicated by <code>ruby</code>) and outputs (<code>-o</code>) the files to folder <code>city_search_ruby</code>, which is located in the current directory (<code>/local/</code>).</p>"},{"location":"developer-tools/openapi-generator/#step-4-enabling-usage-of-the-ruby-sdk-for-the-city-search-api","title":"Step 4. Enabling usage of the Ruby SDK for the City Search API","text":"<p>Information</p> <p>Before using the API you will need to get an access token. Please read our Authorization Guide for more information on how to get your token.</p> <p>Navigate to the newly created <code>city_search_ruby</code> folder and open the <code>README.md</code>. This file shows the initial instructions on configuring our Ruby SDK for the City Search API.</p> <p>Follow the instructions in the <code>README.md</code> to build the code into a gem and install it locally by running the following command from the <code>city_search_ruby</code> directory:</p> <pre><code>gem build ./openapi_client.gemspec\ngem install ./openapi_client-1.0.0.gem\n</code></pre> <p>Information</p> <p>You may need to run this command with administrator privileges (<code>sudo</code>).</p> <p>Now we have a full-featured Ruby SDK that is ready for production usage.</p>"},{"location":"developer-tools/openapi-generator/#step-5-customising-the-ruby-sdk-for-the-city-search-api","title":"Step 5. Customising the Ruby SDK for the City Search API","text":"<p>There are several ways to customise an SDK created by the OpenAPI Generator:</p> <ul> <li>Using a configuration file</li> <li>Using command line arguments</li> <li>Using mustache templates</li> </ul>"},{"location":"developer-tools/openapi-generator/#configuration-file","title":"Configuration file","text":"<p>There is a number of configuration options that the OpenAPI Generator supports for Ruby.</p> <p>To apply them, we need to create a JSON file with the required parameters and define it when running the OpenAPI Generator. Let's create a file called <code>config.json</code> with the following contents:</p> <pre><code>{\n\"gemName\": \"Amadeus_City_Search\",\n\"gemSummary\": \"A ruby wrapper for the Amadeus City Search API\", \n\"moduleName\": \"CitySearch\",\n\"gemLicense\": \"MIT\",\n\"gemVersion\": \"0.3.1\",\n\"gemRequiredRubyVersion\": \"2.1\"\n}\n</code></pre> <p>To generate an SDK with these custom parameters, put the <code>config.json</code> file into the same directory as the source OpenAPI specification file and run:</p> <pre><code>docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/CitySearch_v1_swagger_specification.json \\\n  -g ruby \\\n  -o /local/city_search_ruby \\\n  -c config.json \\\n</code></pre>"},{"location":"developer-tools/openapi-generator/#command-line-arguments","title":"Command line arguments","text":"<p>Instead of using a configuration file, we can specify the custom parameters as additional properties, separated by a comma:</p> <pre><code>docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/CitySearch_v1_swagger_specification.json \\\n  -g ruby \\\n  -o /local/city_search_ruby \\\n- -additional-properties gemVersion=0.3.1,gemName=Amadeus_City_Search\n</code></pre> <p>You can otherwise specify the parameters directly, for example:</p> <pre><code>--git-user-id openapi-generator-user --git-repo-id AmadeusCitySearch\n</code></pre> <p>This command will upload the SDK to a repository <code>AmadeusCitySearch</code> by the user called <code>openapi-generator-user</code>.</p>"},{"location":"developer-tools/openapi-generator/#mustache-template","title":"Mustache template","text":"<p>To customise the SDK beyond the custom parameters, we can use mustache templates. The GitHub repository of the OpenAPI Generator contains default mustache templates at <code>tree/master/modules/openapi-generator/src/main/resources/</code>. For our Ruby Client SDK, we will need the api_client_spec template.</p> <p>Download the template and customise it as required. After that, attach the template to the OpenAPI <code>run</code> command as follows:</p> <pre><code>docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/CitySearch_v1_swagger_specification.json \\\n  -g ruby \\\n  -o /local/city_search_ruby\n  -t &lt;path-to-template-directory&gt;\n</code></pre> <p>Replace <code>&lt;path-to-template-directory&gt;</code> with the path to the template directory.</p>"},{"location":"developer-tools/openapi-generator/#step-6-integrating-the-ruby-sdk-for-the-city-search-api-with-other-libraries","title":"Step 6. Integrating the Ruby SDK for the City Search API with other libraries","text":"<p>Suppose we want to integrate our City Search Ruby SDK into an existing application that already contains many models defined in third-party libraries. One of these models may contain a model whose name is the same as in our City Search Ruby SDK. A solution to this is to add a prefix to all models generated by OpenAPI Generator using the <code>--model-name-prefix</code> setting. For example:</p> <pre><code>docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/CitySearch_v1_swagger_specification.json \\\n  -g ruby --model-name-prefix Amadeus \\\n  -o /local/city_search_ruby\n</code></pre> <p>In this way, all models in our SDK will be prefixed with <code>Amadeus</code>, e.g. <code>AmadeusComponent</code>.</p>"},{"location":"developer-tools/openapi-generator/#conclusion","title":"Conclusion","text":"<p>In this tutorial we have seen how easy it is to generate a basic SDK from our API specification files using the OpenAPI Generator. We took Ruby as an example, but the OpenAPI Generator supports many other languages, so you can easily find a solution that meets your requirements.</p>"},{"location":"developer-tools/php/","title":"PHP","text":""},{"location":"developer-tools/php/#php-sdk","title":"PHP SDK","text":"<p>Warning</p> <p>The Amadeus PHP SDK is maintained independently by the developer community and is not supported or maintained by the Amadeus for Developers team.</p>"},{"location":"developer-tools/php/#prerequisites","title":"Prerequisites","text":"<ul> <li>Amadeus for Developers API key and API secret: to get one,\u00a0create a free developer account\u00a0and set up your first application in your\u00a0Workspace.</li> <li>PHP version &gt;= 7.4</li> </ul>"},{"location":"developer-tools/php/#installation","title":"Installation","text":"<p>The PHP SDK has been uploaded to the official PHP package repository.</p> <pre><code>composer require amadeus4dev/amadeus-php\n</code></pre>"},{"location":"developer-tools/php/#making-your-first-api-call","title":"Making your first API call","text":""},{"location":"developer-tools/php/#request","title":"Request","text":"<pre><code>&lt;?php declare(strict_types=1);\n\nuse Amadeus\\Amadeus;\nuse Amadeus\\Exceptions\\ResponseException;\n\nrequire __DIR__ . '/vendor/autoload.php'; // include composer autoloader\n\ntry {\n    $amadeus = Amadeus::builder(\"REPLACE_BY_YOUR_API_KEY\", \"REPLACE_BY_YOUR_API_SECRET\")\n        -&gt;build();\n\n    // Flight Offers Search GET\n    $flightOffers = $amadeus-&gt;getShopping()-&gt;getFlightOffers()-&gt;get(\n                        array(\n                            \"originLocationCode\" =&gt; \"PAR\",\n                            \"destinationLocationCode\" =&gt; \"MAD\",\n                            \"departureDate\" =&gt; \"2023-08-29\",\n                            \"adults\" =&gt; 1\n                        )\n                    );\n    print $flightOffers[0];\n\n    // Flight Offers Search POST\n    $body ='{\n              \"originDestinations\": [\n                {\n                  \"id\": \"1\",\n                  \"originLocationCode\": \"PAR\",\n                  \"destinationLocationCode\": \"MAD\",\n                  \"departureDateTimeRange\": {\n                    \"date\": \"2023-08-29\"\n                  }\n                }\n              ],\n              \"travelers\": [\n                {\n                  \"id\": \"1\",\n                  \"travelerType\": \"ADULT\"\n                }\n              ],\n              \"sources\": [\n                \"GDS\"\n              ]\n            }';\n    $flightOffers = $amadeus-&gt;getShopping()-&gt;getFlightOffers()-&gt;post($body);\n    print $flightOffers[0];\n} catch (ResponseException $e) {\n    print $e;\n}\n</code></pre>"},{"location":"developer-tools/php/#handling-the-response","title":"Handling the response","text":"<p>Every API call returns a <code>Response</code> object which contains raw response body in string format:</p> <pre><code>$locations = $amadeus-&gt;getReferenceData()-&gt;getLocations()-&gt;get(\n                array(\n                    \"subType\" =&gt; \"CITY\",\n                    \"keyword\" =&gt; \"PAR\"\n                )\n            );\n\n// The raw response, as a string\n$locations[0]-&gt;getResponse()-&gt;getResult(); // Include response headers\n$locations[0]-&gt;getResponse()-&gt;getBody(); //Without response headers\n\n// Directly get response headers as an array\n$locations[0]-&gt;getResponse()-&gt;getHeadersAsArray();\n\n// Directly get response body as a Json Object\n$locations[0]-&gt;getResponse()-&gt;getBodyAsJsonObject();\n\n// Directly get the data part of response body\n$locations[0]-&gt;getResponse()-&gt;getData();\n</code></pre>"},{"location":"developer-tools/php/#arbitrary-api-calls","title":"Arbitrary API calls","text":"<p>You can call any API not yet supported by the SDK by making arbitrary calls.</p> <p>For the\u00a0<code>get</code>\u00a0endpoints:</p> <pre><code>// Make a GET request only using path\n$amadeus-&gt;getClient()-&gt;getWithOnlyPath(\"/v1/airport/direct-destinations?departureAirportCode=MAD\");\n\n// Make a GET request using path and passed parameters\n$amadeus-&gt;getClient()-&gt;getWithArrayParams(\"/v1/airport/direct-destinations\", [\"departureAirportCode\" =&gt; \"MAD\"]);\n</code></pre> <p>For the\u00a0<code>post</code>\u00a0endpoints:</p> <pre><code>$amadeus-&gt;getClient()-&gt;postWithStringBody(\"/v1/shopping/availability/flight-availabilities\", $body);\n</code></pre>"},{"location":"developer-tools/postman/","title":"Self-Service API Postman collection","text":"<p>Follow this tutorial to test Amadeus Self-Service APIs using our dedicated Postman collection.</p>"},{"location":"developer-tools/postman/#pre-requisites","title":"Pre-requisites","text":"<p>Before you begin, you need to:</p> <ul> <li>Register your application with Amadeus for Developers as described in Making your first API call.</li> <li>Create a new Postman account or use your existing Postman account.</li> </ul>"},{"location":"developer-tools/postman/#fork-the-collection","title":"Fork the collection","text":"<ol> <li>Login to Postman.</li> <li> <p>Navigate to the Amadeus for Developers public workspace.</p> <p></p> </li> <li> <p>Click Fork.</p> </li> <li> <p>Select Amadeus for Developers from the Environment dropdown.</p> <p></p> </li> <li> <p>Give the fork a name.</p> </li> <li>Select the workspace where you need to fork the collection to.</li> <li>Tick the Watch original collection box to get notified when the collection is updated.</li> <li>Click Fork Collection. You will be taken to the workspace that you selected previously.</li> </ol>"},{"location":"developer-tools/postman/#fork-the-environment","title":"Fork the environment","text":"<ol> <li> <p>Navigate to the Amadeus for Developers public workspace.</p> <p></p> </li> <li> <p>On the left side bar, click Environments.</p> <p></p> </li> <li> <p>Select ... beside the Amadeus for Developers envoronment and select Create a fork.</p> <p></p> </li> <li> <p>Give the fork a name.</p> <p></p> </li> <li> <p>Select the workspace where you need to fork the collection to.</p> </li> <li>Click Fork Environment. You will be taken to the workspace that you selected previously.</li> </ol>"},{"location":"developer-tools/postman/#generate-the-access-token","title":"Generate the access token","text":"<ol> <li> <p>On the right side bar, set the environment to Amadeus for Developers.</p> <p></p> </li> <li> <p>On the left side bar, click Environments.</p> <p></p> </li> <li> <p>Enter you API key and secret values into the Current values of the <code>client_id</code> and <code>client_secret</code> parameters respectively.</p> </li> <li>Click Save.</li> <li>On the left side bar, navigate to Collections.</li> <li>Select the Authorization &gt; Access Granted Client Credentials.</li> <li>Click Send without filling out any parameters.</li> <li>You will receive the access_token value in the response.</li> </ol> <p>Note</p> <p>The token is valid for 30 minutes and you must perform the previous step every 30 minutes to generate a new access token.</p>"},{"location":"developer-tools/postman/#make-an-api-call","title":"Make an API call","text":"<ol> <li>Select the required API from the collection by navigating to the required endpoint on the left side bar. For example, Flights &gt; Flight Booking &gt; Flight Offers Search.</li> <li>Do not specify the <code>client_id</code> and <code>client_secret</code> parameters, as the access_token obtained previously is already linked to this API.</li> <li>If required, specify the request parameters. Alternatively, you can try the API without setting any parameters, as we have already preconfigured it to display data for the upcoming month.</li> <li> <p>Click Send to make the call.</p> <p></p> </li> </ol>"},{"location":"developer-tools/postman/#make-our-preconfigured-scenarios","title":"Make our preconfigured scenarios","text":"<p>To give you a smooth user experience that emulates the actual workflow of a flight and hotel booking engine, we have included Scenarios in the Flights and Hotels categories. A scenario combines all required APIs to achive a certain goal (e.g., book a flight) and uses data from each of the API's responses for calling the next API.</p> <ol> <li>Select the required scenario from the collection by navigating to the required category on the left side bar. For example, Air &gt; (Scenario)Basic Flight Booking flow.</li> <li>Refresh the access_token by calling the Authorization API.</li> <li>Make a call to the Flight Offers Search to get the offer as a JSON object.</li> <li>Make a call to the Flight Offers Price to get the the price for the offer retrieved in the previous step. This API will automatically use the JSON object of the flight offer search.</li> <li>Make a call to the Flight Create Orders to create an order for the offer retrieved in the previous steps. </li> </ol>"},{"location":"developer-tools/postman/#visualize-api-responses","title":"Visualize API responses","text":"<p>Some APIs in our Postman include a visualization to present the results graphically for better understanding and interpretation.</p> <p>To access a visualization of an API:</p> <ol> <li>Select the required API from the collection by navigating to the required endpoint on the left side bar. For example, Market Insight &gt; Flight Busiest Traveling Period.</li> <li>Specify the API parameters.</li> <li>Click Send to make the call.</li> <li> <p>Click Visualize at the bottom of the screen.</p> <p></p> </li> </ol>"},{"location":"developer-tools/python/","title":"Python","text":""},{"location":"developer-tools/python/#python-sdk","title":"Python SDK","text":""},{"location":"developer-tools/python/#installation","title":"Installation","text":"<p>You can call the Amadeus APIs using the Python SDK. The Python SDK has been uploaded to the official Python package repository, which makes life easier since you can install the SDK as a regular Python package.</p>"},{"location":"developer-tools/python/#prerequisites","title":"Prerequisites","text":"<ul> <li>Amadeus for Developers API key and API secret: to get one,\u00a0create a free developer account\u00a0and set up your first application in your\u00a0Workspace.</li> <li>Python version &gt;= 3.8</li> </ul> <p>First step is to create the environment. Switch to your project repository and type:</p> <pre><code>python3 -m venv .venv\n</code></pre> <p>A new folder <code>.venv</code> will be created with everything necessary inside. Let's activate the isolated environment with the following command:</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>From now on, all packages installed using <code>pip</code> will be located under <code>.venv/lib</code> and not in your global <code>/usr/lib</code> folder.</p> <p>Finally, install the Amadeus SDK as follows:</p> <pre><code>pip install amadeus\n</code></pre> <p>You can also add it to your <code>requirements.txt</code> file and install using:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>The virtual environment can be disabled by typing:</p> <pre><code>deactivate\n</code></pre>"},{"location":"developer-tools/python/#your-first-api-call","title":"Your first API call","text":"<p>This tutorial will guide you through the process of creating a simple Python application which calls the Airport and Search API using the Amadeus for Developers Python SDK.</p>"},{"location":"developer-tools/python/#request","title":"Request","text":"<pre><code>from amadeus import Client, Location, ResponseError\n\namadeus = Client(\n    client_id='AMADEUS_CLIENT_ID',\n    client_secret='AMADEUS_CLIENT_SECRET'\n)\n\ntry:\n    response = amadeus.reference_data.locations.get(\n        keyword='LON',\n        subType=Location.AIRPORT\n    )    \n    print(response.data)\nexcept ResponseError as error:\n    print(error)\n</code></pre> <ul> <li>Once you import the\u00a0amadeus\u00a0library, you initialize the client by adding your credentials in the\u00a0<code>builder</code>\u00a0method. The library can also be initialized without any parameters when the environment variables\u00a0<code>AMADEUS_CLIENT_ID</code>\u00a0and\u00a0<code>AMADEUS_CLIENT_SECRET</code>\u00a0are present.</li> <li>The authentication process is handled by the SDK and the access token is renewed every 30 minutes.</li> <li>The SDK\u00a0uses namespaced methods to create a match between the APIs and the SDK. In this case, the API\u00a0<code>GET /v1/reference-data/locations?keyword=LON&amp;subType=AIRPORT</code>\u00a0is implemented as\u00a0<code>amadeus.reference_data.locations.get(keyword='LON',subType=Location.AIRPORT)</code>.</li> </ul>"},{"location":"developer-tools/python/#handling-the-response","title":"Handling the response","text":"<p>Every API call returns a <code>Response</code> object. If the API call contains a JSON response, it will parse the JSON into the <code>.result</code> attribute. If this data also contains a data key, it will make that available as the <code>.data</code> attribute. The raw body of the response is always available as the <code>.body</code> attribute.</p> <pre><code>print(response.body) #=&gt; The raw response, as a string\nprint(response.result) #=&gt; The body parsed as JSON, if the result was parsable\nprint(response.data) #=&gt; The list of locations, extracted from the JSON\n</code></pre>"},{"location":"developer-tools/python/#arbitrary-api-calls","title":"Arbitrary API calls","text":"<p>You can call any API not yet supported by the SDK by making arbitrary calls.</p> <p>For the\u00a0<code>get</code>\u00a0endpoints:</p> <pre><code>amadeus.get('/v2/reference-data/urls/checkin-links', airlineCode='BA')\n</code></pre> <p>For the\u00a0<code>post</code>\u00a0endpoints:</p> <pre><code>amadeus.post('/v1/shopping/flight-offers/pricing', body)\n</code></pre>"},{"location":"developer-tools/python/#video-tutorial","title":"Video Tutorial","text":"<p>You can also check the video tutorial on how to get started with the Python SDK.</p> <p></p>"},{"location":"developer-tools/python/#managing-api-rate-limits","title":"Managing API rate limits","text":"<p>Amadeus Self-Service APIs have rate limits in place to protect against abuse by third parties. You can find Rate limit example in Python using the Amadeus Python SDK here. </p>"},{"location":"developer-tools/python/#python-async-api-calls","title":"Python Async API calls","text":"<p>In a synchronous program, each step is completed before moving on to the next one. However, an asynchronous program may not wait for each step to be completed. Asynchronous functions can pause and allow other functions to run while waiting for a result. This enables concurrent execution and gives the feeling of working on multiple tasks at the same time.</p> <p>In this guide we are going to show you how to make async API calls in Python to improve the performance of your Python applications.</p> <p>For all these examples we are going to call the Flight-Checkin Links API. </p>"},{"location":"developer-tools/python/#prerequisites_1","title":"Prerequisites","text":"<p>To follow along with the tutorial you will need the followings: </p> <ul> <li> <p>Python version &gt;= 3.8</p> </li> <li> <p>Amadeus for Developers API key and API secret: to get one,\u00a0create a free developer account\u00a0and set up your first application in your\u00a0Workspace.</p> </li> <li> <p><code>aiohttp</code>: you will use the aiohttp library to make asynchronous API calls. You can install it using the command <code>pip install aiohttp</code>.</p> </li> <li> <p><code>requests</code>: you will use the requests library for synchronous requests. You can install it using the command <code>pip install requests</code>.</p> </li> <li> <p><code>amadeus</code>: the Amadeus Pthon SDK. You can install it using the command <code>pip install amadeus</code>.</p> </li> </ul>"},{"location":"developer-tools/python/#async-api-calls-with-aiohttp","title":"Async API calls with aiohttp","text":"<p><code>aiohttp</code> is a Python library for making asynchronous HTTP requests build top of <code>asyncio</code>. The library provides a simple way of making HTTP requests and handling the responses in a non-blocking way.</p> <p>In the example below you can call the the Amadeus Flight-Checkin link API using the\u00a0<code>aiohttp</code>\u00a0library and the code runs in an async way.</p> <pre><code>import aiohttp\nimport asyncio\nimport requests\n\nAUTH_ENDPOINT = \"https://test.api.amadeus.com/v1/security/oauth2/token\"\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\ndata = {\"grant_type\": \"client_credentials\",\n        \"client_id\": 'YOUR_AMADEUS_API_KEY',\n        \"client_secret\": 'YOUR_AMADEUS_API_SECRET'}\nresponse = requests.post(AUTH_ENDPOINT,\n                        headers=headers,\n                        data=data)\naccess_token = response.json()['access_token']\n\nasync def main():\n    headers = {'Authorization': 'Bearer' + ' ' + access_token}\n    flight_search_endpoint = 'https://test.api.amadeus.com/v2/reference-data/urls/checkin-links'\n    parameters = {\"airlineCode\": 'BA'}\n\n    async with aiohttp.ClientSession() as session:\n\n        for number in range(20):\n            async with session.get(flight_search_endpoint,\n                            params=parameters,\n                            headers=headers) as resp:\n                flights = await resp.json()\n                print(flights)\n\nasyncio.run(main())\n</code></pre> <p>The above code makes <code>POST</code> request to the Authentication API using the <code>requests</code> library. The returned access token is then used in the headers of following requests to make 20 asyncronous API calls.</p>"},{"location":"developer-tools/python/#async-api-calls-with-thread-executor","title":"Async API calls with thread executor","text":"<p>Since we offer the Python SDK we want to show you how you are able to make async API calls using the SDK. The SDK is built using the requests <code>library</code> which only supports synchronous API calls. This means that when you call an API, your application will block and wait for the response. The solution is to use a thread executor to allow run blocking calls in separate threads, as the example below:</p> <pre><code>import asyncio\nimport requests\nfrom amadeus import Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\nasync def main():\n\n        loop = asyncio.get_event_loop()\n        futures = [\n            loop.run_in_executor(\n                None, \n                requests.get,\n                amadeus.reference_data.urls.checkin_links.get(\n                airlineCode='BA')\n            )\n            for number in range(20)\n            ]\n        for response in await asyncio.gather(*futures):\n            print(response.status_code)\n\nasyncio.run(main())\n</code></pre>"},{"location":"developer-tools/python/#openapi-generator","title":"OpenAPI Generator","text":"<p>In this tutorial, we'll guide you through the process of making your first API calls using the OpenAPI Generator in Python. To begin, you'll need to retrieve the specification files from the GitHub repository. In this example, you will use the <code>Authorization_v1_swagger_specification.yaml</code> and <code>FlightOffersSearch_v2_swagger_specification.yaml</code> files.</p> <p>Before getting started make sure you check out how to generate client libraries with the OpenAPI Generator.</p>"},{"location":"developer-tools/python/#call-the-authorization-endpoint","title":"Call the Authorization endpoint","text":"<p>You will now learn how to call the POST <code>https://test.api.amadeus.com/v1/security/oauth2/token</code> endpoint in order to get the Amadeus access token. </p> <p>Open your terminal and generate the Python client with the following command:</p> <p><pre><code>docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/Authorizaton_v1_swagger_specification.yaml  \\\n  -g python \\\n  -o /local/auth\n</code></pre> In your local directory you will see the folder <code>auth</code> which contains the generated library. </p> <p>You can install the library using pip:</p> <pre><code>pip install openapi-client\n</code></pre> <p>Then create a file <code>auth.py</code> and add the following code to generate an Amadeus access token.</p> <pre><code>import openapi_client\nfrom openapi_client.apis.tags import o_auth2_access_token_api\nfrom openapi_client.model.amadeus_o_auth2_token import AmadeusOAuth2Token\n\nauth_configuration = openapi_client.Configuration()\nwith openapi_client.ApiClient(auth_configuration) as api_client:\n    api_instance = o_auth2_access_token_api.OAuth2AccessTokenApi(api_client)\n\n    body = dict(\n        grant_type=\"client_credentials\",\n        client_id=\"YOUR_API_KEY\",\n        client_secret=\"YOUR_API_SECRET\",\n    )\n    api_response = api_instance.oauth2_token(\n        body=body,\n    )\n\nprint(api_response.body['access_token'])\n</code></pre> <p>The code uses the library we have generated to get an OAuth2 access token. With the <code>o_auth2_access_token_api.OAuth2AccessTokenApi()</code> we are able to call the <code>oauth2_token()</code> method.</p> <p>The body of the request is being created by passing the <code>grant_type</code>, <code>client_id</code> and <code>client_secret</code> to the <code>oauth2_token()</code> method. If you want to know more about how to get the access token check the authorization guide. </p>"},{"location":"developer-tools/python/#call-the-flight-offers-search-api","title":"Call the Flight Offers Search API","text":"<p>Now let's call the Flight Offers Search API. Since thr OpenAPI Generator works with OAS3 you will have to convert the flight search specification to version 3 using the swagger editor (https://editor.swagger.io/){:target=\"_blank\"}. To do the convertion, navigate to the top menu and select <code>Edit</code> then <code>Convert to OAS 3</code>.</p> <p>The process is the same as above. You need to generate the library:</p> <pre><code>  docker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/FlightOffersSearch_v2_swagger_specification.yaml \\\n  -g python \\\n  -o /local/flights\n</code></pre> <p>and then install it in your environment:</p> <pre><code>pip install openapi-client\n</code></pre> <p>Then create a file <code>flights.py</code> and add the following code:</p> <pre><code>import openapi_client\nfrom openapi_client.apis.tags import shopping_api\n\nflight_configuration = openapi_client.Configuration()\napi_client = openapi_client.ApiClient(flight_configuration)\napi_client.default_headers['Authorization'] = 'Bearer YOUR_ACCESS_TOKEN'\n\napi_instance = shopping_api.ShoppingApi(api_client)\n\nquery_params = {\n    'originLocationCode': \"MAD\",\n    'destinationLocationCode': \"BCN\",\n    'departureDate': \"2023-05-02\",\n    'adults': 1,\n    'max': 2\n}\ntry:\n    api_response = api_instance.get_flight_offers(\n        query_params=query_params,\n    )\n    print(api_response.body)\nexcept openapi_client.ApiException as e:\n    print(\"Exception: %s\\n\" % e)\n</code></pre> <p>The above code uses the generated library to to search for flight offers. It creates an instance of the <code>shopping_api.ShoppingApi</code> class and setting the default headers to include the access token.</p> <p>Then it is calling the <code>get_flight_offers()</code> method to make the API request. </p>"},{"location":"developer-tools/graphql/","title":"GraphQL Resources","text":"<p>Explore our collection of GraphQL resources, including guides on creating GraphQL wrappers for REST APIs and converting OpenAPI specifications into GraphQL schemas.</p> Article Description GraphQL wrapper for REST (Node) This article provides a guide on how to create a GraphQL wrapper for a REST API using Node.js. GraphQL wrapper for REST (Python) Learn how to create a GraphQL wrapper for a REST API using Python. OpenAPI to GraphQL converter Discover how to convert an OpenAPI Specification into a GraphQL schema, enabling seamless integration of GraphQL with existing REST APIs."},{"location":"developer-tools/graphql/rest-to-graphql-export/","title":"Convert an OpenAPI specification to a GraphQL schema","text":"<p>Follow this tutorial to learn how to convert an OpenAPI specification to a GraphQL schema.</p> <p>Our Self-Service APIs are stored as OpenAPI specs in this repository. In this tutorial, we will use the City Search API spec as an example and convert it to a GraphQL schema using openapi-to-graphql. While there are many similar tools available, the underlying principle remains the same.</p> <p>The goal is to create a GraphQL schema and then utilise this schema for your GraphQL wrapper, regardless of the programming language your GraphQL server is written in.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-export/#pre-requisites","title":"Pre-requisites","text":"<p>Before you begin, you need to:</p> <ul> <li>Have Node.js installed on your machine.</li> </ul>"},{"location":"developer-tools/graphql/rest-to-graphql-export/#install-the-openapi-to-graphql-tool","title":"Install the openapi-to-graphql tool","text":"<pre><code>npm install -g openapi-to-graphql-cli\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-export/#download-the-required-openapi-schema","title":"Download the required OpenAPI schema","text":"<p>Navigate to the amadeus-open-api-specification repository and download the required specification for your API. Alternatively, you can visit the Developers portal and download the specification from the page of a specific API.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-export/#convert","title":"Convert","text":"<p>For example, let's download the City Search API OpenAPI specification to the same directory where we run our project. We will then specify the name for the output file - <code>schema.graphql</code> and execute the following command:</p> <pre><code>openapi-to-graphql CitySearch_v1_Version_1.0_swagger_specification.json --save schema.graphql   \n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-export/#access-the-generated-schema","title":"Access the generated schema","text":"<p>The schema is now created as <code>schema.graphql</code>. For the City Search API, the contents will appear like this:</p> <pre><code>type Query {\n  \"\"\"\n  GET Cities by keyword\n\n  Equivalent to GET /reference-data/locations/cities\n  \"\"\"\n  referenceDataLocationsCities(\n    \"\"\"ISO 3166 Alpha-2 code. e.g. \"US\" United States of America.\"\"\"\n    countryCode: String\n\n    \"\"\"Resources to be included example : Airports\"\"\"\n    include: [IncludeListItem]\n\n    \"\"\"keyword that should represent the start of a word in a city name.\"\"\"\n    keyword: String!\n\n    \"\"\"Number of results user want to see in response.\"\"\"\n    max: Int\n  ): String\n}\n\nenum IncludeListItem {\n  AIRPORTS\n}\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-export/#import-the-schema-to-your-code","title":"Import the schema to your code","text":"<p>Depending on the server that we use, we will now need to reference this schema. For example, in Node.js, you can use the Apollo Server library to create a GraphQL server:</p> <pre><code>const { ApolloServer, gql } = require('apollo-server');\nconst fs = require('fs');\n\nconst typeDefs = gql(fs.readFileSync('&lt;path-to-generated-graphql-schema&gt;', 'utf8'));\nconst resolvers = {}; // Implement your resolvers here\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.listen().then(({ url }) =&gt; {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-node/","title":"Wrap a REST API endpoint with GraphQL in Node.js","text":"<p>Follow this tutorial to wrap a REST API endpoint with a GraphQL wrapper to make it accessible via a dedicated GraphQL API.</p> <p>In this tutorial we will use a standalone Apollo server, which is an easy-to-use option for setting up a GraphQL server without any additional configuration. For the REST API endpoint we will use the City Search API.</p> <p>The goal of this tutorial is to create a GraphQL API, which will only use the <code>keyword</code> parameter for the query and return only the <code>name</code> parameter in the response.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#pre-requisites","title":"Pre-requisites","text":"<p>Before you begin, you need to:</p> <ul> <li>Register your application with Amadeus for Developers as described in Making your first API call.</li> <li>Have Node.js installed on your machine.</li> </ul>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#initialize-a-new-nodejs-project","title":"Initialize a new Node.js project","text":"<ol> <li>Open your terminal and create a new directory for this project:    <pre><code>mkdir graphql-wrapper\n</code></pre></li> <li>Navigate to the directory and run the following command to initialize a new Node.js project:    <pre><code>cd graphql-wrapper\nnpm init -y\n</code></pre></li> </ol>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#install-required-dependencies","title":"Install required dependencies","text":"<p>Install <code>apollo-server</code>, <code>graphql</code>, and <code>node-fetch</code> packages by running:</p> <pre><code>npm install apollo-server graphql node-fetch\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#define-graphql-schema","title":"Define GraphQL schema","text":"<p>Create a <code>schema.graphql</code> file with the necessary types and queries. In this tutorial, we are only using the <code>keyword</code> parameter to query the City Search API and we are only interested in the <code>name</code> parameters that this query returns in the response data. For this reason, our <code>schema.graphql</code> will look as follows:</p> <pre><code>type Query {\n  getCities(keyword: String!): [City]\n}\n\ntype City {\n  name: String\n}\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#create-a-data-fetching-function","title":"Create a data fetching function","text":"<p>Information</p> <p>The <code>node-fetch</code> package is an ECMAScript module (ESM), so we will use <code>.mjs</code> extensions and ECMAScript module syntax in these examples.</p> <p>Create a <code>fetchData.mjs</code> file and define a function that fetches data from the REST endpoint using <code>node-fetch</code>:</p> <pre><code>import fetch from 'node-fetch';\n\n\nconst fetchCities = async (keyword, token) =&gt; {\n  const endpoint = `https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword=${keyword}`;\n\n  const response = await fetch(endpoint, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  const data = await response.json();\n\n  console.log('API Response:', data);\n\n  return data.data;\n};\n\nexport { fetchCities };\n</code></pre> <p>In the above example we are outputting logs to the console for easier troubleshooting.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#implement-graphql-resolvers","title":"Implement GraphQL resolvers","text":"<p>Create a <code>resolvers.mjs</code> file and implement the resolver functions for the queries:</p> <pre><code>import { fetchCities } from './fetchData.mjs';\n\nconst resolvers = {\n  Query: {\n    getCities: async (_, { keyword }, { token }) =&gt; {\n      const cities = await fetchCities(keyword, token);\n      return cities.map(city =&gt; ({ name: city.name }));\n    },\n  },\n};\n\nexport default resolvers;\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#set-up-the-apollo-server","title":"Set up the Apollo server","text":"<p>Create the main file <code>index.mjs</code> that sets up the Apollo server with the schema and resolvers:</p> <pre><code>import { ApolloServer, gql } from 'apollo-server';\nimport { readFileSync } from 'fs';\nimport resolvers from './resolvers.mjs';\n\nconst typeDefs = gql(readFileSync('./schema.graphql', 'utf8'));\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: ({ req }) =&gt; {\n    const token = req.headers.authorization || '';\n\n    return { token };\n  },\n});\n\nserver.listen().then(({ url }) =&gt; {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#run-the-server","title":"Run the server","text":"<p>Open the terminal and run:</p> <pre><code>node index.mjs\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-node/#query-the-graphql-api","title":"Query the GraphQL API","text":"<p>Information</p> <p>Before running the query, make sure to obtain the token as described in our Authorization guide.</p> <p>Now that we have the server running, we can send requests to it. The most straightforward method to do this is by using <code>curl</code>. To query this API by the <code>keyword</code> \"Paris\":</p> <pre><code>curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: &lt;your_bearer_token&gt;\" \\\n  -d '{ \"query\": \"{ getCities(keyword: \\\"PARIS\\\") { name } }\" }' \\\n  http://localhost:4000/\n</code></pre> <p>If your token is valid, the above command will return a list of city names that contain the word <code>Paris</code>.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-python/","title":"Wrap a REST API endpoint with GraphQL in Python","text":"<p>Follow this tutorial to wrap a REST API endpoint with a GraphQL wrapper to make it accessible via a dedicated GraphQL API.</p> <p>In this tutorial we will use a standalone Ariadne server, which is a Python library for implementing GraphQL servers. It aims to make it easy and enjoyable for developers to create GraphQL APIs by using a schema-first approach, where you define your GraphQL schema using the Schema Definition Language (SDL) and then map your resolvers to the schema.</p> <p>For the REST API endpoint we will use the City Search API.</p> <p>The goal of this tutorial is to create a GraphQL API, which will only use the <code>keyword</code> parameter for the query and return only the <code>name</code> parameter in the response.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#pre-requisites","title":"Pre-requisites","text":"<p>Before you begin, you need to:</p> <ul> <li>Register your application with Amadeus for Developers as described in Making your first API call.</li> <li>Have Python installed on your machine.</li> </ul>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#create-a-new-python-project","title":"Create a new Python project","text":"<ol> <li>Open your terminal and create a new directory for this project:    <pre><code>mkdir graphql-wrapper\n</code></pre></li> <li>Navigate to the directory:    <pre><code>cd graphql-wrapper\n</code></pre></li> </ol>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#install-required-dependencies","title":"Install required dependencies","text":"<p>Install <code>uvicorn</code> and <code>requests</code> packages by running:</p> <pre><code>pip install uvicorn\npip install requests\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#define-graphql-schema","title":"Define GraphQL schema","text":"<p>Create a <code>schema.graphql</code> file with the necessary types and queries. In this tutorial, we are only using the <code>keyword</code> parameter to query the City Search API and we are only interested in the <code>name</code> parameters that this query returns in the response data. For this reason, our <code>schema.graphql</code> will look as follows:</p> <pre><code>type Query {\n  getCities(keyword: String!): [City]\n}\n\ntype City {\n  name: String\n}\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#create-a-data-fetching-function","title":"Create a data fetching function","text":"<p>Create a <code>fetch_data.py</code> file and define a function that fetches data from the REST endpoint:</p> <pre><code>import requests\n\ndef fetch_cities(keyword, token):\n    endpoint = f\"https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword={keyword}\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    response = requests.get(endpoint, headers=headers)\n    data = response.json()\n\n    print(\"API Response:\", data)\n\n    return data[\"data\"]\n</code></pre> <p>In the above example we are outputting logs to the console for easier troubleshooting.</p>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#implement-graphql-resolvers","title":"Implement GraphQL resolvers","text":"<p>Create a <code>resolvers.py</code> file and implement the resolver functions for the queries:</p> <pre><code>from fetch_data import fetch_cities\n\ndef resolve_get_cities(_, info, keyword):\n    token = info.context[\"request\"].headers[\"authorization\"]\n    cities = fetch_cities(keyword, token)\n    return [{\"name\": city[\"name\"]} for city in cities]\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#set-up-the-ariadne-server","title":"Set up the Ariadne server","text":"<p>Create the main file <code>main.py</code> that sets up the Ariadne server with the schema and resolvers:</p> <pre><code>from ariadne import QueryType, make_executable_schema, load_schema_from_path\nfrom ariadne.asgi import GraphQL\nfrom resolvers import resolve_get_cities\n\ntype_defs = load_schema_from_path(\"schema.graphql\")\nquery = QueryType()\nquery.set_field(\"getCities\", resolve_get_cities)\n\nschema = make_executable_schema(type_defs, query)\napp = GraphQL(schema, debug=True)\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#run-the-server","title":"Run the server","text":"<p>Open the terminal and run:</p> <pre><code>uvicorn main:app\n</code></pre>"},{"location":"developer-tools/graphql/rest-to-graphql-python/#query-the-graphql-api","title":"Query the GraphQL API","text":"<p>Information</p> <p>Before running the query, make sure to obtain the token as described in our Authorization guide.</p> <p>Now that we have the server running, we can send requests to it. The most straightforward method to do this is by using <code>curl</code>. To query this API by the <code>keyword</code> \"Paris\":</p> <pre><code>curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: &lt;your_bearer_token&gt;\" \\\n  -d '{ \"query\": \"{ getCities(keyword: \\\"PARIS\\\") { name } }\" }' \\\n  http://localhost:8000/\n</code></pre> <p>If your token is valid, the above command will return a list of city names that contain the word <code>Paris</code>.</p>"},{"location":"examples/","title":"Code examples and prototypes","text":"<p>To facilitate a smooth and efficient start, or to spark creativity in using our Self-Service APIs within your applications, we've assembled a compilation of code examples and prototypes. These resources aim to serve as guides for you to quickly integrate our APIs into your project.</p> Asset Link Code examples For each SDK and API endpoint Interactive code examples Flight Search and Hotel Search Prototypes Official prototypesCommunity prototypes"},{"location":"examples/code-example/","title":"Code Examples","text":"<p>To help you get up and running with the Amadeus Self-Service APIs as smoothly as possible, we have provided code examples for each SDK and API endpoint. Simply copy and paste these examples into your project to make API requests. </p> <p>If you have any questions or ideas for improvement, don't hesitate to raise an issue or a pull request directly from GitHub examples repository.</p>"},{"location":"examples/code-example/#flights","title":"Flights","text":""},{"location":"examples/code-example/#airline-routes","title":"Airline Routes","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What are the destinations served by the British Airways (BA)?\n    '''\n    response = amadeus.airline.destinations.get(airlineCode='BA')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_AMADEUS_API_KEY\",\n  clientSecret: \"YOUR_AMADEUS_API_SECRET\",\n});\n// Or `const amadeus = new Amadeus()` if the environment variables are set\n\nasync function main() {\n  try {\n    // What are the destinations served by the British Airways (BA)?\n    const response = await amadeus.airline.destinations.get({\n      airlineCode: \"BA\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Destination;\n\n// What are the destinations served by the British Airways (BA)?\npublic class AirlineRoutes {\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Set query parameters\n    Params params = Params\n        .with(\"airlineCode\", \"BA\");\n\n    // Run the query\n    Destination[] destinations = amadeus.airline.destinations.get(params);\n\n    if (destinations[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + destinations[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(destinations[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#airport-routes","title":"Airport Routes","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What are the destinations served by MAD airport?\n    '''\n    response = amadeus.airport.direct_destinations.get(departureAirportCode='MAD')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Find all destinations served by CDG Airport\n    const response = await amadeus.airport.directDestinations.get({\n      departureAirportCode: \"MAD\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Destination;\n\npublic class AirportRoutes {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    Destination[] directDestinations = amadeus.airport.directDestinations.get(\n      Params.with(\"departureAirportCode\", \"MAD\"));\n\n    if (directDestinations[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + directDestinations[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(directDestinations[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-offers-search","title":"Flight Offers Search","text":"<p>GET</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Find the cheapest flights from SYD to BKK\n    '''\n    response = amadeus.shopping.flight_offers_search.get(\n        originLocationCode='SYD', destinationLocationCode='BKK', departureDate='2022-07-01', adults=1)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Find the cheapest flights from SYD to BKK\n    const response = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"SYD\",\n      destinationLocationCode: \"BKK\",\n      departureDate: \"2022-08-01\",\n      adults: \"2\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\n\npublic class FlightOffersSearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    FlightOfferSearch[] flightOffersSearches = amadeus.shopping.flightOffersSearch.get(\n                  Params.with(\"originLocationCode\", \"SYD\")\n                          .and(\"destinationLocationCode\", \"BKK\")\n                          .and(\"departureDate\", \"2022-11-01\")\n                          .and(\"returnDate\", \"2022-11-08\")\n                          .and(\"adults\", 2)\n                          .and(\"max\", 3));\n\n    if (flightOffersSearches[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightOffersSearches[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightOffersSearches[0]);\n  }\n}\n</code></pre> <p>POST </p> PythonNodeJava <pre><code>import json\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\njson_string = '{ \"currencyCode\": \"ZAR\", \"originDestinations\": [ { \"id\": \"1\", \"originLocationCode\": \"JNB\", ' \\\n              '\"destinationLocationCode\": \"CPT\", \"departureDateTimeRange\": { \"date\": \"2022-07-01\", \"time\": \"00:00:00\" ' \\\n              '} }, { \"id\": \"2\", \"originLocationCode\": \"CPT\", \"destinationLocationCode\": \"JNB\", ' \\\n              '\"departureDateTimeRange\": { \"date\": \"2022-07-29\", \"time\": \"00:00:00\" } } ], \"travelers\": [ { \"id\": ' \\\n              '\"1\", \"travelerType\": \"ADULT\" }, { \"id\": \"2\", \"travelerType\": \"ADULT\" }, { \"id\": \"3\", \"travelerType\": ' \\\n              '\"HELD_INFANT\", \"associatedAdultId\": \"1\" } ], \"sources\": [ \"GDS\" ], \"searchCriteria\": { ' \\\n              '\"excludeAllotments\": true, \"addOneWayOffers\": false, \"maxFlightOffers\": 10, ' \\\n              '\"allowAlternativeFareOptions\": true, \"oneFlightOfferPerDay\": true, \"additionalInformation\": { ' \\\n              '\"chargeableCheckedBags\": true, \"brandedFares\": true, \"fareRules\": false }, \"pricingOptions\": { ' \\\n              '\"includedCheckedBagsOnly\": false }, \"flightFilters\": { \"crossBorderAllowed\": true, ' \\\n              '\"moreOvernightsAllowed\": true, \"returnToDepartureAirport\": true, \"railSegmentAllowed\": true, ' \\\n              '\"busSegmentAllowed\": true, \"carrierRestrictions\": { \"blacklistedInEUAllowed\": true, ' \\\n              '\"includedCarrierCodes\": [ \"FA\" ] }, \"cabinRestrictions\": [ { \"cabin\": \"ECONOMY\", \"coverage\": ' \\\n              '\"MOST_SEGMENTS\", \"originDestinationIds\": [ \"2\" ] }, { \"cabin\": \"ECONOMY\", \"coverage\": \"MOST_SEGMENTS\", ' \\\n              '\"originDestinationIds\": [ \"1\" ] } ], \"connectionRestriction\": { \"airportChangeAllowed\": true, ' \\\n              '\"technicalStopsAllowed\": true } } } }'\n\nbody = json.loads(json_string)\ntry:\n    response = amadeus.shopping.flight_offers_search.post(body)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Find the cheapest flights from SYD to BKK\n    const response = await amadeus.shopping.flightOffersSearch.post({\n      currencyCode: \"USD\",\n      originDestinations: [\n        {\n          id: \"1\",\n          originLocationCode: \"SYD\",\n          destinationLocationCode: \"BKK\",\n          departureDateTimeRange: {\n            date: \"2022-08-01\",\n            time: \"10:00:00\",\n          },\n        },\n        {\n          id: \"2\",\n          originLocationCode: \"BKK\",\n          destinationLocationCode: \"SYD\",\n          departureDateTimeRange: {\n            date: \"2022-08-05\",\n            time: \"17:00:00\",\n          },\n        },\n      ],\n      travelers: [\n        {\n          id: \"1\",\n          travelerType: \"ADULT\",\n          fareOptions: [\"STANDARD\"],\n        },\n        {\n          id: \"2\",\n          travelerType: \"CHILD\",\n          fareOptions: [\"STANDARD\"],\n        },\n      ],\n      sources: [\"GDS\"],\n      searchCriteria: {\n        maxFlightOffers: 50,\n        flightFilters: {\n          cabinRestrictions: [\n            {\n              cabin: \"BUSINESS\",\n              coverage: \"MOST_SEGMENTS\",\n              originDestinationIds: [\"1\"],\n            },\n          ],\n          carrierRestrictions: {\n            excludedCarrierCodes: [\"AA\", \"TP\", \"AZ\"],\n          },\n        },\n      },\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\n\npublic class FlightOffersSearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    String body = \"{\\\"currencyCode\\\":\\\"USD\\\",\\\"originDestinations\\\":[{\\\"id\\\":\\\"1\\\",\\\"originLocationCode\\\":\\\"RIO\\\",\\\"destinationLocationCode\\\":\\\"MAD\\\",\\\"departureDateTimeRange\\\":{\\\"date\\\":\\\"2022-08-01\\\",\\\"time\\\":\\\"10:00:00\\\"}},{\\\"id\\\":\\\"2\\\",\\\"originLocationCode\\\":\\\"MAD\\\",\\\"destinationLocationCode\\\":\\\"RIO\\\",\\\"departureDateTimeRange\\\":{\\\"date\\\":\\\"2022-08-05\\\",\\\"time\\\":\\\"17:00:00\\\"}}],\\\"travelers\\\":[{\\\"id\\\":\\\"1\\\",\\\"travelerType\\\":\\\"ADULT\\\",\\\"fareOptions\\\":[\\\"STANDARD\\\"]},{\\\"id\\\":\\\"2\\\",\\\"travelerType\\\":\\\"CHILD\\\",\\\"fareOptions\\\":[\\\"STANDARD\\\"]}],\\\"sources\\\":[\\\"GDS\\\"],\\\"searchCriteria\\\":{\\\"maxFlightOffers\\\":2,\\\"flightFilters\\\":{\\\"cabinRestrictions\\\":[{\\\"cabin\\\":\\\"BUSINESS\\\",\\\"coverage\\\":\\\"MOST_SEGMENTS\\\",\\\"originDestinationIds\\\":[\\\"1\\\"]}],\\\"carrierRestrictions\\\":{\\\"excludedCarrierCodes\\\":[\\\"AA\\\",\\\"TP\\\",\\\"AZ\\\"]}}}}\";\n\n    FlightOfferSearch[] flightOffersSearches = amadeus.shopping.flightOffersSearch.post(body);\n\n    if (flightOffersSearches[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightOffersSearches[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightOffersSearches[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-offers-price","title":"Flight Offers Price","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Confirm availability and price from SYD to BKK in summer 2022\n    '''\n    flights = amadeus.shopping.flight_offers_search.get(originLocationCode='SYD', destinationLocationCode='BKK',\n                                                        departureDate='2022-07-01', adults=1).data\n    response_one_flight = amadeus.shopping.flight_offers.pricing.post(\n        flights[0])\n    print(response_one_flight.data)\n\n    response_two_flights = amadeus.shopping.flight_offers.pricing.post(\n        flights[0:2])\n    print(response_two_flights.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Confirm availability and price from MAD to ATH in summer 2024\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"MAD\",\n      destinationLocationCode: \"ATH\",\n      departureDate: \"2024-07-01\",\n      adults: \"1\",\n    });\n\n    const response = await amadeus.shopping.flightOffers.pricing.post(\n      {\n        data: {\n          type: \"flight-offers-pricing\",\n          flightOffers: [flightOffersResponse.data[0]],\n        },\n      },\n      { include: \"credit-card-fees,detailed-fare-rules\" }\n    );\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\nimport com.amadeus.resources.FlightPrice;\n\npublic class FlightOffersPrice {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    FlightOfferSearch[] flightOffersSearches = amadeus.shopping.flightOffersSearch.get(\n        Params.with(\"originLocationCode\", \"SYD\")\n                .and(\"destinationLocationCode\", \"BKK\")\n                .and(\"departureDate\", \"2022-11-01\")\n                .and(\"returnDate\", \"2022-11-08\")\n                .and(\"adults\", 1)\n                .and(\"max\", 2));\n\n    // We price the 2nd flight of the list to confirm the price and the availability\n    FlightPrice flightPricing = amadeus.shopping.flightOffersSearch.pricing.post(\n            flightOffersSearches[1],\n            Params.with(\"include\", \"detailed-fare-rules\")\n              .and(\"forceClass\", \"false\")\n          );\n\n    System.out.println(flightPricing.getResponse());\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-inspiration-search","title":"Flight Inspiration Search","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus/# Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Find cheapest destinations from Madrid\n    '''\n    response = amadeus.shopping.flight_destinations.get(origin='MAD')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Find cheapest destinations from Madrid\n    const response = await amadeus.shopping.flightDestinations.get({\n      origin: \"MAD\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightDestination;\n\npublic class FlightInspirationSearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    FlightDestination[] flightDestinations = amadeus.shopping.flightDestinations.get(Params\n    .with(\"origin\", \"MAD\"));\n\n    if (flightDestinations[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightDestinations[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightDestinations[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-cheapest-date-search","title":"Flight Cheapest Date Search","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Find cheapest dates from Madrid to Munich\n    '''\n    response = amadeus.shopping.flight_dates.get(origin='MAD', destination='MUC')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Find cheapest dates from Madrid to Munich\n    const response = await amadeus.shopping.flightDates.get({\n      origin: \"MAD\",\n      destination: \"MUC\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightDate;\n\npublic class FlightCheapestDate {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    FlightDate[] flightDates = amadeus.shopping.flightDates.get(Params\n      .with(\"origin\", \"MAD\")\n      .and(\"destination\", \"MUC\"));\n\n    if(flightDates[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + (flightDates[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n    System.out.println((flightDates[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-availabilities-search","title":"Flight Availabilities Search","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    body = {\n        \"originDestinations\": [\n            {\n                \"id\": \"1\",\n                \"originLocationCode\": \"MIA\",\n                \"destinationLocationCode\": \"ATL\",\n                \"departureDateTime\": {\n                    \"date\": \"2022-11-01\"\n                }\n            }\n        ],\n        \"travelers\": [\n            {\n                \"id\": \"1\",\n                \"travelerType\": \"ADULT\"\n            }\n        ],\n        \"sources\": [\n            \"GDS\"\n        ]\n    }\n\n    response = amadeus.shopping.availability.flight_availabilities.post(body)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    const response =\n      await amadeus.shopping.availability.flightAvailabilities.post({\n        originDestinations: [\n          {\n            id: \"1\",\n            originLocationCode: \"MIA\",\n            destinationLocationCode: \"ATL\",\n            departureDateTime: {\n              date: \"2022-11-01\",\n            },\n          },\n        ],\n        travelers: [\n          {\n            id: \"1\",\n            travelerType: \"ADULT\",\n          },\n        ],\n        sources: [\"GDS\"],\n      });\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Response;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightAvailability;\n\npublic class FlightAvailabilities {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    String body = \"{\\\"originDestinations\\\":[{\\\"id\\\":\\\"1\\\",\\\"originLocationCode\\\":\\\"ATH\\\",\\\"destinationLocationCode\\\":\\\"SKG\\\",\\\"departureDateTime\\\":{\\\"date\\\":\\\"2023-08-14\\\",\\\"time\\\":\\\"21:15:00\\\"}}],\\\"travelers\\\":[{\\\"id\\\":\\\"1\\\",\\\"travelerType\\\":\\\"ADULT\\\"}],\\\"sources\\\":[\\\"GDS\\\"]}\";\n\n    FlightAvailability[] flightAvailabilities = amadeus.shopping.availability.flightAvailabilities.post(body);\n\n    if (flightAvailabilities[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightAvailabilities[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightAvailabilities[0]);\n  }\n\n}\n</code></pre>"},{"location":"examples/code-example/#branded-upsell","title":"Branded Upsell","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nimport json\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    json_string = '{ \"data\": { \"type\": \"flight-offers-upselling\", \"flightOffers\": [ { \"type\": \"flight-offer\", ' \\\n                  '\"id\": \"1\", ' \\\n                  '\"source\": \"GDS\", \"instantTicketingRequired\": false, \"nonHomogeneous\": false, \"oneWay\": false, ' \\\n                  '\"lastTicketingDate\": \"2022-05-11\", \"numberOfBookableSeats\": 9, \"itineraries\": [ { \"duration\": ' \\\n                  '\"PT2H10M\", ' \\\n                  '\"segments\": [ { \"departure\": { \"iataCode\": \"CDG\", \"terminal\": \"3\", \"at\": \"2022-07-04T20:45:00\" }, ' \\\n                  '\"arrival\": { ' \\\n                  '\"iataCode\": \"MAD\", \"terminal\": \"4\", \"at\": \"2022-07-04T22:55:00\" }, \"carrierCode\": \"IB\", ' \\\n                  '\"number\": \"3741\", ' \\\n                  '\"aircraft\": { \"code\": \"32A\" }, \"operating\": { \"carrierCode\": \"I2\" }, \"duration\": \"PT2H10M\", ' \\\n                  '\"id\": \"4\", ' \\\n                  '\"numberOfStops\": 0, \"blacklistedInEU\": false } ] } ], \"price\": { \"currency\": \"EUR\", ' \\\n                  '\"total\": \"123.02\", ' \\\n                  '\"base\": \"92.00\", \"fees\": [ { \"amount\": \"0.00\", \"type\": \"SUPPLIER\" }, { \"amount\": \"0.00\", ' \\\n                  '\"type\": \"TICKETING\" } ' \\\n                  '], \"grandTotal\": \"123.02\", \"additionalServices\": [ { \"amount\": \"30.00\", \"type\": \"CHECKED_BAGS\" } ] ' \\\n                  '}, ' \\\n                  '\"pricingOptions\": { \"fareType\": [ \"PUBLISHED\" ], \"includedCheckedBagsOnly\": false }, ' \\\n                  '\"validatingAirlineCodes\": [ ' \\\n                  '\"IB\" ], \"travelerPricings\": [ { \"travelerId\": \"1\", \"fareOption\": \"STANDARD\", \"travelerType\": ' \\\n                  '\"ADULT\", ' \\\n                  '\"price\": { \"currency\": \"EUR\", \"total\": \"123.02\", \"base\": \"92.00\" }, \"fareDetailsBySegment\": [ { ' \\\n                  '\"segmentId\": ' \\\n                  '\"4\", \"cabin\": \"ECONOMY\", \"fareBasis\": \"SDNNEOB2\", \"brandedFare\": \"NOBAG\", \"class\": \"S\", ' \\\n                  '\"includedCheckedBags\": { ' \\\n                  '\"quantity\": 0 } } ] } ] } ], \"payments\": [ { \"brand\": \"VISA_IXARIS\", \"binNumber\": 123456, ' \\\n                  '\"flightOfferIds\": [ 1 ' \\\n                  '] } ] } } '\n\n    body = json.loads(json_string)\n    response = amadeus.shopping.flight_offers.upselling.post(body)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_AMADEUS_API_KEY\",\n  clientSecret: \"YOUR_AMADEUS_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Search flights from LON to DEL\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"LON\",\n      destinationLocationCode: \"DEL\",\n      departureDate: \"2023-06-01\",\n      returnDate: \"2023-06-30\",\n      adults: \"1\",\n    });\n\n    //then Get branded fares available from the first offer\n    const response = await amadeus.shopping.flightOffers.upselling.post({\n      data: {\n        type: \"flight-offers-upselling\",\n        flightOffers: [flightOffersResponse.data[0]],\n        payments: [\n          {\n            brand: \"VISA_IXARIS\",\n            binNumber: 123456,\n            flightOfferIds: [1],\n          },\n        ],\n      },\n    });\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\n\npublic class BrandedFaresUpsell {\n\n  public static void main(String[] args) throws ResponseException {\n\n        Amadeus amadeus = Amadeus\n            .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n            .build();\n\n        FlightOfferSearch[] flightOffersSearches = amadeus.shopping.flightOffersSearch.get(\n            Params.with(\"originLocationCode\", \"SYD\")\n                    .and(\"destinationLocationCode\", \"BKK\")\n                    .and(\"departureDate\", \"2023-11-01\")\n                    .and(\"returnDate\", \"2023-11-08\")\n                    .and(\"adults\", 1)\n                    .and(\"max\", 2));\n\n        FlightOfferSearch[] upsellFlightOffers = amadeus.shopping.flightOffers.upselling.post(flightOffersSearches[0]);\n\n        if (upsellFlightOffers[0].getResponse().getStatusCode() != 200) {\n            System.out.println(\"Wrong status code: \" + upsellFlightOffers[0].getResponse().getStatusCode());\n            System.exit(-1);\n        }\n\n        System.out.println(upsellFlightOffers[0]);\n    }\n}\n</code></pre>"},{"location":"examples/code-example/#seatmap-display","title":"SeatMap Display","text":"<p>GET</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Retrieve the seat map of a flight present in an order\n    '''\n    response = amadeus.shopping.seatmaps.get(flightorderId='eJzTd9cPDPMwcooAAAtXAmE=')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Returns all the seat maps of a given order\n    const response = await amadeus.shopping.seatmaps.get({\n      \"flight-orderId\": \"eJzTd9cPDPMwcooAAAtXAmE=\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.SeatMap;\n\npublic class SeatMaps {\n    public static void main(String[] args) throws ResponseException {\n\n        Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n        SeatMap[] seatmap = amadeus.shopping.seatMaps.get(Params\n                .with(\"flight-orderId\", \"eJzTd9cPDPMwcooAAAtXAmE=\"));\n        if(seatmap.length != 0){\n          if (seatmap[0].getResponse().getStatusCode() != 200) {\n            System.out.println(\"Wrong status code: \" + seatmap[0].getResponse().getStatusCode());\n            System.exit(-1);\n          }\n          System.out.println(seatmap[0]);\n        }\n        else {\n          System.out.println(\"No booking found for this flight-orderId\");\n          System.exit(-1);\n        }\n     }\n}\n</code></pre> <p>POST </p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Retrieve the seat map of a given flight offer \n    '''\n    body = amadeus.shopping.flight_offers_search.get(originLocationCode='MAD',\n                                                     destinationLocationCode='NYC',\n                                                     departureDate='2022-11-01',\n                                                     adults=1,\n                                                     max=1).result\n    response = amadeus.shopping.seatmaps.post(body)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Returns all the seat maps of a given flightOffer\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"SYD\",\n      destinationLocationCode: \"BKK\",\n      departureDate: \"2022-08-01\",\n      adults: \"2\",\n    });\n\n    const response = await amadeus.shopping.seatmaps.post({\n      data: [flightOffersResponse.data[0]],\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\nimport com.amadeus.resources.SeatMap;\nimport com.google.gson.JsonObject;\n\npublic class SeatMaps {\n    public static void main(String[] args) throws ResponseException {\n\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n      FlightOfferSearch[] flightOffers = amadeus.shopping.flightOffersSearch.get(\n                    Params.with(\"originLocationCode\", \"NYC\")\n                            .and(\"destinationLocationCode\", \"MAD\")\n                            .and(\"departureDate\", \"2022-11-01\")\n                            .and(\"returnDate\", \"2022-11-09\")\n                            .and(\"max\", \"1\")\n                            .and(\"adults\", 1));\n\n      JsonObject body = flightOffers[0].getResponse().getResult();\n      SeatMap[] seatmap = amadeus.shopping.seatMaps.post(body);\n\n      if (seatmap[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + seatmap[0].getResponse().getStatusCode());\n        System.exit(-1);\n      }\n\n      System.out.println(seatmap[0]);\n    }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-create-orders","title":"Flight Create Orders","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntraveler = {\n    'id': '1',\n    'dateOfBirth': '1982-01-16',\n    'name': {\n        'firstName': 'JORGE',\n        'lastName': 'GONZALES'\n    },\n    'gender': 'MALE',\n    'contact': {\n        'emailAddress': 'jorge.gonzales833@telefonica.es',\n        'phones': [{\n            'deviceType': 'MOBILE',\n            'countryCallingCode': '34',\n            'number': '480080076'\n        }]\n    },\n    'documents': [{\n        'documentType': 'PASSPORT',\n        'birthPlace': 'Madrid',\n        'issuanceLocation': 'Madrid',\n        'issuanceDate': '2015-04-14',\n        'number': '00000000',\n        'expiryDate': '2025-04-14',\n        'issuanceCountry': 'ES',\n        'validityCountry': 'ES',\n        'nationality': 'ES',\n        'holder': True\n    }]\n}\n\ntry:\n    # Flight Offers Search to search for flights from MAD to ATH\n    flight_search = amadeus.shopping.flight_offers_search.get(originLocationCode='MAD',\n                                                              destinationLocationCode='ATH',\n                                                              departureDate='2022-12-01',\n                                                              adults=1).data\n\n    # Flight Offers Price to confirm the price of the chosen flight\n    price_confirm = amadeus.shopping.flight_offers.pricing.post(\n        flight_search[0]).data\n\n    # Flight Create Orders to book the flight\n    booked_flight = amadeus.booking.flight_orders.post(\n        flight_search[0], traveler).data\n\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Book a flight from MAD to ATH on 2022-08-01\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"MAD\",\n      destinationLocationCode: \"ATH\",\n      departureDate: \"2022-08-01\",\n      adults: \"1\",\n    });\n\n    const pricingResponse = await amadeus.shopping.flightOffers.pricing.post({\n      data: {\n        type: \"flight-offers-pricing\",\n        flightOffers: [flightOffersResponse.data[0]],\n      },\n    });\n\n    const response = await amadeus.booking.flightOrders.post({\n      data: {\n        type: \"flight-order\",\n        flightOffers: [pricingResponse.data.flightOffers[0]],\n        travelers: [\n          {\n            id: \"1\",\n            dateOfBirth: \"1982-01-16\",\n            name: {\n              firstName: \"JORGE\",\n              lastName: \"GONZALES\",\n            },\n            gender: \"MALE\",\n            contact: {\n              emailAddress: \"jorge.gonzales833@telefonica.es\",\n              phones: [\n                {\n                  deviceType: \"MOBILE\",\n                  countryCallingCode: \"34\",\n                  number: \"480080076\",\n                },\n              ],\n            },\n            documents: [\n              {\n                documentType: \"PASSPORT\",\n                birthPlace: \"Madrid\",\n                issuanceLocation: \"Madrid\",\n                issuanceDate: \"2015-04-14\",\n                number: \"00000000\",\n                expiryDate: \"2025-04-14\",\n                issuanceCountry: \"ES\",\n                validityCountry: \"ES\",\n                nationality: \"ES\",\n                holder: true,\n              },\n            ],\n          },\n        ],\n      },\n    });\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\nimport com.amadeus.resources.FlightPrice;\nimport com.amadeus.resources.FlightOrder;\nimport com.amadeus.resources.FlightOrder.Traveler;\nimport com.amadeus.resources.FlightOrder.Document.DocumentType;\nimport com.amadeus.resources.FlightOrder.Phone.DeviceType;\nimport com.amadeus.resources.FlightOrder.Name;\nimport com.amadeus.resources.FlightOrder.Phone;\nimport com.amadeus.resources.FlightOrder.Contact;\nimport com.amadeus.resources.FlightOrder.Document;\n\npublic class FlightSearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n            .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n            .build();\n\n    Traveler traveler = new Traveler();\n\n    traveler.setId(\"1\");\n    traveler.setDateOfBirth(\"2000-04-14\");\n    traveler.setName(new Name(\"JORGE\", \"GONZALES\"));\n\n    Phone[] phone = new Phone[1];\n    phone[0] = new Phone();\n    phone[0].setCountryCallingCode(\"33\");\n    phone[0].setNumber(\"675426222\");\n    phone[0].setDeviceType(DeviceType.MOBILE);\n\n    Contact contact = new Contact();\n    contact.setPhones(phone);\n    traveler.setContact(contact);\n\n    Document[] document = new Document[1];\n    document[0] = new Document();\n    document[0].setDocumentType(DocumentType.PASSPORT);\n    document[0].setNumber(\"480080076\");\n    document[0].setExpiryDate(\"2023-10-11\");\n    document[0].setIssuanceCountry(\"ES\");\n    document[0].setNationality(\"ES\");\n    document[0].setHolder(true);\n    traveler.setDocuments(document);\n\n    Traveler[] travelerArray = new Traveler[1];\n    travelerArray[0] = traveler;\n    System.out.println(travelerArray[0]);\n\n    FlightOfferSearch[] flightOffersSearches = amadeus.shopping.flightOffersSearch.get(\n            Params.with(\"originLocationCode\", \"MAD\")\n                    .and(\"destinationLocationCode\", \"ATH\")\n                    .and(\"departureDate\", \"2023-08-01\")\n                    .and(\"returnDate\", \"2023-08-08\")\n                    .and(\"adults\", 1)\n                    .and(\"max\", 3));\n\n    // We price the 2nd flight of the list to confirm the price and the availability\n    FlightPrice flightPricing = amadeus.shopping.flightOffersSearch.pricing.post(\n            flightOffersSearches[0]);\n\n    // We book the flight previously priced\n    FlightOrder order = amadeus.booking.flightOrders.post(flightPricing, travelerArray);\n    System.out.println(order.getResponse());\n\n    // Return CO2 Emission of the previously booked flight\n    int weight = order.getFlightOffers()[0].getItineraries(\n    )[0].getSegments()[0].getCo2Emissions()[0].getWeight();\n    String unit = order.getFlightOffers()[0].getItineraries(\n    )[0].getSegments()[0].getCo2Emissions()[0].getWeightUnit();\n\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-order-management","title":"Flight Order Management","text":"<p>GET</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    # Retrieve the flight order based on it's id\n    '''\n    response = amadeus.booking.flight_order('MlpZVkFMfFdBVFNPTnwyMDE1LTExLTAy').get()\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Book a flight from MAD to ATH on 2020-08-01 and then retrieve it\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"MAD\",\n      destinationLocationCode: \"ATH\",\n      departureDate: \"2020-08-01\",\n      adults: \"1\",\n    });\n\n    const pricingResponse = await amadeus.shopping.flightOffers.pricing.post({\n      data: {\n        type: \"flight-offers-pricing\",\n        flightOffers: [flightOffersResponse.data[0]],\n      },\n    });\n\n    const flightOrdersResponse = await amadeus.booking.flightOrders.post({\n      data: {\n        type: \"flight-order\",\n        flightOffers: [pricingResponse.data.flightOffers[0]],\n        travelers: [\n          {\n            id: \"1\",\n            dateOfBirth: \"1982-01-16\",\n            name: {\n              firstName: \"JORGE\",\n              lastName: \"GONZALES\",\n            },\n            gender: \"MALE\",\n            contact: {\n              emailAddress: \"jorge.gonzales833@telefonica.es\",\n              phones: [\n                {\n                  deviceType: \"MOBILE\",\n                  countryCallingCode: \"34\",\n                  number: \"480080076\",\n                },\n              ],\n            },\n            documents: [\n              {\n                documentType: \"PASSPORT\",\n                birthPlace: \"Madrid\",\n                issuanceLocation: \"Madrid\",\n                issuanceDate: \"2015-04-14\",\n                number: \"00000000\",\n                expiryDate: \"2025-04-14\",\n                issuanceCountry: \"ES\",\n                validityCountry: \"ES\",\n                nationality: \"ES\",\n                holder: true,\n              },\n            ],\n          },\n        ],\n      },\n    });\n\n    const response = await amadeus.booking\n      .flightOrder(flightOrdersResponse.data.id)\n      .get();\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.booking.FlightOrder;\nimport com.amadeus.exceptions.ResponseException;\n\npublic class FlightOrderManagement {\n    public static void main(String[] args) throws ResponseException {\n\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMAEUS_API_SECRET\")\n              .build();\n\n      com.amadeus.resources.FlightOrder order = amadeus.booking.flightOrder(\"MlpZVkFMfFdBVFNPTnwyMDE1LTExLTAy\").get();\n\n      if (order.getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + order.getResponse().getStatusCode());\n        System.exit(-1);\n      }\n\n      System.out.println(order);\n     }\n}\n</code></pre> <p>DELETE </p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    # Delete a given flight order based on it's id\n    '''\n    response = amadeus.booking.flight_order('MlpZVkFMfFdBVFNPTnwyMDE1LTExLTAy').delete()\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Book a flight from MAD to ATH on 2020-08-01, retrieve it and then delete it\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"MAD\",\n      destinationLocationCode: \"ATH\",\n      departureDate: \"2020-08-01\",\n      adults: \"1\",\n    });\n\n    const pricingResponse = await amadeus.shopping.flightOffers.pricing.post({\n      data: {\n        type: \"flight-offers-pricing\",\n        flightOffers: [flightOffersResponse.data[0]],\n      },\n    });\n\n    const flightOrdersResponse = await amadeus.booking.flightOrders.post({\n      data: {\n        type: \"flight-order\",\n        flightOffers: [pricingResponse.data.flightOffers[0]],\n        travelers: [\n          {\n            id: \"1\",\n            dateOfBirth: \"1982-01-16\",\n            name: {\n              firstName: \"JORGE\",\n              lastName: \"GONZALES\",\n            },\n            gender: \"MALE\",\n            contact: {\n              emailAddress: \"jorge.gonzales833@telefonica.es\",\n              phones: [\n                {\n                  deviceType: \"MOBILE\",\n                  countryCallingCode: \"34\",\n                  number: \"480080076\",\n                },\n              ],\n            },\n            documents: [\n              {\n                documentType: \"PASSPORT\",\n                birthPlace: \"Madrid\",\n                issuanceLocation: \"Madrid\",\n                issuanceDate: \"2015-04-14\",\n                number: \"00000000\",\n                expiryDate: \"2025-04-14\",\n                issuanceCountry: \"ES\",\n                validityCountry: \"ES\",\n                nationality: \"ES\",\n                holder: true,\n              },\n            ],\n          },\n        ],\n      },\n    });\n\n    const flightOrderResponse = await amadeus.booking\n      .flightOrder(flightOrdersResponse.data.id)\n      .get();\n\n    const response = await amadeus.booking\n      .flightOrder(flightOrderResponse.data.id)\n      .delete();\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.booking.FlightOrder;\nimport com.amadeus.exceptions.ResponseException;\n\npublic class FlightOrderManagement {\n    public static void main(String[] args) throws ResponseException {\n\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS)API_SECRET\")\n              .build();\n\n      com.amadeus.resources.FlightOrder order = amadeus.booking.flightOrder(\"MlpZVkFMfFdBVFNPTnwyMDE1LTExLTAy\").delete();\n\n      if (order.getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + order.getResponse().getStatusCode());\n        System.exit(-1);\n      }\n\n      System.out.println(order);\n     }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-price-analysis","title":"Flight Price Analysis","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Returns price metrics of a given itinerary\n    '''\n    response = amadeus.analytics.itinerary_price_metrics.get(originIataCode='MAD',\n                                                             destinationIataCode='CDG',\n                                                             departureDate='2022-03-21')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Am I getting a good deal on this flight?\n    const response = await amadeus.analytics.itineraryPriceMetrics.get({\n      originIataCode: \"MAD\",\n      destinationIataCode: \"CDG\",\n      departureDate: \"2022-01-13\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.ItineraryPriceMetric;\n\npublic class FlightPriceAnalysis {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_API_ID\",\"YOUR_API_SECRET\")\n        .build();\n\n    // What's the flight price analysis from MAD to CDG\n    ItineraryPriceMetric[] metrics = amadeus.analytics.itineraryPriceMetrics.get(Params\n        .with(\"originIataCode\", \"MAD\")\n        .and(\"destinationIataCode\", \"CDG\")\n        .and(\"departureDate\", \"2022-03-21\"));\n\n    if (metrics[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + metrics[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(metrics[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-delay-prediction","title":"Flight Delay Prediction","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Will there be a delay from BRU to FRA? If so how much delay?\n    '''\n    response = amadeus.travel.predictions.flight_delay.get(originLocationCode='NCE', destinationLocationCode='IST',\n                                                           departureDate='2022-08-01', departureTime='18:20:00',\n                                                           arrivalDate='2022-08-01', arrivalTime='22:15:00',\n                                                           aircraftCode='321', carrierCode='TK',\n                                                           flightNumber='1816', duration='PT31H10M')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Will there be a delay from BRU to FRA? If so how much delay?\n    const response = await amadeus.travel.predictions.flightDelay.get({\n      originLocationCode: \"NCE\",\n      destinationLocationCode: \"IST\",\n      departureDate: \"2022-08-01\",\n      departureTime: \"18:20:00\",\n      arrivalDate: \"2022-08-01\",\n      arrivalTime: \"22:15:00\",\n      aircraftCode: \"321\",\n      carrierCode: \"TK\",\n      flightNumber: \"1816\",\n      duration: \"PT31H10M\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Delay;\n\npublic class FlightDelayPrediction {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    Delay[] flightDelay = amadeus.travel.predictions.flightDelay.get(Params\n    .with(\"originLocationCode\", \"NCE\")\n    .and(\"destinationLocationCode\", \"IST\")\n    .and(\"departureDate\", \"2022-08-01\")\n    .and(\"departureTime\", \"18:20:00\")\n    .and(\"arrivalDate\", \"2022-08-01\")\n    .and(\"arrivalTime\", \"22:15:00\")\n    .and(\"aircraftCode\", \"321\")\n    .and(\"carrierCode\", \"TK\")\n    .and(\"flightNumber\", \"1816\")\n    .and(\"duration\", \"PT31H10M\"));\n\n    if (flightDelay[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightDelay[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightDelay[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#airport-on-time-performance","title":"Airport On Time Performance","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Will there be a delay in the JFK airport on the 1st of December?\n    '''\n    response = amadeus.airport.predictions.on_time.get(\n        airportCode='JFK', date='2021-12-01')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Will there be a delay in the JFK airport on the 1st of September?\n    const response = await amadeus.airport.predictions.onTime.get({\n      airportCode: \"JFK\",\n      date: \"2022-09-01\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.OnTime;\n\npublic class AirportOnTime {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    OnTime onTime = amadeus.airport.predictions.onTime.get(Params\n        .with(\"airportCode\", \"JFK\")\n        .and(\"date\", \"2022-09-01\"));\n\n    if(onTime.getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + onTime.getResponse().getStatusCode());\n        System.exit(-1);\n    }\n    System.out.println(onTime);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-choice-prediction","title":"Flight Choice Prediction","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Find the probability of the flight MAD to NYC to be chosen\n    '''\n    body = amadeus.shopping.flight_offers_search.get(originLocationCode='MAD',\n                                                     destinationLocationCode='NYC',\n                                                     departureDate='2022-11-01',\n                                                     returnDate='2022-11-09',\n                                                     adults=1).result\n    response = amadeus.shopping.flight_offers.prediction.post(body)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    const flightOffersResponse = await amadeus.shopping.flightOffersSearch.get({\n      originLocationCode: \"SYD\",\n      destinationLocationCode: \"BKK\",\n      departureDate: \"2022-08-01\",\n      adults: \"2\",\n    });\n    const response = await amadeus.shopping.flightOffers.prediction.post(\n      flightOffersResponse\n    );\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.FlightOfferSearch;\nimport com.google.gson.JsonObject;\n\npublic class FlightChoicePrediction {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    FlightOfferSearch[] flightOffers = amadeus.shopping.flightOffersSearch.get(\n                  Params.with(\"originLocationCode\", \"MAD\")\n                          .and(\"destinationLocationCode\", \"NYC\")\n                          .and(\"departureDate\", \"2022-11-01\")\n                          .and(\"returnDate\", \"2022-11-09\")\n                          .and(\"adults\", 1));\n\n    JsonObject body = flightOffers[0].getResponse().getResult();\n    FlightOfferSearch[] flightOffersPrediction = amadeus.shopping.flightOffers.prediction.post(body);\n\n    if (flightOffersPrediction[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightOffersPrediction[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightOffersPrediction[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#on-demand-flight-status","title":"On Demand Flight Status","text":"PythonNodeJava <pre><code>from amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Returns flight status of a given flight\n    '''\n    response = amadeus.schedule.flights.get(carrierCode='AZ',\n                                            flightNumber='319',\n                                            scheduledDepartureDate='2022-03-13')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What's the current status of my flight?\n    const response = await amadeus.schedule.flights.get({\n      carrierCode: \"AZ\",\n      flightNumber: \"319\",\n      scheduledDepartureDate: \"2022-03-13\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.Response;\nimport com.amadeus.resources.DatedFlight;\n\npublic class OnDemandFlightStatus {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Returns the status of a given flight\n    DatedFlight[] flightStatus = amadeus.schedule.flights.get(Params\n        .with(\"flightNumber\", \"319\")\n        .and(\"carrierCode\", \"AZ\")\n        .and(\"scheduledDepartureDate\", \"2022-03-13\"));\n\n   if (flightStatus[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + flightStatus[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(flightStatus[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-most-traveled-destinations","title":"Flight Most Traveled Destinations","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Where were people flying to from Madrid in the January 2017?\n    '''\n    response = amadeus.travel.analytics.air_traffic.traveled.get(originCityCode='MAD', period='2017-01')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Where were people flying to from Madrid in the January 2017?\n    const response = await amadeus.travel.analytics.airTraffic.traveled.get({\n      originCityCode: \"MAD\",\n      period: \"2017-01\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.AirTraffic;\n\npublic class FlightMostTraveledDestinations {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Flight Most Traveled Destinations\n    AirTraffic[] airTraffics = amadeus.travel.analytics.airTraffic.traveled.get(Params\n      .with(\"originCityCode\", \"MAD\")\n      .and(\"period\", \"2017-01\"));\n\n    if (airTraffics[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + airTraffics[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(airTraffics[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-busiest-traveling-period","title":"Flight Busiest Traveling Period","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What were the busiest months for Madrid in 2022?\n    '''\n    response = amadeus.travel.analytics.air_traffic.busiest_period.get(\n        cityCode='MAD', period='2017', direction='ARRIVING')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What were the busiest months for Madrid in 2017?\n    const response =\n      await amadeus.travel.analytics.airTraffic.busiestPeriod.get({\n        cityCode: \"MAD\",\n        period: \"2017\",\n        direction: Amadeus.direction.arriving,\n      });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Period;\n\npublic class FlightBusiestPeriod {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Flight Busiest Traveling Period\n    Period[] busiestPeriods = amadeus.travel.analytics.airTraffic.busiestPeriod.get(Params\n      .with(\"cityCode\", \"MAD\")\n      .and(\"period\", \"2017\")\n      .and(\"direction\", BusiestPeriod.ARRIVING));\n\n    if(busiestPeriods[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + (busiestPeriods[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n    System.out.println((busiestPeriods[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-most-booked-destinations","title":"Flight Most Booked Destinations","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Where were people flying to from Madrid in the August 2017?\n    '''\n    response = amadeus.travel.analytics.air_traffic.booked.get(originCityCode='MAD', period='2017-08')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Where were people flying to from Madrid in the August 2017?\n    const response = await amadeus.travel.analytics.airTraffic.booked.get({\n      originCityCode: \"MAD\",\n      period: \"2017-08\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.AirTraffic;\n\npublic class FlightMostBookedDestinations {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Flight Most Booked Destinations\n    AirTraffic[] airTraffics = amadeus.travel.analytics.airTraffic.booked.get(Params\n      .with(\"originCityCode\", \"MAD\")\n      .and(\"period\", \"2017-08\"));\n\n    if (airTraffics[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + airTraffics[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(airTraffics[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#flight-checkin-links","title":"Flight CheckIn Links","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What is the URL to my online check-in?\n    '''\n    response = amadeus.reference_data.urls.checkin_links.get(airlineCode='BA')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What is the URL to my online check-in?\n    const response = await amadeus.referenceData.urls.checkinLinks.get({\n      airlineCode: \"BA\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.CheckinLink;\n\npublic class FlightCheckinLinks {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    CheckinLink[] checkinLinks = amadeus.referenceData.urls.checkinLinks.get(Params\n      .with(\"airlineCode\", \"BA\"));\n\n    if(checkinLinks[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + (checkinLinks[0].getResponse().getStatusCode()));\n        System.exit(-1);\n    }\n\n    System.out.println((checkinLinks[0]));\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#airport-nearest-relevant","title":"Airport Nearest Relevant","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What relevant airports are there around a specific location?\n    '''\n    response = amadeus.reference_data.locations.airports.get(longitude=49.000, latitude=2.55)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What relevant airports are there around a specific location?\n    const response = await amadeus.referenceData.locations.airports.get({\n      longitude: 2.55,\n      latitude: 49.0,\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Location;\n\npublic class AirportNearest {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_API_ID\",\"YOUR_API_SECRET\")\n        .build();\n\n    // Airport Nearest Relevant (for London)\n    Location[] locations = amadeus.referenceData.locations.airports.get(Params\n      .with(\"latitude\", 49.0000)\n      .and(\"longitude\", 2.55));\n\n    if(locations[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + locations[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n    System.out.println(locations[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#airport-city-search","title":"Airport &amp; City Search","text":"<p>By keyword</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\nfrom amadeus import Location\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Which cities or airports start with 'r'?\n    '''\n    response = amadeus.reference_data.locations.get(keyword='r',\n                                                    subType=Location.ANY)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_KEY\",\n});\n\nasync function main() {\n  try {\n    // Retrieve information about the LHR airport?\n    const response = await amadeus.referenceData.location(\"ALHR\").get();\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Location;\n\npublic class AirportCitySearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Get a specific city or airport based on its id\n    Location location = amadeus.referenceData\n      .location(\"ALHR\").get();\n\n    if(location.getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + location.getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(location);\n  }\n}\n</code></pre> <p>By Id</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\nfrom amadeus import Location\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Which cities or airports start with 'r'?\n    '''\n    response = amadeus.reference_data.locations.get(keyword='r',\n                                                    subType=Location.ANY)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Which cities or airports start with \u2019r'?\n    const response = await amadeus.referenceData.locations.get({\n      keyword: \"r\",\n      subType: Amadeus.location.any,\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.referenceData.Locations;\nimport com.amadeus.resources.Location;\n\npublic class AirportCitySearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Airport &amp; City Search (autocomplete)\n    // Find all the cities and airports starting by the keyword 'LON'\n    Location[] locations = amadeus.referenceData.locations.get(Params\n      .with(\"keyword\", \"LON\")\n      .and(\"subType\", Locations.ANY));\n\n    if(locations[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + locations[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n    System.out.println(locations[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#airline-code-lookup","title":"Airline Code Lookup","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What's the airline name for the IATA code BA?\n    '''\n    response = amadeus.reference_data.airlines.get(airlineCodes='BA')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What's the airline name for the IATA code BA?\n    const response = await amadeus.referenceData.airlines.get({\n      airlineCodes: \"BA\",\n    });\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Airline;\n\npublic class AirlineCodeLookup {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    Airline[] airlines = amadeus.referenceData.airlines.get(Params\n      .with(\"airlineCodes\", \"BA\"));\n\n    if (airlines[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + airlines[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(airlines);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#hotel","title":"Hotel","text":""},{"location":"examples/code-example/#hotel-list","title":"Hotel List","text":"<p>By geolocation</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Get list of hotels by a geocode\n    '''\n    response = amadeus.reference_data.locations.hotels.by_geocode.get(longitude=2.160873,latitude=41.397158)\n\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // List of hotels in Paris\n    const response = await amadeus.referenceData.locations.hotels.byGeocode.get(\n      {\n        latitude: 48.83152,\n        longitude: 2.24691,\n      }\n    );\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Hotel;\n\npublic class HotelList {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    Hotel[] hotels = amadeus.referenceData.locations.hotels.byGeocode.get(\n      Params.with(\"latitude\", 48.83152)\n        .and(\"longitude\", 2.24691));\n\n    if (hotels[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + hotels[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(hotels[0]);\n  }\n}\n</code></pre> <p>By city</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Get list of hotels by city code\n    '''\n    response = amadeus.reference_data.locations.hotels.by_city.get(cityCode='PAR')\n\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // List of hotels in Paris\n    const response = await amadeus.referenceData.locations.hotels.byCity.get({\n      cityCode: \"PAR\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Hotel;\n\npublic class HotelList {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    Hotel[] hotels = amadeus.referenceData.locations.hotels.byCity.get(\n      Params.with(\"cityCode\", \"PAR\"));\n\n    if (hotels[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + hotels[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(hotels[0]);\n  }\n}\n</code></pre> <p>By hotel</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Get list of hotels by hotel id\n    '''\n    response = amadeus.reference_data.locations.hotels.by_hotels.get(hotelIds='ADPAR001')\n\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Get Marriot Hotel information in Paris\n    const response = await amadeus.referenceData.locations.hotels.byHotels.get({\n      hotelIds: \"ARPARARA\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Hotel;\n\npublic class HotelList {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    Hotel[] hotels = amadeus.referenceData.locations.hotels.byHotels.get(\n      Params.with(\"hotelIds\", \"ARPARARA\"));\n\n    if (hotels[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + hotels[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(hotels[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#hotel-search","title":"Hotel Search","text":"<p>By hotel</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    # Get list of available offers in specific hotels by hotel ids\n    hotels_by_city = amadeus.shopping.hotel_offers_search.get(\n        hotelIds='RTPAR001', adults='2', checkInDate='2023-10-01', checkOutDate='2023-10-04')\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Get list of available offers in specific hotels by hotel ids\n    const response = await amadeus.shopping.hotelOffersSearch.get({\n      hotelIds: \"RTPAR001\",\n      adults: \"2\",\n      checkInDate: \"2023-10-10\",\n      checkOutDate: \"2023-10-12\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.HotelOfferSearch;\n\npublic class HotelSearch {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    HotelOfferSearch[] offers = amadeus.shopping.hotelOffersSearch.get(\n      Params.with(\"hotelIds\", \"RTPAR001\")\n        .and(\"adults\", 2)\n    );\n\n    if (offers[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + offers[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(offers[0]);\n  }\n}\n</code></pre> <p>By offer</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    # Get list of Hotels by city code\n    hotels_by_city = amadeus.shopping.hotel_offer_search('63A93695B58821ABB0EC2B33FE9FAB24D72BF34B1BD7D707293763D8D9378FC3').get()\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Check offer conditions of a specific offer id\n    const response = await amadeus.shopping\n      .hotelOfferSearch(\n        \"63A93695B58821ABB0EC2B33FE9FAB24D72BF34B1BD7D707293763D8D9378FC3\"\n      )\n      .get();\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.HotelOfferSearch;\n\npublic class HotelSearch {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    HotelOfferSearch offer = amadeus.shopping.hotelOfferSearch(\n        \"0W7UU1NT9B\")\n      .get();\n\n    if (offer.getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + offer.getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(offer);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#hotel-booking","title":"Hotel Booking","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    # Hotel List API to get list of Hotels by city code\n    hotels_by_city = amadeus.reference_data.locations.hotels.by_city.get(cityCode='DEL')\n    hotelIds = [hotel.get('hotelId') for hotel in hotels_by_city.data[:5]]\n\n    # Hotel Search API to get list of offers for a specific hotel\n    hotel_offers = amadeus.shopping.hotel_offers_search.get(\n        hotelIds=hotelIds, adults='2', checkInDate='2023-10-01', checkOutDate='2023-10-04')\n    offerId = hotel_offers.data[0]['offers'][0]['id']\n\n    guests = [{'id': 1, 'name': {'title': 'MR', 'firstName': 'BOB', 'lastName': 'SMITH'},\n               'contact': {'phone': '+33679278416', 'email': 'bob.smith@email.com'}}]\n    payments = {'id': 1, 'method': 'creditCard', 'card': {\n        'vendorCode': 'VI', 'cardNumber': '4151289722471370', 'expiryDate': '2027-08'}}\n\n    # Hotel booking API to book the offer \n    hotel_booking = amadeus.booking.hotel_bookings.post(\n        offerId, guests, payments)\n    print(hotel_booking.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Book a hotel in DEL for 2023-10-10 to 2023-10-12\n\n    // 1. Hotel List API to get the list of hotels\n    const hotelsList = await amadeus.referenceData.locations.hotels.byCity.get({\n      cityCode: \"LON\",\n    });\n\n    // 2. Hotel Search API to get the price and offer id\n    const pricingResponse = await amadeus.shopping.hotelOffersSearch.get({\n      hotelIds: hotelsList.data[0].hotelId,\n      adults: 1,\n      checkInDate: \"2023-10-10\",\n      checkOutDate: \"2023-10-12\",\n    });\n\n    // Finally, Hotel Booking API to book the offer\n    const response = await amadeus.booking.hotelBookings.post({\n      data: {\n        offerId: pricingResponse.data[0].offers[0].id,\n        guests: [\n          {\n            id: 1,\n            name: {\n              title: \"MR\",\n              firstName: \"BOB\",\n              lastName: \"SMITH\",\n            },\n            contact: {\n              phone: \"+33679278416\",\n              email: \"bob.smith@email.com\",\n            },\n          },\n        ],\n        payments: [\n          {\n            id: 1,\n            method: \"creditCard\",\n            card: {\n              vendorCode: \"VI\",\n              cardNumber: \"4151289722471370\",\n              expiryDate: \"2022-08\",\n            },\n          },\n        ],\n      },\n    });\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.HotelBooking;\n\npublic class HotelBookings {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMAEUS_API_SECRET\")\n        .build();\n\n    String body = \"{\\\"data\\\"\"\n        + \":{\\\"offerId\\\":\\\"2F5B1C3B215FA11FD5A44BE210315B18FF91BDA2FEDDD879907A3798F41D1C28\\\"\"\n        + \",\\\"guests\\\":[{\\\"id\\\":1,\\\"name\\\":{\\\"title\\\":\\\"MR\\\",\\\"firstName\\\":\\\"BOB\\\",\"\n        + \"\\\"lastName\\\" :\\\"SMITH\\\"},\\\"contact\\\":{\\\"phone\\\":\\\"+33679278416\\\",\\\"\"\n        + \"email\\\":\\\"bob.smith@email.com\\\"}}],\\\"\"\n        + \"payments\\\":[{\\\"id\\\":1,\\\"method\\\":\\\"creditCard\\\",\\\"\"\n        + \"card\\\":{\\\"vendorCode\\\":\\\"VI\\\",\\\"cardNumber\\\"\"\n        + \":\\\"4151289722471370\\\",\\\"expiryDate\\\":\\\"2022-08\\\"}}]}}\";\n\n    HotelBooking[] hotel = amadeus.booking.hotelBookings.post(body);\n\n    if (hotel[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + hotel[0].getResponse().getStatusCode());\n\n        System.exit(-1);\n    }\n\n    System.out.println(hotel[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#hotel-ratings","title":"Hotel Ratings","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What travelers think about this hotel?\n    '''\n    response = amadeus.e_reputation.hotel_sentiments.get(hotelIds = 'ADNYCCTB')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What travelers think about this hotel?\n    const response = await amadeus.eReputation.hotelSentiments.get({\n      hotelIds: \"ADNYCCTB\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.HotelSentiment;\n\npublic class HotelRatings {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMAEUS_API_SECRET\")\n        .build();\n\n    // Hotel Ratings / Sentiments\n    HotelSentiment[] hotelSentiments = amadeus.ereputation.hotelSentiments.get(Params.with(\"hotelIds\", \"ADNYCCTB\"));\n\n    if (hotelSentiments[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + hotelSentiments[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(hotelSentiments[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#hotel-name-autocomplete","title":"Hotel Name Autocomplete","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom ast import keyword\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Hotel name autocomplete for keyword 'PARI' using HOTEL_GDS category of search\n    '''\n    response = amadeus.reference_data.locations.hotel.get(keyword='PARI', subType=[Hotel.HOTEL_GDS])\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n// Or `const amadeus = new Amadeus()` if the environment variables are set\n\nasync function main() {\n  try {\n    // Hotel name autocomplete for keyword 'PARI' using  HOTEL_GDS category of search\n    const response = await amadeus.referenceData.locations.hotel.get({\n      keyword: \"PARI\",\n      subType: \"HOTEL_GDS\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.TripDetail;\n\n// Hotel name autocomplete for keyword 'PARI' using  HOTEL_GDS category of search\npublic class HotelNameAutocomplete {\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Set query parameters\n    Params params = Params\n        .with(\"keyword\", \"PARI\")\n        .and(\"subType\", \"HOTEL_GDS\");\n\n    // Run the query\n    Hotel[] hotels = amadeus.referenceData.locations.hotel.get(params);\n\n    if (hotels.getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + hotels.getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    Arrays.stream(hotels)\n        .map(Hotel::getName)\n        .forEach(System.out::println);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#destination-content","title":"Destination Content","text":""},{"location":"examples/code-example/#points-of-interest","title":"Points of Interest","text":"<p>By geolocation</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What are the popular places in Barcelona (based on a geo location and a radius)\n    '''\n    response = amadeus.reference_data.locations.points_of_interest.get(latitude=41.397158, longitude=2.160873)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What are the popular places in Barcelona (based on a geo location and a radius)\n    const response = await amadeus.referenceData.locations.pointsOfInterest.get(\n      {\n        latitude: 41.397158,\n        longitude: 2.160873,\n      }\n    );\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.PointOfInterest;\n\npublic class PointsOfInterest {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_API_ID\",\"YOUR_API_SECRET\")\n        .build();\n\n    // What are the popular places in Barcelona (based on a geolocation)\n    PointOfInterest[] pointsOfInterest = amadeus.referenceData.locations.pointsOfInterest.get(Params\n       .with(\"latitude\", \"41.39715\")\n       .and(\"longitude\", \"2.160873\"));\n\n    if (pointsOfInterest[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + pointsOfInterest[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(pointsOfInterest[0]);\n  }\n}\n</code></pre> <p>By square</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What are the popular places in Barcelona? (based on a square)\n    '''\n    response = amadeus.reference_data.locations.points_of_interest.by_square.get(north=41.397158,\n                                                                                 west=2.160873,\n                                                                                 south=41.394582,\n                                                                                 east=2.177181)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What are the popular places in Barcelona? (based on a square)\n    const response =\n      await amadeus.referenceData.locations.pointsOfInterest.bySquare.get({\n        north: 41.397158,\n        west: 2.160873,\n        south: 41.394582,\n        east: 2.177181,\n      });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.PointOfInterest;\n\npublic class PointsOfInterest {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // What are the popular places in Barcelona? (based on a square)\n    PointOfInterest[] pointsOfInterest = amadeus.referenceData.locations.pointsOfInterest.bySquare.get(Params\n        .with(\"north\", \"41.397158\")\n        .and(\"west\", \"2.160873\")\n        .and(\"south\", \"41.394582\")\n        .and(\"east\", \"2.177181\"));\n\n    if (pointsOfInterest[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + pointsOfInterest[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(pointsOfInterest[0]);\n\n  }\n}\n</code></pre> <p>By Id</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Give me information about a place based on it's ID\n    '''\n    response = amadeus.reference_data.locations.point_of_interest('9CB40CB5D0').get()\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Extract the information about point of interest with ID '9CB40CB5D0'\n    const response = await amadeus.referenceData.locations\n      .pointOfInterest(\"9CB40CB5D0\")\n      .get();\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.PointOfInterest;\n\npublic class PointsOfInterest {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Returns a single Point of Interest from a given id\n    PointOfInterest pointOfInterest = amadeus.referenceData.locations.pointOfInterest(\"9CB40CB5D0\").get();\n\n   if (pointsOfInterest[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + pointsOfInterest[0].getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(pointsOfInterest[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#tours-and-activities","title":"Tours and Activities","text":"<p>By geolocation</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Returns activities for a location in Barcelona based on geolocation coordinates\n    '''\n    response = amadeus.shopping.activities.get(latitude=40.41436995, longitude=-3.69170868)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Returns activities for a location in Barcelona based on geolocation coordinates\n    const response = await amadeus.shopping.activities.get({\n      latitude: 41.397158,\n      longitude: 2.160873,\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Activity;\n\n\npublic class ToursActivities {\n    public static void main(String[] args) throws ResponseException {\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n      Activity[] activities = amadeus.shopping.activities.get(Params\n        .with(\"latitude\", \"41.39715\")\n        .and(\"longitude\", \"2.160873\"));\n\n       if(activities[0].getResponse().getStatusCode() != 200) {\n               System.out.println(\"Wrong status code: \" + activities[0].getResponse().getStatusCode());\n               System.exit(-1);\n    }\n      System.out.println(activities[0]);\n    }\n}\n</code></pre> <p>By square</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Returns activities in Barcelona within a designated area\n    '''\n    response = amadeus.shopping.activities.by_square.get(north=41.397158,\n                                                         west=2.160873,\n                                                         south=41.394582,\n                                                         east=2.177181)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // What are the best tours and activities in Barcelona? (based on a Square)\n    const response = await amadeus.shopping.activities.bySquare.get({\n      north: 41.397158,\n      west: 2.160873,\n      south: 41.394582,\n      east: 2.177181,\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Activity;\n\n\npublic class ToursActivities {\n    public static void main(String[] args) throws ResponseException {\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n      Activity[] activities = amadeus.shopping.activities.get(Params\n        .with(\"north\", \"41.397158\")\n        .and(\"west\", \"2.160873\")\n        .and(\"south\", \"41.394582\")\n        .and(\"east\", \"2.177181\"));\n\n       if(activities[0].getResponse().getStatusCode() != 200) {\n               System.out.println(\"Wrong status code: \" + activities[0].getResponse().getStatusCode());\n               System.exit(-1);\n    }\n      System.out.println(activities[0]);\n    }\n}\n</code></pre> <p>By Id</p> PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import ResponseError, Client\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Returns information of an activity from a given Id\n    '''\n    response = amadeus.shopping.activity('3216547684').get()\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Extract the information about an activity with ID '56777'\n    const response = await amadeus.shopping.activity(\"56777\").get({\n      north: 41.397158,\n      west: 2.160873,\n      south: 41.394582,\n      east: 2.177181,\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Activity;\n\n\npublic class ToursActivities {\n    public static void main(String[] args) throws ResponseException {\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n      Activity tour = amadeus.shopping.activity(\"3216547684\").get();\n\n       if(tour.getResponse().getStatusCode() != 200) {\n               System.out.println(\"Wrong status code: \" + tour.getResponse().getStatusCode());\n               System.exit(-1);\n       }\n       System.out.println(tour);\n    }\n}\n</code></pre>"},{"location":"examples/code-example/#location-score","title":"Location Score","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom ast import keyword\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n)\n\ntry:\n    '''\n    What are the location scores for the given coordinates?\n    '''\n    response = amadeus.location.analytics.category_rated_areas.get(latitude=41.397158, longitude=2.160873)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus();\n\nasync function main() {\n  try {\n    //What are the location scores for the given coordinates?\n    const response = await amadeus.location.analytics.categoryRatedAreas.get({\n      latitude: 41.397158,\n      longitude: 2.160873,\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.ScoredLocation;\nimport java.util.Arrays;\n\n//Get the score for a given location using its coordinates\npublic class LocationScore {\n    public static void main(String[] args) throws ResponseException {\n\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n      //Set query parameters\n      Params params = Params.with(\"latitude\", 41.397158).and(\"longitude\", 2.160873); \n\n      //What are the location scores for the given coordinates?\n      ScoredLocation[] scoredLocations = amadeus.location.analytics.categoryRatedAreas.get(params);\n\n      if (scoredLocations[0] &amp;&amp; scoredLocations[0].getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code: \" + scoredLocations[0].getResponse().getStatusCode());\n        System.exit(-1);\n      }\n\n      Arrays.stream(scoredLocations)\n          .map(ScoredLocation::getCategoryScores)\n          .forEach(System.out::println);\n    }\n}\n</code></pre>"},{"location":"examples/code-example/#trip","title":"Trip","text":""},{"location":"examples/code-example/#city-search","title":"City Search","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    What are the cities matched with keyword 'Paris' ?\n    '''\n    response = amadeus.reference_data.locations.cities.get(keyword='Paris')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Finds cities that match a specific word or string of letters.\n    // Return a list of cities matching a keyword 'Paris'\n    const response = await amadeus.referenceData.locations.cities.get({\n      keyword: \"Paris\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.City;\n\npublic class CitySearch {\n\n  public static void main(String[] args) throws ResponseException {\n    Amadeus amadeus = Amadeus\n      .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n      .build();\n\n    City[] cities = amadeus.referenceData.locations.cities.get(\n      Params.with(\"keyword\",\"PARIS\")\n    );\n\n    if (cities[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + cities[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(cities[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#trip-purpose-prediction","title":"Trip Purpose Prediction","text":"PythonNodeJava <pre><code># Install the Python library from https://pypi.org/project/amadeus\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    The passenger is traveling for leisure or business?\n    '''\n    response = amadeus.travel.predictions.trip_purpose.get(originLocationCode='NYC', destinationLocationCode='MAD',\n                                                           departureDate='2022-08-01', returnDate='2022-08-12',\n                                                           searchDate='2022-06-11')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // The passenger is traveling for leisure or business?\n    const response = await amadeus.travel.predictions.tripPurpose.get({\n      originLocationCode: \"NYC\",\n      destinationLocationCode: \"MAD\",\n      departureDate: \"2022-08-01\",\n      returnDate: \"2022-08-12\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Prediction;\n\npublic class TripPurposePrediction {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    // Predict the purpose of the trip: business or leisure\n    Prediction tripPurpose = amadeus.travel.predictions.tripPurpose.get(Params\n        .with(\"originLocationCode\", \"NYC\")\n        .and(\"destinationLocationCode\", \"MAD\")\n        .and(\"departureDate\", \"2022-08-01\")\n        .and(\"returnDate\", \"2022-08-12\"));\n\n    if(tripPurpose.getResponse().getStatusCode() != 200) {\n        System.out.println(\"Wrong status code\" + tripPurpose.getResponse().getStatusCode());\n        System.exit(-1);\n    }\n\n    System.out.println(tripPurpose);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#travel-recommendations","title":"Travel Recommendations","text":"PythonNodeJava <pre><code>from amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\ntry:\n    '''\n    Recommends travel destinations similar to Paris for travelers in France\n    '''\n    response = amadeus.reference_data.recommended_locations.get(cityCodes='PAR', travelerCountryCode='FR')\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_API_KEY\",\n  clientSecret: \"YOUR_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Recommended locations similar to PAR\n    const response = await amadeus.referenceData.recommendedLocations.get({\n      cityCodes: \"PAR\",\n      travelerCountryCode: \"FR\",\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\n\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.Location;\n\npublic class TravelRecommendations {\n    public static void main(String[] args) throws ResponseException {\n      Amadeus amadeus = Amadeus\n              .builder(\"YOUR_AMADEUS_API_KEY\",\"YOUR_AMADEUS_API_SECRET\")\n              .build();\n\n        Location[] destinations = amadeus.referenceData.recommendedLocations.get(Params\n                .with(\"cityCodes\", \"PAR\")\n                .and(\"travelerCountryCode\", \"FR\"));\n\n        if (destinations.length != 0) {\n          if (destinations[0].getResponse().getStatusCode() != 200) {\n            System.out.println(\"Wrong status code: \" + destinations[0].getResponse().getStatusCode());\n            System.exit(-1);\n          }\n          System.out.println(destinations[0]);\n        }\n        else {\n          System.out.println(\"No recommendations found\");\n          System.exit(-1);\n        }\n     }\n}\n</code></pre>"},{"location":"examples/code-example/#cars-and-transfers","title":"Cars and Transfers","text":""},{"location":"examples/code-example/#transfer-search","title":"Transfer Search","text":"PythonNodeJava <pre><code>import json\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\njson_string = '{ \"startLocationCode\": \"CDG\", \"endAddressLine\": \"Avenue Anatole France, 5\", \"endCityName\": \"Paris\", \"endZipCode\": \"75007\", \"endCountryCode\": \"FR\", \\\n\"endName\": \"Souvenirs De La Tour\", \"endGeoCode\": \"48.859466,2.2976965\", \"transferType\": \"PRIVATE\", \"startDateTime\": \"2023-11-10T10:30:00\", \"providerCodes\": \"TXO\", \\\n\"passengers\": 2, \"stopOvers\": [ { \"duration\": \"PT2H30M\", \"sequenceNumber\": 1, \"addressLine\": \"Avenue de la Bourdonnais, 19\", \"countryCode\": \"FR\", \"cityName\": \"Paris\", \\\n\"zipCode\": \"75007\", \"name\": \"De La Tours\", \"geoCode\": \"48.859477,2.2976985\", \"stateCode\": \"FR\" } ], \"startConnectedSegment\": \\\n{ \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \"departure\": { \"localDateTime\": \"2023-11-10T09:00:00\", \"iataCode\": \"NCE\" }, \\\n\"arrival\": { \"localDateTime\": \"2023-11-10T10:00:00\", \"iataCode\": \"CDG\" } }, \"passengerCharacteristics\": [ { \"passengerTypeCode\": \"ADT\", \"age\": 20 }, \\\n{ \"passengerTypeCode\": \"CHD\", \"age\": 10 } ] }'\n\nbody = json.loads(json_string)\ntry:\n    response = amadeus.shopping.transfer_offers.post(body)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_AMADEUS_API_KEY\",\n  clientSecret: \"YOUR_AMADEUS_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    const response = await amadeus.shopping.transferOffers.post({\n      startLocationCode: \"CDG\",\n      endAddressLine: \"Avenue Anatole France, 5\",\n      endCityName: \"Paris\",\n      endZipCode: \"75007\",\n      endCountryCode: \"FR\",\n      endName: \"Souvenirs De La Tour\",\n      endGeoCode: \"48.859466,2.2976965\",\n      transferType: \"PRIVATE\",\n      startDateTime: \"2023-11-10T10:30:00\",\n      providerCodes: \"TXO\",\n      passengers: 2,\n      stopOvers: [\n        {\n          duration: \"PT2H30M\",\n          sequenceNumber: 1,\n          addressLine: \"Avenue de la Bourdonnais, 19\",\n          countryCode: \"FR\",\n          cityName: \"Paris\",\n          zipCode: \"75007\",\n          name: \"De La Tours\",\n          geoCode: \"48.859477,2.2976985\",\n          stateCode: \"FR\",\n        },\n      ],\n      startConnectedSegment: {\n        transportationType: \"FLIGHT\",\n        transportationNumber: \"AF380\",\n        departure: {\n          localDateTime: \"2023-11-10T09:00:00\",\n          iataCode: \"NCE\",\n        },\n        arrival: {\n          localDateTime: \"2023-11-10T10:00:00\",\n          iataCode: \"CDG\",\n        },\n      },\n      passengerCharacteristics: [\n        {\n          passengerTypeCode: \"ADT\",\n          age: 20,\n        },\n        {\n          passengerTypeCode: \"CHD\",\n          age: 10,\n        },\n      ],\n    });\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\nimport com.amadeus.Amadeus;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.TransferOffersPost;\n\npublic class TransferSearch {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n        .build();\n\n    String body = \"{\\\"startLocationCode\\\":\\\"CDG\\\",\\\"endAddressLine\\\":\\\"AvenueAnatoleFrance,5\\\",\\\"endCityName\\\":\\\"Paris\\\",\\\"endZipCode\\\":\\\"75007\\\",\\\"endCountryCode\\\":\\\"FR\\\",\\\"endName\\\":\\\"SouvenirsDeLaTour\\\",\\\"endGeoCode\\\":\\\"48.859466,2.2976965\\\",\\\"transferType\\\":\\\"PRIVATE\\\",\\\"startDateTime\\\":\\\"2023-11-10T10:30:00\\\",\\\"providerCodes\\\":\\\"TXO\\\",\\\"passengers\\\":2,\\\"stopOvers\\\":[{\\\"duration\\\":\\\"PT2H30M\\\",\\\"sequenceNumber\\\":1,\\\"addressLine\\\":\\\"AvenuedelaBourdonnais,19\\\",\\\"countryCode\\\":\\\"FR\\\",\\\"cityName\\\":\\\"Paris\\\",\\\"zipCode\\\":\\\"75007\\\",\\\"name\\\":\\\"DeLaTours\\\",\\\"geoCode\\\":\\\"48.859477,2.2976985\\\",\\\"stateCode\\\":\\\"FR\\\"}],\\\"startConnectedSegment\\\":{\\\"transportationType\\\":\\\"FLIGHT\\\",\\\"transportationNumber\\\":\\\"AF380\\\",\\\"departure\\\":{\\\"localDateTime\\\":\\\"2023-11-10T09:00:00\\\",\\\"iataCode\\\":\\\"NCE\\\"},\\\"arrival\\\":{\\\"localDateTime\\\":\\\"2023-11-10T10:00:00\\\",\\\"iataCode\\\":\\\"CDG\\\"}},\\\"passengerCharacteristics\\\":[{\\\"passengerTypeCode\\\":\\\"ADT\\\",\\\"age\\\":20},{\\\"passengerTypeCode\\\":\\\"CHD\\\",\\\"age\\\":10}]}\";\n\n    TransferOffersPost[] transfers = amadeus.shopping.transferOffers.post(body);\n\n    if (transfers[0].getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + transfers[0].getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(transfers[0]);\n  }\n}\n</code></pre>"},{"location":"examples/code-example/#transfer-booking","title":"Transfer Booking","text":"PythonNodeJava <pre><code>import json\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\n\nsearchBody = '{ \"startLocationCode\": \"CDG\", \"endAddressLine\": \"Avenue Anatole France, 5\", \"endCityName\": \"Paris\", \\\n    \"endZipCode\": \"75007\", \"endCountryCode\": \"FR\", \"endName\": \"Souvenirs De La Tour\", \"endGeoCode\": \"48.859466,2.2976965\", \\\n    \"transferType\": \"PRIVATE\", \"startDateTime\": \"2023-11-10T10:30:00\", \"providerCodes\": \"TXO\", \"passengers\": 2, \\\n    \"stopOvers\": [ { \"duration\": \"PT2H30M\", \"sequenceNumber\": 1, \"addressLine\": \"Avenue de la Bourdonnais, 19\", \\\n    \"countryCode\": \"FR\", \"cityName\": \"Paris\", \"zipCode\": \"75007\", \"name\": \"De La Tours\", \"geoCode\": \"48.859477,2.2976985\", \\\n    \"stateCode\": \"FR\" } ], \"startConnectedSegment\": { \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \\\n    \"departure\": { \"localDateTime\": \"2023-11-10T09:00:00\", \"iataCode\": \"NCE\" }, \\\n    \"arrival\": { \"localDateTime\": \"2023-11-10T10:00:00\", \"iataCode\": \"CDG\" } }, \\\n    \"passengerCharacteristics\": [ { \"passengerTypeCode\": \"ADT\", \"age\": 20 }, { \"passengerTypeCode\": \"CHD\", \"age\": 10 } ] }'\n\n# Search list of transfers from Transfer Search API\nsearchResponse = amadeus.shopping.transfer_offers.post(json.loads(searchBody))\nofferId = searchResponse.data[0]['id']\n\n\nofferBody = '{ \"data\": { \"note\": \"Note to driver\", \"passengers\": [ { \"firstName\": \"John\", \"lastName\": \"Doe\", \"title\": \"MR\", \\\n    \"contacts\": { \"phoneNumber\": \"+33123456789\", \"email\": \"user@email.com\" }, \\\n    \"billingAddress\": { \"line\": \"Avenue de la Bourdonnais, 19\", \"zip\": \"75007\", \"countryCode\": \"FR\", \"cityName\": \"Paris\" } } ], \\\n    \"agency\": { \"contacts\": [ { \"email\": { \"address\": \"abc@test.com\" } } ] }, \\\n    \"payment\": { \"methodOfPayment\": \"CREDIT_CARD\", \"creditCard\": \\\n    { \"number\": \"4111111111111111\", \"holderName\": \"JOHN DOE\", \"vendorCode\": \"VI\", \"expiryDate\": \"0928\", \"cvv\": \"111\" } }, \\\n    \"extraServices\": [ { \"code\": \"EWT\", \"itemId\": \"EWT0291\" } ], \"equipment\": [ { \"code\": \"BBS\" } ], \\\n    \"corporation\": { \"address\": { \"line\": \"5 Avenue Anatole France\", \"zip\": \"75007\", \"countryCode\": \"FR\", \"cityName\": \"Paris\" }, \"info\": { \"AU\": \"FHOWMD024\", \"CE\": \"280421GH\" } }, \\\n    \"startConnectedSegment\": { \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \\\n    \"departure\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" }, \\\n    \"arrival\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" } }, \\\n    \"endConnectedSegment\": { \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \\\n    \"departure\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" }, \\\n    \"arrival\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" } } } }'\n\n# Book the first transfer from Transfer Search API via Transfer Booking API\ntry:\n    response = amadeus.ordering.transfer_orders.post(json.loads(offerBody), offerId=offerId)\n    print(response.data)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_AMADEUS_API_KEY\",\n  clientSecret: \"YOUR_AMADEUS_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    // Search list of transfers from Transfer Search API\n    const searchResponse = await amadeus.shopping.transferOffers.post({\n      startLocationCode: \"CDG\",\n      endAddressLine: \"Avenue Anatole France, 5\",\n      endCityName: \"Paris\",\n      endZipCode: \"75007\",\n      endCountryCode: \"FR\",\n      endName: \"Souvenirs De La Tour\",\n      endGeoCode: \"48.859466,2.2976965\",\n      transferType: \"PRIVATE\",\n      startDateTime: \"2023-11-10T10:30:00\",\n      providerCodes: \"TXO\",\n      passengers: 2,\n      stopOvers: [\n        {\n          duration: \"PT2H30M\",\n          sequenceNumber: 1,\n          addressLine: \"Avenue de la Bourdonnais, 19\",\n          countryCode: \"FR\",\n          cityName: \"Paris\",\n          zipCode: \"75007\",\n          name: \"De La Tours\",\n          geoCode: \"48.859477,2.2976985\",\n          stateCode: \"FR\",\n        },\n      ],\n      startConnectedSegment: {\n        transportationType: \"FLIGHT\",\n        transportationNumber: \"AF380\",\n        departure: {\n          localDateTime: \"2023-11-10T09:00:00\",\n          iataCode: \"NCE\",\n        },\n        arrival: {\n          localDateTime: \"2023-11-10T10:00:00\",\n          iataCode: \"CDG\",\n        },\n      },\n      passengerCharacteristics: [\n        {\n          passengerTypeCode: \"ADT\",\n          age: 20,\n        },\n        {\n          passengerTypeCode: \"CHD\",\n          age: 10,\n        },\n      ],\n    });\n\n    // Retrieve offer ID from the response of the first endpoint (Transfer Search API)\n    const offerId = searchResponse.data[0].id;\n    // Book the first transfer from Transfer Search API via Transfer Booking API\n    const orderResponse = await amadeus.ordering.transferOrders.post(\n      {\n        data: {\n          note: \"Note to driver\",\n          passengers: [\n            {\n              firstName: \"John\",\n              lastName: \"Doe\",\n              title: \"MR\",\n              contacts: {\n                phoneNumber: \"+33123456789\",\n                email: \"user@email.com\",\n              },\n              billingAddress: {\n                line: \"Avenue de la Bourdonnais, 19\",\n                zip: \"75007\",\n                countryCode: \"FR\",\n                cityName: \"Paris\",\n              },\n            },\n          ],\n          agency: {\n            contacts: [\n              {\n                email: {\n                  address: \"abc@test.com\",\n                },\n              },\n            ],\n          },\n          payment: {\n            methodOfPayment: \"CREDIT_CARD\",\n            creditCard: {\n              number: \"4111111111111111\",\n              holderName: \"JOHN DOE\",\n              vendorCode: \"VI\",\n              expiryDate: \"0928\",\n              cvv: \"111\",\n            },\n          },\n          extraServices: [\n            {\n              code: \"EWT\",\n              itemId: \"EWT0291\",\n            },\n          ],\n          equipment: [\n            {\n              code: \"BBS\",\n            },\n          ],\n          corporation: {\n            address: {\n              line: \"5 Avenue Anatole France\",\n              zip: \"75007\",\n              countryCode: \"FR\",\n              cityName: \"Paris\",\n            },\n            info: {\n              AU: \"FHOWMD024\",\n              CE: \"280421GH\",\n            },\n          },\n          startConnectedSegment: {\n            transportationType: \"FLIGHT\",\n            transportationNumber: \"AF380\",\n            departure: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n            arrival: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n          },\n          endConnectedSegment: {\n            transportationType: \"FLIGHT\",\n            transportationNumber: \"AF380\",\n            departure: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n            arrival: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n          },\n        },\n      },\n      offerId\n    );\n\n    console.log(orderResponse);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.TransferOrder;\n\npublic class TransferOrders {\n\n    public static void main(String[] args) throws ResponseException {\n\n        Amadeus amadeus = Amadeus\n                .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n                .build();\n        Params params = Params.with(\"offerId\", \"5976726751\");\n\n        String body = \"{\\n  \\\"data\\\": {\\n    \\\"note\\\": \\\"Note to driver\\\",\\n    \\\"passengers\\\": [\\n      {\\n        \\\"firstName\\\": \\\"John\\\",\\n        \\\"lastName\\\": \\\"Doe\\\",\\n        \\\"title\\\": \\\"MR\\\",\\n        \\\"contacts\\\": {\\n          \\\"phoneNumber\\\": \\\"+33123456789\\\",\\n          \\\"email\\\": \\\"user@email.com\\\"\\n        },\\n        \\\"billingAddress\\\": {\\n          \\\"line\\\": \\\"Avenue de la Bourdonnais, 19\\\",\\n          \\\"zip\\\": \\\"75007\\\",\\n          \\\"countryCode\\\": \\\"FR\\\",\\n          \\\"cityName\\\": \\\"Paris\\\"\\n        }\\n      }\\n    ],\\n    \\\"agency\\\": {\\n      \\\"contacts\\\": [\\n        {\\n          \\\"email\\\": {\\n            \\\"address\\\": \\\"abc@test.com\\\"\\n          }\\n        }\\n      ]\\n    },\\n    \\\"payment\\\": {\\n      \\\"methodOfPayment\\\": \\\"CREDIT_CARD\\\",\\n      \\\"creditCard\\\": {\\n        \\\"number\\\": \\\"4111111111111111\\\",\\n        \\\"holderName\\\": \\\"JOHN DOE\\\",\\n        \\\"vendorCode\\\": \\\"VI\\\",\\n        \\\"expiryDate\\\": \\\"0928\\\",\\n        \\\"cvv\\\": \\\"111\\\"\\n      }\\n    },\\n    \\\"extraServices\\\": [\\n      {\\n        \\\"code\\\": \\\"EWT\\\",\\n        \\\"itemId\\\": \\\"EWT0291\\\"\\n      }\\n    ],\\n    \\\"equipment\\\": [\\n      {\\n        \\\"code\\\": \\\"BBS\\\"\\n      }\\n    ],\\n    \\\"corporation\\\": {\\n      \\\"address\\\": {\\n        \\\"line\\\": \\\"5 Avenue Anatole France\\\",\\n        \\\"zip\\\": \\\"75007\\\",\\n        \\\"countryCode\\\": \\\"FR\\\",\\n        \\\"cityName\\\": \\\"Paris\\\"\\n      },\\n      \\\"info\\\": {\\n        \\\"AU\\\": \\\"FHOWMD024\\\",\\n        \\\"CE\\\": \\\"280421GH\\\"\\n      }\\n    },\\n    \\\"startConnectedSegment\\\": {\\n      \\\"transportationType\\\": \\\"FLIGHT\\\",\\n      \\\"transportationNumber\\\": \\\"AF380\\\",\\n      \\\"departure\\\": {\\n        \\\"uicCode\\\": \\\"7400001\\\",\\n        \\\"iataCode\\\": \\\"CDG\\\",\\n        \\\"localDateTime\\\": \\\"2023-03-27T20:03:00\\\"\\n      },\\n      \\\"arrival\\\": {\\n        \\\"uicCode\\\": \\\"7400001\\\",\\n        \\\"iataCode\\\": \\\"CDG\\\",\\n        \\\"localDateTime\\\": \\\"2023-03-27T20:03:00\\\"\\n      }\\n    },\\n    \\\"endConnectedSegment\\\": {\\n      \\\"transportationType\\\": \\\"FLIGHT\\\",\\n      \\\"transportationNumber\\\": \\\"AF380\\\",\\n      \\\"departure\\\": {\\n        \\\"uicCode\\\": \\\"7400001\\\",\\n        \\\"iataCode\\\": \\\"CDG\\\",\\n        \\\"localDateTime\\\": \\\"2023-03-27T20:03:00\\\"\\n      },\\n      \\\"arrival\\\": {\\n        \\\"uicCode\\\": \\\"7400001\\\",\\n        \\\"iataCode\\\": \\\"CDG\\\",\\n        \\\"localDateTime\\\": \\\"2023-03-27T20:03:00\\\"\\n      }\\n    }\\n  }\\n}\";\n\n        TransferOrder transfers = amadeus.ordering.transferOrders.post(body, params);\n        if (transfers.getResponse().getStatusCode() != 200) {\n            System.out.println(\"Wrong status code: \" + transfers.getResponse().getStatusCode());\n            System.exit(-1);\n        }\n\n        System.out.println(transfers);\n    }\n}\n</code></pre>"},{"location":"examples/code-example/#transfer-management","title":"Transfer Management","text":"PythonNodeJava <pre><code>import json\nfrom amadeus import Client, ResponseError\n\namadeus = Client(\n    client_id='YOUR_AMADEUS_API_KEY',\n    client_secret='YOUR_AMADEUS_API_SECRET'\n)\nsearchBody = '{ \"startLocationCode\": \"CDG\", \"endAddressLine\": \"Avenue Anatole France, 5\", \"endCityName\": \"Paris\", \\\n    \"endZipCode\": \"75007\", \"endCountryCode\": \"FR\", \"endName\": \"Souvenirs De La Tour\", \"endGeoCode\": \"48.859466,2.2976965\", \\\n    \"transferType\": \"PRIVATE\", \"startDateTime\": \"2023-11-10T10:30:00\", \"providerCodes\": \"TXO\", \"passengers\": 2, \\\n    \"stopOvers\": [ { \"duration\": \"PT2H30M\", \"sequenceNumber\": 1, \"addressLine\": \"Avenue de la Bourdonnais, 19\", \\\n    \"countryCode\": \"FR\", \"cityName\": \"Paris\", \"zipCode\": \"75007\", \"name\": \"De La Tours\", \"geoCode\": \"48.859477,2.2976985\", \\\n    \"stateCode\": \"FR\" } ], \"startConnectedSegment\": { \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \\\n    \"departure\": { \"localDateTime\": \"2023-11-10T09:00:00\", \"iataCode\": \"NCE\" }, \\\n    \"arrival\": { \"localDateTime\": \"2023-11-10T10:00:00\", \"iataCode\": \"CDG\" } }, \\\n    \"passengerCharacteristics\": [ { \"passengerTypeCode\": \"ADT\", \"age\": 20 }, { \"passengerTypeCode\": \"CHD\", \"age\": 10 } ] }'\n\n# Search list of transfers from Transfer Search API\nsearchResponse = amadeus.shopping.transfer_offers.post(json.loads(searchBody))\nofferId = searchResponse.data[0]['id']\n\n\nofferBody = '{ \"data\": { \"note\": \"Note to driver\", \"passengers\": [ { \"firstName\": \"John\", \"lastName\": \"Doe\", \"title\": \"MR\", \\\n    \"contacts\": { \"phoneNumber\": \"+33123456789\", \"email\": \"user@email.com\" }, \\\n    \"billingAddress\": { \"line\": \"Avenue de la Bourdonnais, 19\", \"zip\": \"75007\", \"countryCode\": \"FR\", \"cityName\": \"Paris\" } } ], \\\n    \"agency\": { \"contacts\": [ { \"email\": { \"address\": \"abc@test.com\" } } ] }, \\\n    \"payment\": { \"methodOfPayment\": \"CREDIT_CARD\", \"creditCard\": \\\n    { \"number\": \"4111111111111111\", \"holderName\": \"JOHN DOE\", \"vendorCode\": \"VI\", \"expiryDate\": \"0928\", \"cvv\": \"111\" } }, \\\n    \"extraServices\": [ { \"code\": \"EWT\", \"itemId\": \"EWT0291\" } ], \"equipment\": [ { \"code\": \"BBS\" } ], \\\n    \"corporation\": { \"address\": { \"line\": \"5 Avenue Anatole France\", \"zip\": \"75007\", \"countryCode\": \"FR\", \"cityName\": \"Paris\" }, \"info\": { \"AU\": \"FHOWMD024\", \"CE\": \"280421GH\" } }, \\\n    \"startConnectedSegment\": { \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \\\n    \"departure\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" }, \\\n    \"arrival\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" } }, \\\n    \"endConnectedSegment\": { \"transportationType\": \"FLIGHT\", \"transportationNumber\": \"AF380\", \\\n    \"departure\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" }, \\\n    \"arrival\": { \"uicCode\": \"7400001\", \"iataCode\": \"CDG\", \"localDateTime\": \"2023-03-27T20:03:00\" } } } }'\n\n# Book the first transfer from Transfer Search API via Transfer Booking API\norderResponse =  amadeus.ordering.transfer_orders.post(json.loads(offerBody), offerId=offerId)\norderId = orderResponse.data['id']\nconfirmNbr = orderResponse.data['transfers'][0]['confirmNbr'] \n\n# Book the first transfer from Transfer Search API via Transfer Booking API\ntry:\n    amadeus.ordering.transfer_order(orderId).transfers.cancellation.post('', confirmNbr=confirmNbr)\nexcept ResponseError as error:\n    raise error\n</code></pre> <pre><code>const Amadeus = require(\"amadeus\");\n\nconst amadeus = new Amadeus({\n  clientId: \"YOUR_AMADEUS_API_KEY\",\n  clientSecret: \"YOUR_AMADEUS_API_SECRET\",\n});\n\nasync function main() {\n  try {\n    const searchResponse = await amadeus.shopping.transferOffers.post({\n      startLocationCode: \"CDG\",\n      endAddressLine: \"Avenue Anatole France, 5\",\n      endCityName: \"Paris\",\n      endZipCode: \"75007\",\n      endCountryCode: \"FR\",\n      endName: \"Souvenirs De La Tour\",\n      endGeoCode: \"48.859466,2.2976965\",\n      transferType: \"PRIVATE\",\n      startDateTime: \"2023-11-10T10:30:00\",\n      providerCodes: \"TXO\",\n      passengers: 2,\n      stopOvers: [\n        {\n          duration: \"PT2H30M\",\n          sequenceNumber: 1,\n          addressLine: \"Avenue de la Bourdonnais, 19\",\n          countryCode: \"FR\",\n          cityName: \"Paris\",\n          zipCode: \"75007\",\n          name: \"De La Tours\",\n          geoCode: \"48.859477,2.2976985\",\n          stateCode: \"FR\",\n        },\n      ],\n      startConnectedSegment: {\n        transportationType: \"FLIGHT\",\n        transportationNumber: \"AF380\",\n        departure: {\n          localDateTime: \"2023-11-10T09:00:00\",\n          iataCode: \"NCE\",\n        },\n        arrival: {\n          localDateTime: \"2023-11-10T10:00:00\",\n          iataCode: \"CDG\",\n        },\n      },\n      passengerCharacteristics: [\n        {\n          passengerTypeCode: \"ADT\",\n          age: 20,\n        },\n        {\n          passengerTypeCode: \"CHD\",\n          age: 10,\n        },\n      ],\n    });\n\n    // Retrieve offer ID from the response of the first endpoint (Transfer search API)\n    const offerId = searchResponse.data[0].id;\n    const orderResponse = await amadeus.ordering.transferOrders.post(\n      {\n        data: {\n          note: \"Note to driver\",\n          passengers: [\n            {\n              firstName: \"John\",\n              lastName: \"Doe\",\n              title: \"MR\",\n              contacts: {\n                phoneNumber: \"+33123456789\",\n                email: \"user@email.com\",\n              },\n              billingAddress: {\n                line: \"Avenue de la Bourdonnais, 19\",\n                zip: \"75007\",\n                countryCode: \"FR\",\n                cityName: \"Paris\",\n              },\n            },\n          ],\n          agency: {\n            contacts: [\n              {\n                email: {\n                  address: \"abc@test.com\",\n                },\n              },\n            ],\n          },\n          payment: {\n            methodOfPayment: \"CREDIT_CARD\",\n            creditCard: {\n              number: \"4111111111111111\",\n              holderName: \"JOHN DOE\",\n              vendorCode: \"VI\",\n              expiryDate: \"0928\",\n              cvv: \"111\",\n            },\n          },\n          extraServices: [\n            {\n              code: \"EWT\",\n              itemId: \"EWT0291\",\n            },\n          ],\n          equipment: [\n            {\n              code: \"BBS\",\n            },\n          ],\n          corporation: {\n            address: {\n              line: \"5 Avenue Anatole France\",\n              zip: \"75007\",\n              countryCode: \"FR\",\n              cityName: \"Paris\",\n            },\n            info: {\n              AU: \"FHOWMD024\",\n              CE: \"280421GH\",\n            },\n          },\n          startConnectedSegment: {\n            transportationType: \"FLIGHT\",\n            transportationNumber: \"AF380\",\n            departure: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n            arrival: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n          },\n          endConnectedSegment: {\n            transportationType: \"FLIGHT\",\n            transportationNumber: \"AF380\",\n            departure: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n            arrival: {\n              uicCode: \"7400001\",\n              iataCode: \"CDG\",\n              localDateTime: \"2023-03-27T20:03:00\",\n            },\n          },\n        },\n      },\n      offerId\n    );\n\n    // Retrieve order ID from the response of the second endpoint (Transfer Order API)\n    const orderId = orderResponse.data.id;\n    // Retrieve confirmation number from the response of the second endpoint (Transfer Order API)\n    const confirmNbr = orderResponse.data.transfers[0].confirmNbr;\n\n    // Transfer Management API to cancel the transfer order.\n    const response = await amadeus.ordering\n      .transferOrder(orderId)\n      .transfers.cancellation.post({}, confirmNbr);\n\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n</code></pre> <pre><code>// How to install the library at https://github.com/amadeus4dev/amadeus-java\nimport com.amadeus.Amadeus;\nimport com.amadeus.Params;\nimport com.amadeus.exceptions.ResponseException;\nimport com.amadeus.resources.TransferCancellation;\n\npublic class TransferManagement {\n\n  public static void main(String[] args) throws ResponseException {\n\n    Amadeus amadeus = Amadeus\n        .builder(\"YOUR_AMADEUS_API_KEY\", \"YOUR_AMADEUS_API_SECRET\")\n        .build();\n    Params params = Params.with(\"confirmNbr\", \"12029761\");\n\n    TransferCancellation transfers = amadeus.ordering\n        .transferOrder(\"VEg0Wk43fERPRXwyMDIzLTA2LTE1VDE1OjUwOjE4\").transfers.cancellation.post(params);\n    if (transfers.getResponse().getStatusCode() != 200) {\n      System.out.println(\"Wrong status code: \" + transfers.getResponse().getStatusCode());\n      System.exit(-1);\n    }\n\n    System.out.println(transfers);\n  }\n}\n</code></pre>"},{"location":"examples/live-examples/","title":"Interactive examples","text":""},{"location":"examples/live-examples/#interactive-code-examples","title":"Interactive code examples","text":"<p>Explore our collection of interactive code examples, which can be easily integrated into your website. These examples allow you to view and modify the code to see how it affects the appearance and functionality of each component.</p>"},{"location":"examples/live-examples/#flight-search-form","title":"Flight Search form","text":"<p>The flight search form not only provides a simple and minimal user interface, but also includes validation rules for each field. It checks the mandatory fields takes into consideration all the search restrictions related to the passengers, such as it doesn't allow the number of infants to be higher than the number of adult passengers.</p> <p>Additionally, this form has a responsive design and is easy to customize by changing colors or adding new fields. Find the full code at the Amadeus for Developers GitHub.</p>    See the Pen    Flight Search form by Amadeus for Developers (@amadeus4dev)   on CodePen."},{"location":"examples/live-examples/#hotel-search-form","title":"Hotel Search form","text":"<p>The hotel search form apart from the user interface, it also includes validation rules to the fields. Furthermore, it has responsive design and can be easily customized to suit your website's aesthetics, whether by changing colors, adding new fields, or adjusting the layout.</p> <p>You can find the full code for the hotel search form at the Amadeus for Developers GitHub.</p>    See the Pen    Hotel Search Form by Amadeus for Developers (@amadeus4dev)   on CodePen."},{"location":"examples/prototypes/","title":"Prototypes","text":"<p>Would you like to explore the applications that you could build with Amadeus Self-Service APIs? We have prototypes available in Amadeus for Developers GitHub.</p> <p>There are two types of prototypes (demo apps) available. </p> <ul> <li>Official prototypes are managed by Amadeus for Developers team and updated frequently to the latest version of APIs and SDKs. </li> <li>Community prototypes are examples or demo apps that have been built and managed by developer community and it is not supported or maintained by Amadeus for Developers team. </li> </ul>"},{"location":"examples/prototypes/#official-prototypes","title":"Official Prototypes","text":"Use Cases Amadeus APIs used Technology Details Flight booking engine Flight Offers Search, Flight Offers Price, Flight Create Order, Airport &amp; City Search Python, Django See details Hotel Booking engine Hotel List, Hotel Search, Hotel Booking Python, Django See details Flight Search with Price Analysis &amp; Trip purpose Flight Offers Search, Flight Price Analysis, Trip Purpose Prediction Python, Django See details Map with Hotels, Point of interests Hotel List, Points of Interest, Tours and Activities Python, Django, HERE Maps See details"},{"location":"examples/prototypes/#amadeus-flight-booking-django","title":"Amadeus Flight Booking in Django","text":"<ul> <li>Demo app: You can access the demo of the prototype here.</li> <li>Source code: You can access the source code on GitHub.</li> </ul> <p>The prototype is built with Django and the Amadeus Python SDK and demonstrates the end-to-end flight booking process, which works in conjunction with three APIs:</p> <ul> <li>Flight Offer Search API to search for flight offers. </li> <li>Flight Offer Price API to confirm the availability and price of given offers.</li> <li>Flight Create Orders API to book the given flights.</li> </ul> <p>It also calls the Airport &amp; City Search API to autocomplete the origin and destination with IATA code.</p> <p> </p>"},{"location":"examples/prototypes/#amadeus-hotel-booking-django","title":"Amadeus Hotel Booking in Django","text":"<ul> <li>Demo app: You can access the demo of the prototype here.</li> <li>Source code: You can access the source code on GitHub.</li> </ul> <p>The prototype is built with Python/Django and the Amadeus Python SDK. It demonstrates the end-to-end Hotel booking process (Hotel booking engine), which works in conjunction with three APIs: </p> <ul> <li>Hotel List API to list the hotels in a specific location.</li> <li>Hotel Search API to search for the offers of given hotels. </li> <li>Hotel Booking API to book the given hotel rooms. </li> </ul> <p></p>"},{"location":"examples/prototypes/#amadeus-flight-price-analysis-django","title":"Amadeus Flight Price Analysis in Django","text":"<ul> <li>Demo app: You can access the demo of the prototype here.</li> <li>Source code: You can access the source code on GitHub.</li> </ul> <p>The prototype is built with Python/Django and the  Amadeus Python SDK. It retrieves flight offers using the Flight Offers Search API for a given itinerary. Then it displays if the cheapest available flight is a good deal based on the Flight Price Analysis API. We finally predict if the trip is for business or leisure using the Trip Purpose Prediction API.</p> <p></p>"},{"location":"examples/prototypes/#amadeus-hotel-area-safety-pois-django","title":"Amadeus Hotel Search with area safety and POIs","text":"<ul> <li>Demo app: You can access the demo of the prototype here.</li> <li>Source code: You can access the source code on GitHub.</li> </ul> <p>The prototype is built by Python/Django and the Amadeus Python SDK, It demonstrates the safety information, POIs and tours for a chosen hotel on a map, using the following APIs:</p> <ul> <li>Hotel List: shows hotels on the map</li> <li>Points of Interest: shows POIs around the hotel</li> <li>Tours and Activities: shows bookable tours and activities around the hotel</li> <li>HERE Maps: displays a map with markers and text bubbles</li> </ul> <p></p>"},{"location":"examples/prototypes/#prototypes-from-community","title":"Prototypes from community","text":"<p>We have many other prototypes or demo apps that developers in our community built and shared! Explore them below or in Amadeus for Developers -Examples GitHub. </p> <p>Warning</p> <p>Projects from communities are examples that have been built and managed by developer community(Discord) and it is not supported or maintained by Amadeus for Developers team. The projects may not be up-to-date. </p> Use case Amadeus APIs used Technology Details Trip purpose prediction Trip Purpose Prediction Python, django amadeus-trip-purpose-django Hotel Search Hotel Search Swift amadeus-hotel-search-swift Hotel booking engine Hotel Search, Hotel Booking Kotlin amadeus-hotel-booking-android Flight Search with Artificial intelligence Flight Offers Search, Flight Choice Prediction, Trip Purpose Prediction and Airport &amp; City Search Python, django amadeus-smart-flight-search-django Flight Search Flight Offers Search PHP, wordpress amadeus-flight-search-wordpress-plugin Flight Booking engine Flight Offers Search, Flight Offers price, Flight Create Orders, Airport &amp; City Search Java, React amadeus_java_flight_api Airport &amp; City autocomplete Airport &amp; City Search Node, Express, React amadeus-airport-city-search-mern Flight Seatmap display SeatMap Display React amadeus-seatmap Hotel booking engine Hotel Search, Hotel Booking React Native AmadeusNodeServer, AmadeusHotelBookingPart1 Hotel booking engine Airport &amp; City Search, Hotel Search, Hotel Booking Node, React Building-a-Hotel-Booking-App-in-NodeJS-and-React Map nearby Points of Interests Swift MyPlaces Flight Booking engine Flight Offers Search, Flight Offers price, Flight Create Orders, Airport &amp; City Search Node, Angular Flight-booking-frontend and backend Flight Search backend Flight Offers Search, Airport &amp; City Search Bootstrap, Vanila JS Building-a-Flight-Search-Form-with-Bootstrap-and-the-Amadeus-API Map nearby Points of Interests Android Amadeus_POI_Android Hotel booking engine Hotel Search, Hotel Booking Ruby on Rails amadeus-hotel-booking-rubyonrails Flight status notification service On-Demand Flight Status Python amadeus-async-flight-status Flight Calendar search Airport &amp; City Search, Flight Offers Search Node, Svelte FlightSearchCalendar Airport &amp; City autocomplete Airport &amp; City Search Node and Express Live-Airport-City-Search Flight Booking Flight Offers Search, Flight Offers Price, Flight Create Orders Node, Vue amadeus-flight-booking-node"},{"location":"examples/prototypes/#amadeus-trip-purpose-django","title":"amadeus-trip-purpose-django","text":"<p>This project (Link to GitHub) demonstrates how to integrate Amadeus APIs using the Python SDK in a Django application. The end user submits round-trip information via a form and the Trip Purpose Prediction is called. This API predicts if the given journey is for leisure or business purposes.</p> <p></p>"},{"location":"examples/prototypes/#amadeus-hotel-search-swift","title":"amadeus-hotel-search-swift","text":"<p>This prototype (Link to GitHub) demonstrates a simple iOS hotel search app from scratch using Amadeus Hotel Search API (version 2.1 - decommissioned) and iOS SDK.</p> <p></p>"},{"location":"examples/prototypes/#amadeus-hotel-booking-android","title":"amadeus-hotel-booking-android","text":"<p>This prototype (Link to GitHub) shows how to use the Android SDK to build a Hotel Booking Engine in Android Studio. </p> <p></p>"},{"location":"examples/prototypes/#amadeus-smart-flight-search-django","title":"amadeus-smart-flight-search-django","text":"<p>This prototype (Link to GitHub) shows how the Air APIs can be integrated with the Django framework and Python SDK, by calling the Flight Choice Prediction and Trip Purpose Prediction. We also call the Flight Offers Search as a more traditional method of flight search and we compare its results with the Flight Choice Prediction ones to show the power of AI.</p> <p></p>"},{"location":"examples/prototypes/#amadeus-flight-search-wordpress-plugin","title":"amadeus-flight-search-wordpress-plugin","text":"<p>This prototype (Link to GitHub)  demonstrated how to create a WordPress plugin to build a basic flight search feature using Flight Offers Search API.</p> <p></p>"},{"location":"examples/prototypes/#amadeus_java_flight_api","title":"amadeus_java_flight_api","text":"<p>This app (Link to GitHub) is an example of how to use the Amadeus Flight APIs to search and book a flight. The application uses a Spring backend and a React frontend.</p>"},{"location":"examples/prototypes/#amadeus-airport-city-search-mern","title":"amadeus-airport-city-search-mern","text":"<p>This application (Link to GitHub) implements airport and city name autocomplete box powered by the Airport &amp; City Search API. It consists of a simple Node and Express backend that connects to the Amadeus API with Node SDK, and a small React app that talks to a Node/Express backend and use it to obtain the airport name data from Amadeus.</p>"},{"location":"examples/prototypes/#amadeus-seatmap","title":"amadeus-seatmap","text":"<p>This prototype (Link to GitHub) demonstrates how to display a flight seatmap using SeatMap Display API with React. </p> <ul> <li>How to build an aircraft seat map in React</li> </ul> <p></p>"},{"location":"examples/prototypes/#amadeusnodeserver-amadeushotelbookingpart1","title":"AmadeusNodeServer, AmadeusHotelBookingPart1","text":"<p>This prototype consists of 2 Github repositories (GitHub to Node Server and GitHub to React Native). It demonstrates a Hotel booking application in iOS using React Native. There is a series of blogs to elaborate further to build an app with this prototype. </p> <ul> <li>Building an iOS hotel booking app with React Native - Part 1</li> <li>Building an iOS hotel booking app with React Native - Part 2 </li> </ul> <p></p>"},{"location":"examples/prototypes/#amadeus-safeplace","title":"amadeus-safeplace","text":"<p>This prototype (Link to GitHub) demonstrates a neighbourhood safety map in Python to let users compare the relative safety levels of different neighbourhoods. You will use the Safe Place API for the safety scores and HERE Maps to visualize them on a map.</p> <ul> <li>How to build a neighbourhood safety map in Python with Amadeus Safe Place</li> </ul> <p></p>"},{"location":"examples/prototypes/#myplaces","title":"MyPlaces","text":"<p>This prototype (Link to GitHub) demonstrates an iOS application that finds nearby places and displays them on a map. You will use the Points of Interest API to retrieve the places and MKMapView for the map.</p> <ul> <li>How to get nearby places using Amadeus APIs in iOS</li> </ul> <p></p>"},{"location":"examples/prototypes/#building-a-hotel-booking-app-in-nodejs-and-react","title":"Building-a-Hotel-Booking-App-in-NodeJS-and-React","text":"<p>This prototype consists of 2 code sets (Github to Backend and Github to Frontend). It demonstrates a complete hotel booking app using Node on the backend and React for the frontend. </p> <ul> <li> <p>Building a hotel booking app with Node.js and React - Part 1</p> </li> <li> <p>Building a hotel booking app with Node.js and React - Part 2</p> </li> </ul> <p></p>"},{"location":"examples/prototypes/#flight-booking-frontend-and-backend","title":"Flight-booking-frontend and backend","text":"<p>This prototype consists of 2 code sets (Github to Backend and Github to Frontend). It demonstrates a complete flight booking application using Node in the backend and Angular for the front end.</p> <ul> <li>Build a flight booking app with Angular and Node.js - Part 1</li> <li>Build a flight booking app with Angular and Node.js - Part 2</li> </ul> <p></p>"},{"location":"examples/prototypes/#building-a-flight-search-form-with-bootstrap-and-the-amadeus-api","title":"Building-a-Flight-Search-Form-with-Bootstrap-and-the-Amadeus-API","text":"<p>This prototype consists of 2 code sets (Github to Frontend and Github to Backend). It demonstrates a flight booking engine with Flight Offer Search API using Bootstrap and Vanilla JS for frontend and Express for the backend. </p> <ul> <li>How to build a flight search form using Bootstrap 5 - Part 1</li> <li>How to build a flight search form using Bootstrap 5 - Part 2</li> </ul> <p></p>"},{"location":"examples/prototypes/#amadeus_poi_android","title":"Amadeus_POI_Android","text":"<p>This app (Link to GitHub) demonstrates the usage of Amadeus Points of Interest API to fetch the list of best attractions near the user's current location and displays them on a list as well as a map.</p>"},{"location":"examples/prototypes/#amadeus-hotel-booking-rubyonrails","title":"amadeus-hotel-booking-rubyonrails","text":"<p>This prototype (Link to GitHub) demonstrates an end-to-end Hotel booking process, which works in conjunction with 2 APIs, Hotel Search API and Hotel Booking API. </p>"},{"location":"examples/prototypes/#amadeus-async-flight-status","title":"amadeus-async-flight-status","text":"<p>This prototype (Link to GitHub) demonstrates an application with event-driven microservices that asynchronously consume events coming from the API and notifies end users of these events via SMS using Twilio SMS API. </p> <ul> <li> <p>Event-driven microservices for flight status alerts: part 1</p> </li> <li> <p>Event-driven microservices for flight status alerts: part 2</p> </li> </ul> <p> </p>"},{"location":"examples/prototypes/#flightsearchcalendar","title":"FlightSearchCalendar","text":"<p>This application (Link to GitHub) demonstrates a calendar application to display the flights within a date interval to find the cheapest possible prices using Amadeus APIs.</p>"},{"location":"examples/prototypes/#live-airport-city-search","title":"Live-Airport-City-Search","text":"<p>This application (Link to GitHub) lets you perform a live search for Airports and Cities through the Airport &amp; City Search API. The implementation is done through jQuery Autocomplete with Node and Express as the backend for which connects to the Amadeus API with Node SDK.</p> <p></p>"},{"location":"examples/prototypes/#amadeus-flight-booking-node","title":"amadeus-flight-booking-node","text":"<p>The Amadeus Flight Booking app is built with Node and Vue using the Node SDK. You can find the source code on GitHub </p>"},{"location":"migration-guides/","title":"Migration guides","text":"<p>To ensure you have a seamless transition to the latest API version, we've compiled migration guides for your reference. As we continuously enhance our APIs and launch new releases, these guides will assist you in the upgrading process.</p> API Migration guide Hotel Search API From v2.1 to v3"},{"location":"migration-guides/hotel-search/","title":"Hotel search","text":"<p>Are you still using the old version of the Hotel Search API? This guide will help you migrate to the new version of the Hotel Search API and leverage its advantages right from the start.</p>"},{"location":"migration-guides/hotel-search/#how-is-the-hotel-search-api-v3-different-to-v21","title":"How is the Hotel Search API v3 different to v2.1?","text":"<p>The main difference between the two API versions is that the v2.1 endpoint <code>/shopping/hotel-offers/by-hotel</code> has been integrated into the v3 <code>/shopping/hotel-offers/ endpoint</code>. All hotel offers in the Hotel Search v3 are now queried by hotel\u2019s unique Amadeus Id, which renders the v2.1 endpoint <code>/shopping/hotel-offers/by-hotel</code> obsolete.</p> <p>We also have a new API to help you ensure a seamless migration \u2013 the Hotel List API. This API returns a list of hotels by a unique Amadeus hotel Id, IATA city code or geographic coordinates.</p> <p>The diagram below shows a high-level overview of the differences between the Hotel Search API v2.1 and v3.</p> <p> </p> <p>Now let\u2019s have a closer look at the differences on the parameters level.</p>"},{"location":"migration-guides/hotel-search/#get-shoppinghotel-offers","title":"GET /shopping/hotel-offers","text":""},{"location":"migration-guides/hotel-search/#new-required-query-parameters","title":"New required query parameters","text":"Parameter Description <code>hotelIds</code> Amadeus property codes on 8 chars. This parameter was an optional query parameter in v2.1. <code>adults</code> Number of adult guests (1-9) per room. This parameter was an optional query parameter in v2.1."},{"location":"migration-guides/hotel-search/#removed-query-parameters","title":"Removed query parameters","text":"Parameter Description <code>cityCode</code> Destination IATA city code. This parameter is still returned in the successful response for each hotel. To search a hotel by the IATA city code, use the Hotel List API. <code>latitude</code> Latitude of a geographical point used for the search. This parameter is returned in the successful response for each hotel as the latitude of the given hotel. To search a hotel by geographic coordinates, use the Hotel List API. <code>longitude</code> Longitude of a geographical point used for the search. This parameter is returned in the successful response for each hotel as the longitude of the given hotel. To search a hotel by geographic coordinates, use the Hotel List API. <code>radius</code> Maximum distance (in radiusUnit) from Destination (city centre or geocodes). This parameter is not present in the response. <code>radiusUnit</code> Distance unit (of the radius value). This parameter is not present in the response. <code>hotelName</code> Hotel name used for the search. This parameter is returned in the successful response for each hotel. <code>chains</code> Chain (EM...) or Brand (SB...) or Merchant (AD...) (comma separated list of Amadeus 2 chars codes). This parameter is now shown as chainCode and returned in the successful response for each hotel. <code>amenities</code> Amenities list per hotel. To use this parameter for hotel search, refer to the Hotel List API. <code>ratings</code> Hotel stars. To use this parameter for hotel search, refer to the Hotel List API. <code>cacheControl</code> Parameter to force bypass the Amadeus cache (slower response) or get only hotels that are in the cache."},{"location":"migration-guides/hotel-search/#added-optional-query-parameters","title":"Added optional query parameters","text":"Parameter Description <code>countryOfResidence</code> Code of the traveller\u2019s country of residence in the ISO 3166-1 format."},{"location":"migration-guides/hotel-search/#data-model-changes","title":"Data model changes","text":""},{"location":"migration-guides/hotel-search/#hotel-offers","title":"Hotel Offers","text":""},{"location":"migration-guides/hotel-search/#removed-parameters","title":"Removed parameters","text":"<p>\u2022   The hotel object does not contain the hotelDistance object as the search by radius has been omitted. \u2022   The address, contact, amenities and media objects are excluded from the response. \u2022   Metadata for the pagination is not in the response as the Hotel Search v3 does not use pagination.</p>"},{"location":"migration-guides/hotel-search/#added-parameters","title":"Added parameters","text":"<p>\u2022   The offers object now contains the checkInDate and checkOutDate. \u2022   New object commission has been added to the response. \u2022   New object taxes has been added to the response.</p> Parameter Description <code>checkInDate</code> Check-in date. <code>checkOutDate</code> Check-out date. <code>commission</code> This object defines the commission to be paid by the traveller to the hotel. It has three properties:<ul><li><code>percentage</code> \u2013 a string showing the percentage of the commission paid to the travel seller, the value is between 0 and 100.</li><li><code>amount</code> \u2013 a string showing the amount of the commission paid to the travel seller, the amount is always linked to the currency code of the offer.</li><li><code>description</code> \u2013 a string for the free text field for any notes on the commission.</li></ul> <code>taxes</code> This object shows the tax data as per the IATA tax definition: \u201cAn impost for raising revenue for the general treasury and which will be used for general public purposes\u201d. It contains the following properties:<ul><li><code>amount</code> - a string, which defines the tax amount with a decimal separator.</li><li><code>currency</code>- a string, which defines a monetary unit of the tax. It is a three-alpha code (IATA code). Example: EUR for Euros, USD for US dollar, etc.</li><li><code>code</code> - a string for the International Standards Organization (ISO) Tax code. It is a two-letter country code.</li><li><code>percentage</code> - a string, which will indicate, in the case of a tax on TST value, the percentage of the tax.</li><li><code>included</code> - a boolean, which indicates if tax is included or not.</li><li><code>description</code> - a string for the tax description.</li><li><code>pricingFrequency</code> - a string, which specifies if the tax applies per stay or per night.</li><li><code>pricingMode</code> - a string, which specifies if the tax applies per occupant or per room.</li></ul>"},{"location":"migration-guides/hotel-search/#get-shoppinghotel-offersofferid","title":"GET / shopping/hotel-offers/{offerId}","text":""},{"location":"migration-guides/hotel-search/#data-model-changes_1","title":"Data Model changes","text":""},{"location":"migration-guides/hotel-search/#offers","title":"Offers","text":""},{"location":"migration-guides/hotel-search/#added-parameters_1","title":"Added parameters","text":"<p>\u2022   The checkInDate, checkOutDate, category, commission, boardType properties have been added. \u2022   The price object has additional properties sellingTotal, base, taxes, markups, variations. \u2022   New object policies has been added.</p> Parameter Description <code>checkInDate</code> Check-in date. <code>checkOutDate</code> Check-out date. <code>category</code> Offer category. <code>commission</code> This object defines the commission to be paid by the traveller to the hotel. It has three properties:<ul><li><code>percentage</code> \u2013 a string showing the percentage of the commission paid to the travel seller, the value is between 0 and 100.</li><li><code>amount</code> \u2013 a string showing the amount of the commission paid to the travel seller, the amount is always linked to the currency code of the offer.</li><li><code>description</code> \u2013 a string for the free text field for any notes on the commission.</li></ul> <code>sellingTotal</code> A string defining the price Total + margins + markup + totalFees \u2013 discounts. <code>base</code> A string for the base price of the offer. <code>taxes</code> This object shows the tax data as per the IATA Tax definition: \u201cAn impost for raising revenue for the general treasury and which will be used for general public purposes\u201d. It contains the following properties:<ul><li><code>amount</code> - a string, which defines the tax amount with a decimal separator.</li><li><code>currency</code>- a string, which defines a monetary unit of the tax. It is a three-alpha code (IATA code). Example: EUR for Euros, USD for US dollar, etc.</li><li><code>code</code> - a string for the International Standards Organization (ISO) Tax code. It is a two-letter country code.</li><li><code>percentage</code> - a string, which will indicate, in the case of a tax on TST value, the percentage of the tax.</li><li><code>included</code> - a boolean, which indicates if tax is included or not.</li><li><code>description</code> - a string for the tax description.</li><li>pricingFrequency - a string, which specifies if the tax applies per stay or per night.</li></ul> <code>pricingMode</code> a string, which specifies if the tax applies per occupant or per room. <code>markups</code> An object defining the markup. Markups are applied to provide a service or a product to the client. The markup can be introduced by any stakeholder. Typical use case is to convey markup information set by the travel agent or in case of merchant mode. The object contains a string amount, which defines the monetary value with a decimal position. <code>variations</code> An object defining the hotel daily price variations. It has the following properties:<ul><li><code>average</code> \u2013 an object that encompasses the price object.</li><li><code>changes</code> \u2013 an object defining the collection of price periods if the daily price changes during the stay.</li></ul> <code>policies</code> An object defining the hotel booking rules."},{"location":"migration-guides/hotel-search/#hotel","title":"Hotel","text":""},{"location":"migration-guides/hotel-search/#removed-parameters_1","title":"Removed parameters","text":"<p>The rating, latitude, longitude, amenities, media parameters have been removed.</p>"},{"location":"migration-guides/hotel-search/#values-returned-by-the-response","title":"Values returned by the response","text":"<p>The address, contact, amenities, media values have been removed.</p>"},{"location":"migration-guides/hotel-search/#use-case-inspirations","title":"Use case inspirations","text":"<p>You can easily integrate the new Hotel Search API in your hotel booking engine or combine it with other APIs in our Hotel category, such as the Hotel Ratings API or Hotel Name Autocomplete API. Whatever your use case might be, the Amadeus Self-Service APIs will help your business achieve the competitive advantage in the travel industry.</p>"},{"location":"migration-guides/hotel-search/#faq","title":"FAQ","text":"<ul> <li> <p>How can I get the hotel image/address/contact details/rating/amenities?</p> <ul> <li>Due to legal constraints we, unfortunately, can no longer distribute hotel images and specific details through our Self-Service APIs. </li> <li>As a workaround we recommend using Leonardo, our trusted data provider.</li> <li>Also, we have built some Python tutorials about how to get the hotel address using geocoding APIs and Google Place APIs and how to get the hotel images with Google Places API. You should be able to adapt them in your own programming language easily.</li> </ul> </li> <li> <p>How can I use the data without the cache data control?</p> <ul> <li>The Hotel Search API v3 is using live data directly while avoiding the need to build cache and add any extra validation mechanisms to the data.</li> </ul> </li> <li> <p>How do I get the hotel rating?</p> <ul> <li>We offer data on hotel rating via our Hotel Rating API. Please bear in mind that this rating information is based on the sentiment analysis and not the star rating system. You can, however, retrieve a list of hotels by their star rating using the Hotel List API with the required star rating as an additional query parameter.</li> </ul> </li> </ul>"},{"location":"resources/","title":"Self-Service API tutorials","text":"<p>In this section, you'll discover a comprehensive collection of tutorials for each Self-Service API, organized by their respective categories. These tutorials delve into the typical use cases for each API and offer illustrative examples of parameters, along with clear explanations of their function.</p> Tutorial Coverage Flights <ul><li>Flight Offers Search</li><li>Flight Offers Price</li><li>Flight Create Orders</li><li>Flight Order Management</li><li>Seatmap Display</li><li>Branded Fares Upsell</li><li>Flight Price Analysis</li><li>Flight Choice Prediction</li><li>Flight Inspiration Search</li><li>Flight Cheapest Date Search</li><li>Flight Availabilities Search</li><li>Travel Recommendations</li><li>On Demand Flight Status</li><li>Flight Delay Prediction</li><li>Airport &amp; City Search</li><li>Airport Nearest Relevant</li><li>Airport Routes API</li><li>Airport On-Time Performance</li><li>Flight Check-in Links</li><li>Airline Code Lookup</li> <li>Airline Routes</li></ul> Destination Experiences <ul><li>Points of Interest</li><li>Tours and Activities</li><li>City Search</li></ul> Cars and Transfers <ul><li>Transfer Booking</li><li>Transfer Management</li><li>Transfer Search</li></ul> Market insights <ul><li>Flight Most Traveled Destinations</li><li>Flight Most Booked Destinations</li><li>Flight Busiest Traveling Period</li><li>Location Score</li></ul> Hotels <ul><li>Hotel List</li><li>Hotel Ratings</li><li>Hotel Search</li><li>Hotel Booking</li><li>Hotel Name Autocomplete API</li></ul> Itinerary Management <ul><li>Trip Purpose Prediction</li></ul>"},{"location":"resources/cars-transfers/","title":"Cars and Transfers","text":"<p>The Amadeus Cars and Transfers APIs provide an extensive suite of capabilities designed to simplify the process of booking and managing transfers during a traveler's trip, delivering a seamless and efficient experience.</p> <p></p> <p>Have a look at our dedicated Postman collection to easily test the Cars and Transfers API with pre-set requests.</p> APIs Description Transfer Search This API enables users to search for a transfer using a range of pre-arranged transportation options. These options include Private Transfers, Hourly Services, Taxis, Shared Transfers, Airport Express trains and buses, Private Jets, and Helicopter Transfers. Transfer Booking Once a transfer is chosen, the Transfer Booking API completes the reservation. It provides a unique booking ID and reservation details, which can be used to manage the reservation later. Transfer Management This API provides tools for managing transfer reservations. Using the booking ID provided by the Transfer Booking API, users can cancel reservations."},{"location":"resources/cars-transfers/#search-for-a-transfer","title":"Search for a transfer","text":"<p>The search is carried out through a POST API call to /shopping\u200b/transfer-offers. The API request includes parameters like the start and end locations, type of transfer, number of passengers, provider codes, and other optional parameters.</p> <p>In the following example request, we have multiple parameters each with its own specific meaning and structure:</p> <ul> <li> <p><code>startLocationCode</code>: \"CDG\" - This is an International Air Transport Association (IATA) airport code which represents Charles de Gaulle Airport in Paris, France. The starting location of the journey.</p> </li> <li> <p><code>endAddressLine</code>: \"Avenue Anatole France, 5\" - This is the exact address where the journey will end, presumably a location in Paris.</p> </li> <li> <p><code>endCityName</code>: \"Paris\" - The city where the journey ends.</p> </li> <li> <p><code>endZipCode</code>: \"75007\" - This represents the postal code of the end location.</p> </li> <li> <p><code>endCountryCode</code>: \"FR\" - It's a two-letter country code representing France.</p> </li> <li> <p><code>endName</code>: \"Souvenirs De La Tour\" - The name of the destination, perhaps a business or venue at the end location.</p> </li> <li> <p><code>endGooglePlaceId</code>: \"ChIJL-DOWeBv5kcRfTbh97PimNc\" - A unique identifier that Google assigns to a location. You can use it to get more details about this location using Google's Places API.</p> </li> <li> <p><code>endGeoCode</code>: \"48.859466,2.2976965\" - The geographical coordinates of the end location. The first number is latitude and the second is longitude.</p> </li> <li> <p><code>transferType</code>: \"PRIVATE\" - This indicates that the transfer type is private, meaning the transfer will not be shared with others. This value is the Amadeus transfer service type, which can take one of the following:</p> </li> <li> <p>PRIVATE: Private transfer from point to point</p> </li> <li>SHARED: Shared transfer from point to point</li> <li>TAXI: Taxi reservation from point to point, price is estimated</li> <li>HOURLY: Chauffeured driven transfer per hour</li> <li>AIRPORT_EXPRESS: Express Train from/to Airport</li> <li>AIRPORT_BUS: Express Bus from/to Airport</li> <li>HELICOPTER: Private helicopter flight from/to airport</li> <li> <p>PRIVATE_JET: Private flight from airport to airport</p> </li> <li> <p><code>startDateTime</code>: \"2021-11-10T10:30:00\" - The ISO 8601 timestamp when the journey begins.</p> </li> <li> <p><code>providerCodes</code>: \"TXO\" - The code representing the provider of the transfer service.</p> </li> <li> <p><code>passengers</code>: 2 - The total number of passengers who will take the journey.</p> </li> <li> <p><code>stopOvers</code>: This is an array of objects representing different stopovers on the journey. Each object includes details about the duration of the stopover, the sequence number (which stopover it is), and information about the stopover's address, country code, city name, zip code, Google place ID, name, and geographical coordinates. For example, a <code>stopOver</code> object might look like this:</p> </li> </ul> <pre><code>{\n  \"duration\": \"PT2H30M\",\n  \"sequenceNumber\": 1,\n  \"addressLine\": \"Avenue de la Bourdonnais, 19\",\n  \"countryCode\": \"FR\",\n  \"cityName\": \"Paris\",\n  \"zipCode\": \"75007\",\n  \"googlePlaceId\": \"DOWeBv5kcRfTbh97PimN\",\n  \"name\": \"De La Tours\",\n  \"geoCode\": \"48.859477,2.2976985\",\n  \"stateCode\": \"FR\"\n}\n</code></pre> <ul> <li> <p><code>startConnectedSegment</code>: This object contains information about a connected transportation segment, like a flight, that leads to the start of this transfer. It includes details about the transportation type, transportation number, and the departure and arrival of this segment.</p> </li> <li> <p><code>passengerCharacteristics</code>: This array of objects includes details about the passengers' type codes and their ages. For example, \"ADT\" stands for an adult passenger and \"CHD\" stands for a child passenger.</p> </li> </ul> <pre><code>{\n  \"startLocationCode\": \"CDG\",\n  ...\n  \"endGeoCode\": \"48.859466,2.2976965\",\n  \"transferType\": \"PRIVATE\",\n  ...\n  \"passengers\": 2,\n  \"stopOvers\": [\n    {\n      \"duration\": \"PT2H30M\",\n      \"sequenceNumber\": 1,\n      ...\n      \"stateCode\": \"FR\"\n    }\n  ],\n  ...\n  \"passengerCharacteristics\": [\n    {\n      \"passengerTypeCode\": \"ADT\",\n      \"age\": 20\n    },\n    ...\n  ]\n}\n</code></pre> <p>This request initiates a search for a private transfer for two passengers from location CDG with specific passenger characteristics and other details.</p> <p>Let's have a look at the response:</p> <pre><code>{\n  \"data\": [\n    {\n      \"type\": \"transfer-offer\",\n      \"id\": \"0cb11574-4a02-11e8-842f-0ed5f89f718b\",\n      \"transferType\": \"PRIVATE\",\n      \"start\": {\n        \"dateTime\": \"2021-11-10T10:30:00\",\n        \"locationCode\": \"CDG\"\n      },\n      \"end\": {\n        \"address\": {\n          \"line\": \"Avenue Anatole France, 5\",\n          \"zip\": \"75007\",\n          \"countryCode\": \"FR\",\n          \"cityName\": \"Paris\",\n          \"latitude\": 48.859466,\n          \"longitude\": 2.2976965\n        },\n        \"googlePlaceId\": \"ChIJL-DOWeBv5kcRfTbh97PimNc\",\n        \"name\": \"Souvenirs De La Tour\"\n      },\n      \"stopOvers\": [\n        {\n          \"duration\": \"PT2H30M\",\n          \"sequenceNumber\": 1,\n          \"location\": {\n            \"locationCode\": \"CDG\",\n            \"address\": {\n              \"line\": \"Avenue de la Bourdonnais, 19\",\n              \"zip\": \"75007\",\n              \"countryCode\": \"FR\",\n              \"cityName\": \"Paris\",\n              \"latitude\": 48.859477,\n              \"longitude\": 2.2976975\n            },\n            \"googlePlaceId\": \"DOWeBv5kcRfTbh97PimN\",\n            \"name\": \"De La Tours\"\n          }\n        }\n      ],\n      \"vehicle\": {\n        \"code\": \"VAN\",\n        \"category\": \"BU\",\n        \"description\": \"Mercedes-Benz V-Class, Chevrolet Suburban, Cadillac Escalade or similar\",\n        \"seats\": [\n          {\n            \"count\": 3\n          }\n        ],\n        \"baggages\": [\n          {\n            \"count\": 3,\n            \"size\": \"M\"\n          }\n        ],\n        \"imageURL\": \"https://provider.com/images/BU_VAN.png\"\n      },\n      \"serviceProvider\": {\n        \"code\": \"ABC\",\n        \"name\": \"Provider name\",\n        \"logoUrl\": \"https://provider.com/images/logo.png\",\n        \"termsUrl\": \"https://provider.com/terms_and_conditions.html\",\n        \"contacts\": {\n          \"phoneNumber\": \"+33123456789\",\n          \"email\": \"support@provider.com\"\n        },\n        \"settings\": [\n          \"BILLING_ADDRESS_REQUIRED\",\n          \"FLIGHT_NUMBER_REQUIRED\",\n          \"CVV_NUMBER_REQUIRED\"\n        ]\n      },\n      \"quotation\": {\n        \"monetaryAmount\": \"63.70\",\n        \"currencyCode\": \"USD\",\n        \"isEstimated\": false,\n        \"base\": {\n          \"monetaryAmount\": \"103.70\"\n        },\n        \"discount\": {\n          \"monetaryAmount\": \"50.00\"\n        },\n        \"fees\": [\n          {\n            \"indicator\": \"AIRPORT\",\n            \"monetaryAmount\": \"10.00\"\n          }\n        ],\n        \"totalTaxes\": {\n          \"monetaryAmount\": \"12.74\"\n        },\n        \"totalFees\": {\n          \"monetaryAmount\": \"10.00\"\n        }\n      },\n      \"converted\": {\n        \"monetaryAmount\": \"63.70\",\n        \"currencyCode\": \"EUR\",\n        \"isEstimated\": false,\n        \"base\": {\n          \"monetaryAmount\": \"103.70\"\n        },\n        \"discount\": {\n          \"monetaryAmount\": \"50.00\"\n        },\n        \"fees\": [\n          {\n            \"indicator\": \"AIRPORT\",\n            \"monetaryAmount\": \"10.00\"\n          }\n        ],\n        \"totalTaxes\": {\n          \"monetaryAmount\": \"12.74\"\n        },\n        \"totalFees\": {\n          \"monetaryAmount\": \"10.00\"\n        }\n      },\n      \"extraServices\": [\n        {\n          \"code\": \"EWT\",\n          \"itemId\": \"EWT0291\",\n          \"description\": \"Extra 15 min. wait\",\n          \"quotation\": {\n            \"monetaryAmount\": \"39.20\",\n            \"currencyCode\": \"USD\",\n            \"base\": {\n              \"monetaryAmount\": \"36.00\"\n            },\n            \"totalTaxes\": {\n              \"monetaryAmount\": \"3.20\"\n            }\n          },\n          \"converted\": {\n            \"monetaryAmount\": \"32.70\",\n            \"currencyCode\": \"EUR\",\n            \"base\": {\n              \"monetaryAmount\": \"30.00\"\n            },\n            \"totalTaxes\": {\n              \"monetaryAmount\": \"2.7\"\n            }\n          },\n          \"isBookable\": true,\n          \"taxIncluded\": true,\n          \"includedInTotal\": false\n        }\n      ],\n      \"equipment\": [\n        {\n          \"code\": \"BBS\",\n          \"description\": \"Baby stroller or Push chair\",\n          \"quotation\": {\n            \"monetaryAmount\": \"39.20\",\n            \"currencyCode\": \"USD\",\n            \"base\": {\n              \"monetaryAmount\": \"36.00\"\n            },\n            \"totalTaxes\": {\n              \"monetaryAmount\": \"3.20\"\n            }\n          },\n          \"converted\": {\n            \"monetaryAmount\": \"32.70\",\n            \"currencyCode\": \"EUR\",\n            \"base\": {\n              \"monetaryAmount\": \"30.00\"\n            },\n            \"totalTaxes\": {\n              \"monetaryAmount\": \"2.7\"\n            }\n          },\n          \"isBookable\": true,\n          \"taxIncluded\": true,\n          \"includedInTotal\": false\n        }\n      ],\n      \"cancellationRules\": [\n        {\n          \"feeType\": \"PERCENTAGE\",\n          \"feeValue\": \"100\",\n          \"metricType\": \"DAYS\",\n          \"metricMin\": \"0\",\n          \"metricMax\": \"1\"\n        },\n        {\n          \"feeType\": \"PERCENTAGE\",\n          \"feeValue\": \"0\",\n          \"metricType\": \"DAYS\",\n          \"metricMin\": \"1\",\n          \"metricMax\": \"100\"\n        }\n      ],\n      \"methodsOfPaymentAccepted\": [\n        \"CREDIT_CARD\",\n        \"INVOICE\"\n      ],\n      \"discountCodes\": [\n        {\n          \"type\": \"CD\",\n          \"value\": \"FJKS0289LDIW234\"\n        }\n      ],\n      \"distance\": {\n        \"value\": 152,\n        \"unit\": \"KM\"\n      },\n      \"startConnectedSegment\": {\n        \"transportationType\": \"FLIGHT\",\n        \"transportationNumber\": \"AF380\",\n        \"departure\": {\n          \"localDateTime\": \"2021-11-10T09:00:00\",\n          \"iataCode\": \"NCE\"\n        },\n        \"arrival\": {\n          \"localDateTime\": \"2021-11-10T10:00:00\",\n          \"iataCode\": \"CDG\"\n        }\n      },\n      \"passengerCharacteristics\": [\n        {\n          \"passengerTypeCode\": \"ADT\",\n          \"age\": 20\n        },\n        {\n          \"passengerTypeCode\": \"CHD\",\n          \"age\": 10\n        }\n      ]\n    }\n  ],\n  \"warnings\": [\n    {\n      \"code\": 101,\n      \"title\": \"PICK-UP DATE TIME CHANGED\",\n      \"detail\": \"Transfer pick-up date and time have been changed by provider\",\n      \"source\": {\n        \"pointer\": \"/data/1/start/dateTime\",\n        \"parameter\": \"dateTime\"\n      }\n    }\n  ]\n}\n</code></pre> <p>The data represents a private transfer offer with the id <code>0cb11574-4a02-11e8-842f-0ed5f89f718b</code>. The transfer begins from the location <code>CDG</code> at the time <code>2021-11-10T10:30:00</code> and ends at the location <code>Souvenirs De La Tour</code> located at Avenue Anatole France, 5 in Paris, France.</p> <p>During the journey, there's a stopover at <code>De La Tours</code> situated at Avenue de la Bourdonnais, 19 in Paris, France for 2 hours and 30 minutes. The vehicle to be used for this transfer is a VAN in the category BU. The model of the vehicle can be a Mercedes-Benz V-Class, Chevrolet Suburban, Cadillac Escalade or similar. The vehicle can accommodate 3 passengers and 3 medium-sized baggages.</p> <p>The transfer service provider is <code>Provider name</code> with the code <code>ABC</code>. The quotation for the transfer is 63.70 USD after a discount of 50.00 USD from the base price of 103.70 USD. The total taxes and fees for the transfer are 12.74 USD and 10.00 USD respectively.</p> <p>There are also options to avail extra services like \"Extra 15 min. wait\" for 39.20 USD and to rent equipment like <code>Baby stroller or Push chair</code> for 39.20 USD. The cancellation rules state a 100% fee for cancellations made between 0 to 1 day before the transfer and no fee for cancellations made between 1 to 100 days before the transfer.</p> <p>The payment for the transfer can be made through Credit Card or Invoice. A discount code <code>FJKS0289LDIW234</code> is also available for use.</p> <p>This transfer offer is linked to a flight with the transportation number <code>AF380</code> departing from <code>NCE</code> at <code>2021-11-10T09:00:00</code> and arriving at <code>CDG</code> at <code>2021-11-10T10:00:00</code>. The transfer caters to a passenger aged 20 and a child aged 10.</p> <p>A warning code <code>101</code> titled <code>PICK-UP DATE TIME CHANGED</code> is issued stating that the transfer pick-up date and time have been changed by the provider.</p>"},{"location":"resources/cars-transfers/#booking-a-transfer","title":"Booking a transfer","text":"<p>Let's now look into the Transfer Booking API.</p> <p>The main endpoint URL is <code>https://test.api.amadeus.com/v1/ordering/transfer-orders?offerId=&lt;OFFER_ID&gt;</code>. The parameter <code>&lt;OFFER_ID&gt;</code> needs to be replaced with the actual ID of the offer you wish to order, such as <code>0cb11574-4a02-11e8-842f-0ed5f89f718b</code>, which we obtained in our previous example.</p> <p><pre><code>{\n  \"data\": {\n    \"note\": \"Note to driver\",\n    \"passengers\": [\n      {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"title\": \"MR\",\n        \"contacts\": {\n          \"phoneNumber\": \"+33123456789\",\n          \"email\": \"user@email.com\"\n        },\n        \"billingAddress\": {\n          \"line\": \"Avenue de la Bourdonnais, 19\",\n          \"zip\": \"75007\",\n          \"countryCode\": \"FR\",\n          \"cityName\": \"Paris\"\n        }\n      }\n    ],\n    \"agency\": {\n      \"contacts\": [\n        {\n          \"email\": {\n            \"address\": \"abc@test.com\"\n          }\n        }\n      ]\n    },\n    \"payment\": {\n      \"methodOfPayment\": \"CREDIT_CARD\",\n      \"creditCard\": {\n        \"number\": \"4111111111111111\",\n        \"holderName\": \"JOHN DOE\",\n        \"vendorCode\": \"VI\",\n        \"expiryDate\": \"1018\",\n        \"cvv\": \"111\"\n      }\n    },\n    \"extraServices\": [\n      {\n        \"code\": \"EWT\",\n        \"itemId\": \"EWT0291\"\n      }\n    ],\n    \"equipment\": [\n      {\n        \"code\": \"BBS\"\n      }\n    ],\n    \"corporation\": {\n      \"address\": {\n        \"line\": \"5 Avenue Anatole France\",\n        \"zip\": \"75007\",\n        \"countryCode\": \"FR\",\n        \"cityName\": \"Paris\"\n      },\n      \"info\": {\n        \"AU\": \"FHOWMD024\",\n        \"CE\": \"280421GH\"\n      }\n    },\n    \"startConnectedSegment\": {\n      \"transportationType\": \"FLIGHT\",\n      \"transportationNumber\": \"AF380\",\n      \"departure\": {\n        \"uicCode\": \"7400001\",\n        \"iataCode\": \"CDG\",\n        \"localDateTime\": \"2021-03-27T20:03:00\"\n      },\n      \"arrival\": {\n        \"uicCode\": \"7400001\",\n        \"iataCode\": \"CDG\",\n        \"localDateTime\": \"2021-03-27T20:03:00\"\n      }\n    },\n    \"endConnectedSegment\": {\n      \"transportationType\": \"FLIGHT\",\n      \"transportationNumber\": \"AF380\",\n      \"departure\": {\n        \"uicCode\": \"7400001\",\n        \"iataCode\": \"CDG\",\n        \"localDateTime\": \"2021-03-27T20:03:00\"\n      },\n      \"arrival\": {\n        \"uicCode\": \"7400001\",\n        \"iataCode\": \"CDG\",\n        \"localDateTime\": \"2021-03-27T20:03:00\"\n      }\n    }\n  }\n}\n</code></pre> - <code>data</code>: Root level object encapsulating all the necessary data for the transfer order.     - <code>note</code>: A string containing a note intended for the driver. (Example: \"Note to driver\")     - <code>passengers</code>: An array of objects, each representing a passenger with the following properties:         - <code>firstName</code>: A string containing the passenger's first name. (Example: \"John\")         - <code>lastName</code>: A string containing the passenger's last name. (Example: \"Doe\")         - <code>title</code>: A string containing the passenger's title (\"MR\", \"MS\", etc.). (Example: \"MR\")         - <code>contacts</code>: An object containing contact details:             - <code>phoneNumber</code>: A string containing the passenger's phone number. (Example: \"+33123456789\")             - <code>email</code>: A string containing the passenger's email address. (Example: \"user@email.com\")         - <code>billingAddress</code>: An object containing the billing address details:             - <code>line</code>: Street name and number. (Example: \"Avenue de la Bourdonnais, 19\")             - <code>zip</code>: Zip or postal code. (Example: \"75007\")             - <code>countryCode</code>: Country code. (Example: \"FR\")             - <code>cityName</code>: City name. (Example: \"Paris\")     - <code>agency</code>: An object representing the agency details with the following properties:         - <code>contacts</code>: An array containing objects, each representing a contact's details:             - <code>email</code>: An object containing the email details:                 - <code>address</code>: A string containing the contact's email address. (Example: \"abc@test.com\")     - <code>payment</code>: An object containing payment details:         - <code>methodOfPayment</code>: A string indicating the method of payment. (Example: \"CREDIT_CARD\")         - <code>creditCard</code>: An object containing credit card details:             - <code>number</code>: A string containing the credit card number. (Example: \"4111111111111111\")             - <code>holderName</code>: A string containing the card holder's name. (Example: \"JOHN DOE\")             - <code>vendorCode</code>: A string containing the vendor's code. (Example: \"VI\")             - <code>expiryDate</code>: A string containing the expiry date of the card. (Example: \"1018\")             - <code>cvv</code>: A string containing the card's CVV. (Example: \"111\")     - <code>extraServices</code>: An array containing objects, each representing an extra service:         - <code>code</code>: A string indicating the service's code. (Example: \"EWT\")         - <code>itemId</code>: A string indicating the service's item ID. (Example: \"EWT0291\")     - <code>equipment</code>: An array containing objects, each representing an equipment detail:         - <code>code</code>: A string indicating the equipment's code. (Example: \"BBS\")     - <code>corporation</code>: An object containing corporation details:         - <code>address</code>: An object containing the corporation address:             - <code>line</code>: Street name and number. (Example: \"5 Avenue Anatole France\")             - <code>zip</code>: Zip or postal code. (Example: \"75007\")             - <code>countryCode</code>: Country code. (Example: \"FR\")             - <code>cityName</code>: City name. (Example: \"Paris\")         - <code>info</code>: An object containing additional corporation info:             - <code>AU</code>: Additional information (Example: \"FHOWMD024\")             - <code>CE</code>: Additional information (Example: \"280421GH\")     - <code>startConnectedSegment</code>: An object representing the start of a connected transport segment:         - <code>transportationType</code>: A string indicating the type of transportation. (Example: \"FLIGHT\")         - <code>transportationNumber</code>: A string indicating the transportation number. (Example: \"AF380\")         - <code>departure</code>: An object containing departure details:             - <code>uicCode</code>: A string indicating the UIC code. (Example: \"7400001\")             - <code>iataCode</code>: A string indicating the IATA code. (Example: \"CDG\")             - <code>localDateTime</code>: A string indicating the local date and time of departure. (Example: \"2021-03-27T20:03:00\")         - <code>arrival</code>: An object containing arrival details:             - <code>uicCode</code>: A string indicating the UIC code. (Example: \"7400001\")             - <code>iataCode</code>: A string indicating the IATA code. (Example: \"CDG\")             - <code>localDateTime</code>: A string indicating the local date and time of arrival. (Example: \"2021-03-27T20:03:00\")     - <code>endConnectedSegment</code>: An object representing the end of a connected transport segment (same structure as <code>startConnectedSegment</code>).</p>"},{"location":"resources/cars-transfers/#cancelling-a-transfer","title":"Cancelling a transfer","text":"<p>The Transfer Management API effectively allows us to cancel a transfer linked with an existing order.</p> <p>For example:</p> <p><code>POST https://test.api.amadeus.com/v1/ordering/transfer-orders/{orderId}/transfers/cancellation</code></p> <p>The <code>{orderId}</code> in the URL should be replaced with the unique identifier of the order that was previously generated when the order was created. For instance, the <code>orderId</code> could be something like <code>0cb11574-4a02-11e8-842f-0ed5f89f718b</code>.</p> <p>The <code>confirmNbr</code> is a unique confirmation number associated with the transfer that is to be cancelled. </p> <p>The response for this request will confirm the cancellation of the transfer. Here's an example response:</p> <pre><code>{\n  \"data\": {\n    \"confirmNbr\": \"2904892\",\n    \"reservationStatus\": \"CANCELLED\"\n  }\n}\n</code></pre> <p>In this example response, we see the <code>confirmNbr</code> <code>2904892</code> and the reservationStatus <code>CANCELLED</code>, confirming that the cancellation has been successful.</p>"},{"location":"resources/destination-experiences/","title":"Destination Experiences","text":"<p>With Amadeus Self-Service APIs, you can find data on over two million places and 150,000 activities and show travelers the best things to see and do. In the Destination Experiences category, we have two APIs available for that.</p> APIs Description Points of Interest Find the best sights, shops, and restaurants in any city or neighborhood. Tours and Activities Find the best tours, activities, and tickets in any city or neighborhood. Includes a deep link to book with the provider. City Search Finds cities that match a specific word or string of letters. <p>The first two APIs have the same behavior. You can search by radius or by a square, and retrieve results by ID. Let's go through them one by one.</p>"},{"location":"resources/destination-experiences/#show-travelers-the-best-sights-shops-and-restaurants","title":"Show Travelers the best sights, shops, and restaurants","text":"<p>The Points of Interest  API relies on AVUXI\u2019s GeoPopularity algorithm, which analyses and ranks geolocated data from more than 60 sources, including comments, photos, and reviews from millions of users.</p>"},{"location":"resources/destination-experiences/#search-by-radius","title":"Search by radius","text":"<p>The first endpoint supports only <code>GET</code> method and returns a list of points of interest for a given location - latitude and longitude - and a radius (1 km by default).</p> <p>The following sample returns a list of Points of Interest for someone geolocated in Barcelona downtown: </p> <pre><code>curl https://test.api.amadeus.com/v1/reference-data/locations/pois?latitude=41.397158&amp;longitude=2.160873\n</code></pre> <p>In case we want to expand the area of search, we could use the radius parameter. In the following example, we increase the radius to 3 kilometers:</p> <pre><code>curl https://test.api.amadeus.com/v1/reference-data/locations/pois?latitude=41.397158&amp;longitude=2.160873&amp;radius=3\n</code></pre>"},{"location":"resources/destination-experiences/#search-by-a-square","title":"Search by a square","text":"<p>The second endpoint works in a similar way to the radius-based endpoint. It also supports <code>GET</code> operations but it defines the area of search by a square: North, West, South, and East.</p> <p>The following example returns a list of points of interest for an area around Barcelona:</p> <pre><code>curl https://test.api.amadeus.com/v1/reference-data/locations/pois/by-square?north=41.397158&amp;west=2.160873&amp;south=41.394582&amp;east=2.177181   \n</code></pre>"},{"location":"resources/destination-experiences/#response","title":"Response","text":"<p>For both endpoints you can expect the same response format - a list of locations with the following JSON structure:</p> <pre><code>{\n            \"type\": \"location\",\n            \"subType\": \"POINT_OF_INTEREST\",\n            \"id\": \"AF57D529B2\",\n            \"self\": {\n                \"href\": \"https://test.api.amadeus.com/v1/reference-data/locations/pois/AF57D529B2\",\n                \"methods\": [\n                    \"GET\"\n                ]\n            },\n            \"geoCode\": {\n                \"latitude\": 41.40359,\n                \"longitude\": 2.17436\n            },\n            \"name\": \"La Sagrada Familia\",\n            \"category\": \"SIGHTS\",\n            \"rank\": 5,\n            \"tags\": [\n                \"church\",\n                \"sightseeing\",\n                \"temple\",\n                \"sights\",\n                \"attraction\",\n                \"historicplace\",\n                \"tourguide\",\n                \"landmark\",\n                \"professionalservices\",\n                \"latte\",\n                \"activities\",\n                \"commercialplace\"\n            ]\n        }\n</code></pre> <ul> <li><code>Type</code> and <code>subType</code> are literals with fixed values.</li> <li><code>id</code> is a unique value for this point of interest, which you can use in the next endpoint. </li> <li><code>geoCode</code> is a structure that contains geolocation information: latitude and longitude of the location.</li> <li><code>name</code> contains the string identifying the location.</li> <li><code>category</code> corresponds to the category of the location and could be one of the following values: SIGHTS, BEACH_PARK, HISTORICAL, NIGHTLIFE, RESTAURANT, or SHOPPING.</li> <li><code>rank</code> is the position compared to other locations based on how famous a place is, with 1 being the highest.</li> <li><code>tags</code> field is a list of words related to that location, which comes directly from the different sources of data analyzed.</li> </ul>"},{"location":"resources/destination-experiences/#retrieve-by-id","title":"Retrieve by Id","text":"<p>You can also keep the unique Id of each point of interest and retrieve it with the last endpoint as below.</p> <pre><code>curl https://test.api.amadeus.com/v1/reference-data/locations/pois/AF57D529B2  \n</code></pre>"},{"location":"resources/destination-experiences/#offer-tours-activities-and-attraction-tickets","title":"Offer tours, activities, and attraction tickets","text":"<p>The Tours and Activities  API  is built in partnership with MyLittleAdventure. Tours and Activities  API enables you to offer users the best activities in any destination, complete with a photo, description, price, and link to book the activity directly with the provider. </p> <p>For the API, we partnered with MyLittleAdventure which aggregates offers from over 45 of the world\u2019s top activity platforms, such as Viator, GetYourGuide, Klook and Musement and applies an algorithm to identify duplicate activities across providers, compare them and return the best one. </p> <p>You can now help your users find the best things to do in over 8,000 destinations worldwide and book more than 300,000 unique activities including sightseeing tours, day trips, skip-the-line museum tickets, food tours, hop-on-hop-off bus tickets and much more. </p> <p>This API has the same design as other endpoints, such as the Points of Interest API.</p>"},{"location":"resources/destination-experiences/#search-by-radius_1","title":"Search by radius","text":"<p>You can search activities for a specific location by providing a latitude and longitude. The API returns activities within a 1km radius, but you can also define a custom radius. </p> <pre><code>curl https://test.api.amadeus.com/v1/shopping/activities/longitude=-3.69170868&amp;latitude=40.41436995&amp;radius=1   \n</code></pre>"},{"location":"resources/destination-experiences/#search-by-a-square_1","title":"Search by a square","text":"<p>You can search activities within a given area by providing the coordinates: North, West, South, and East. </p> <pre><code>curl https://test.api.amadeus.com/v1/shopping/activities/by-square?north=41.397158&amp;west=2.160873&amp;south=41.394582&amp;east=2.177181 \n</code></pre>"},{"location":"resources/destination-experiences/#response_1","title":"Response","text":"<p>Let\u2019s look at a sample response from the Tours and Activities API:</p> <pre><code>{ \n  \"data\": [ \n    { \n      \"id\": \"23642\", \n      \"type\": \"activity\", \n      \"self\": { \n        \"href\": \"https://test.api.amadeus.com/v1/shopping/activities/23642\", \n        \"methods\": [ \n          \"GET\" \n        ] \n      }, \n      \"name\": \"Skip-the-line tickets to the Prado Museum\", \n      \"shortDescription\": \"Book your tickets for the Prado Museum in Madrid, discover masterpieces by Vel\u00e1zquez, Goya, Mantegna, Raphael, Tintoretto and access all temporary exhibitions.\", \n      \"geoCode\": { \n        \"latitude\": \"40.414000\", \n        \"longitude\": \"-3.691000\" \n      }, \n      \"rating\": \"4.500000\", \n      \"pictures\": [ \n        \"https://images.musement.com/cover/0001/07/prado-museum-tickets_header-6456.jpeg?w=500\" \n      ], \n      \"bookingLink\": \"https://b2c.mla.cloud/c/QCejqyor?c=2WxbgL36\", \n      \"price\": { \n        \"currencyCode\": \"EUR\", \n        \"amount\": \"16.00\" \n      } \n    } \n  ] \n} \n</code></pre> <p>As you can see, the API returns a unique activity Id along with the activity name, short description, geolocation, customer rating, image, price and deep link to the provider page to complete the booking.  </p> <ul> <li><code>Type</code> is a literal with a fixed value.</li> <li><code>id</code> is a unique value for this activity, that you can use in the next endpoint. </li> <li><code>name</code> and <code>shortDescription</code> contains the information about the activity. </li> <li><code>geoCode</code> is a structure that contains geolocation information: latitude and longitude of the location.</li> <li><code>rating</code> is a rating of the activity. </li> <li><code>pictures</code> and <code>booking link</code> are external links to check the relevant pictures and to go to the booking URL from the activity provider.</li> <li><code>price</code> is the price of the fare, which can be alpha-numeric. Ex- 500.20 or 514.13A, <code>A</code> signifies additional collection.</li> </ul>"},{"location":"resources/destination-experiences/#retrieve-by-id_1","title":"Retrieve by Id","text":"<p>Same as Points of Interest  API, you can keep the unique Id of each activity and retrieve it with the last endpoint as below.</p> <pre><code>curl https://test.api.amadeus.com/v1/shopping/activities/23642\n</code></pre>"},{"location":"resources/destination-experiences/#find-a-city-by-keywords","title":"Find a city by keywords","text":"<p>If you are unsure of the exact spelling of a city, you can reach out to the City Search API. This API uses a keyword, which is a string containing a minimum of 3 and a maximum of 10 characters, to search for a city whose name contains this keyword. It is not critical whether you enter the entire city name or only a part of it. For example, <code>Paris</code>, <code>Par</code> or <code>ari</code> will all return <code>Paris</code> in the search results.</p> <p>There are two optional parameters to help you make the query more precise - <code>countryCode</code> and <code>max</code>. The <code>countryCode</code> is a string for the ISO 3166 Alpha-2 code of the country where you need to locate a city, for example, <code>FR</code> for France. The <code>max</code> is an integer that defines the maximum number of search results.</p> <p>You can also include a list of airports for each city returned in the search results. To do this, you need to add <code>AIRPORTS</code> to the include field, which is an array of strings defining additional resources for your search.</p> <p>Let's check out the results for keyword <code>PAR</code>. We will limit the search scope to <code>FR</code> and the number of results to two.</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/cities?countryCode=FR&amp;keyword=PAR&amp;max=2\n</code></pre> <p>The results are probably rather predictable:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 2,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/reference-data/locations/cities?countryCode=FR&amp;keyword=PAR&amp;max=2\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"location\",\n      \"subType\": \"city\",\n      \"name\": \"Paris\",\n      \"iataCode\": \"PAR\",\n      \"address\": {\n        \"countryCode\": \"FR\",\n        \"stateCode\": \"FR-75\"\n      },\n      \"geoCode\": {\n        \"latitude\": 48.85341,\n        \"longitude\": 2.3488\n      }\n    },\n    {\n      \"type\": \"location\",\n      \"subType\": \"city\",\n      \"name\": \"Le Touquet-Paris-Plage\",\n      \"iataCode\": \"LTQ\",\n      \"address\": {\n        \"countryCode\": \"FR\",\n        \"stateCode\": \"FR-62\"\n      },\n      \"geoCode\": {\n        \"latitude\": 50.52432,\n        \"longitude\": 1.58571\n      }\n    }\n  ]\n}\n</code></pre> <p>First of all we see the French capital at the top of the list. The second result refers to the town Le Touquet-Paris-Plage, whose official name contains three letters that match our keyword. If we want to see more results, we can always adjust the <code>max</code> number of results.</p> <p>The main difference between the Airport &amp; City Search API and City Search API is that the Airport &amp; City Search API only shows cities that have an airport, while the City Search API retrieves any city that matches a keyword.</p>"},{"location":"resources/flights/","title":"Flights","text":"<p>The Flights category contains a wide array of APIs that can help you manage flights, from searching for flight options to actually booking a flight.</p> APIs Description Flight booking Flight Offers Search Lets you can search flights between two cities, perform multi-city searches for longer itineraries and access one-way combinable fares to offer the cheapest options possible. Flight Offers Price Confirms the availability and final price (including taxes and fees) of flights returned by the Flight Offers Search API. Flight Create Orders Provides a unique booking ID and reservation details once the reservation is completed. Flight Order Management Checks the latest status of a reservation, shows post-booking modifications like ticket information or form of payment and lets you cancel reservations. Seatmap Display Shows airplane cabin plan from a Flight Offer in order for the traveler to be able to choose their seat during the flight booking flow. Branded Fares Upsell Provides the branded fares available for a given flight, along with pricing and a fare description. Flight Price Analysis Uses an Artificial Intelligence algorithm trained on Amadeus historical flight booking data to show how current flight prices compare to historical fares and whether the price of a flight is below or above average. Flight Choice Prediction Uses Artificial Intelligence and Amadeus historical flight booking data to identify which flights in search results are most likely to be booked. Flight inspiration Flight Inspiration Search Provides a list of destinations from a given city that is ordered by price and can be filtered by departure date or maximum price. Flight Cheapest Date Search Provides a list of flight options with dates and prices, and allows you to order by price, departure date or duration. Flight Availabilities Search Provides a list of flights with seats for sale on a given itinerary and the quantity of seats available in different fare classes. Travel Recommendations Uses Artificial Intelligence trained on Amadeus historical flight search data to determine which destinations are also popular among travelers with similar profiles, and provides a list of recommended destinations with name, IATA code, coordinates and similarity score. Flight schedule On Demand Flight Status Provides real-time flight schedule data including up-to-date departure and arrival times, terminal and gate information, flight duration and real-time delay status. Help travelers track the live status of their flight and enjoy a stress-free trip. Flight Delay Prediction Provides delay probabilities for four possible delay lengths Airport Airport &amp; City Search Finds airports and cities that match a specific word or a string of letters. Airport Nearest Relevant Provides a list of commercial airports within a 500km (311mi) radius of a given point that are ordered by relevance, which considers their distance from the starting point and their yearly flight traffic. Airport Routes API Finds all destinations served by a given airport. Airport On-Time Performance Predicts an airport's overall performance based on the delay of all flights during a day. Airlines Flight Check-in Links Simplifies the check-in process by providing direct links to the airline check-in page. Airline Code Lookup Finds the name of an airline by its IATA or ICAO airline codes. Airline Routes Finds all destinations served by a given airline."},{"location":"resources/flights/#search-flights","title":"Search flights","text":""},{"location":"resources/flights/#search-to-get-flight-inspirations","title":"Search to get flight inspirations","text":"<p>The Flight Inspiration Search API provides a list of destinations from a given airport that is searched by the IATA code of the origin, ordered by price and filtered by departure date, one-way/round-trip, trip duration, connecting flights or maximum price.</p> <p>Information</p> <p>The Flight Inspiration Search API uses dynamic cache data. This cache data is created daily based on the most trending options that are derived from past searches and bookings. In this way, only the most trending options are included in the response.</p> <p>The only mandatory query parameter is the IATA code of the origin as in the following example request that retrieves a list of destinations from Boston:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=BOS\n</code></pre> <p>The departure date is an optional parameter, which needs to be provided in the YYYY-MM-DD format:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=BOS&amp;departureDate=2022-12-12\n</code></pre> <p>If the <code>oneWay</code> parameter set to <code>true</code>, only one way flight options will be provided in the response. Alternatively, if the <code>oneWay</code> parameter set to <code>false</code>, the search results will show round-trip flights. Otherwise, both flight options will be included in the results. For example, the following request shows one-way flights out of Boston:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=BOS&amp;oneWay=true\n</code></pre> <p>One-way journeys can be optionally refined by the journey duration provided in days with the <code>duration</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=BOS&amp;oneWay=true&amp;duration=2\n</code></pre> <p>The <code>nonStop</code> parameter filters the search query to direct flights only:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=BOS&amp;nonStop=true\n</code></pre> <p>If you need to cap the maximum ticket price, just specify the maximum price in decimals using the <code>maxPrice</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=BOS&amp;maxPrice=100\n</code></pre> <p>Information</p> <p>This API returns cached prices. Once a destination is chosen, use the Flight Offers Search API to get real-time pricing and availability.</p> <p>The API provides a link to the Flight Offers Search API to search for flights once a destination is chosen and a link to the Flight Cheapest Date Search API to check the cheapest dates to fly:</p> <pre><code>\"data\": [\n        {\n            \"type\": \"flight-destination\",\n            \"origin\": \"BOS\",\n            \"destination\": \"CHI\",\n            \"departureDate\": \"2022-07-22\",\n            \"returnDate\": \"2022-07-28\",\n            \"price\": {\n                \"total\": \"52.18\"\n            },\n            \"links\": {\n                \"flightDates\": \"https://test.api.amadeus.com/v1/shopping/flight-dates?origin=BOS&amp;destination=CHI&amp;departureDate=2022-07-02,2022-12-28&amp;oneWay=false&amp;duration=1,15&amp;nonStop=false&amp;maxPrice=300&amp;currency=USD&amp;viewBy=DURATION\",\n                \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-22&amp;returnDate=2022-07-28&amp;adults=1&amp;nonStop=false&amp;maxPrice=300&amp;currency=USD\"\n            }\n        }\n    ]\n</code></pre>"},{"location":"resources/flights/#search-for-destinations-for-a-specific-duration-of-stay","title":"Search for destinations for a specific duration of stay","text":"<p>For example, let's say a traveler wants to spend six days in a city but doesn't have a strong preference for the destination. With the Flight Inspiration Search API we can recommend the traveler the cheapest destinations based on the stay duration.\u00a0</p> <p>This can be done using the parameter <code>viewBy</code> which returns\u00a0flight destinations by <code>DATE</code>, <code>DESTINATION</code>, <code>DURATION</code>, <code>WEEK</code>, or <code>COUNTRY</code>. In our scenario we need to pass the value <code>DURATION</code> to the parameter <code>viewBy</code>, like in the example below. Also, as input we give a duration of six days and origin Miami. The departure date will be between the 1st and 3rd of September 2021.</p> <p><code>GET https://test.api.amadeus.com/v1/shopping/flight-destinations?departureDate=2021-09-01,2021-09-03&amp;duration=6&amp;origin=MIA&amp;viewBy=DURATION</code></p> <pre><code>  {\n            \"type\": \"flight-destination\",\n            \"origin\": \"MIA\",\n            \"destination\": \"MSP\",\n            \"departureDate\": \"2021-09-01\",\n            \"returnDate\": \"2021-09-07\",\n            \"price\": {\n                \"total\": \"136.79\"\n            },\n            \"links\": {\n                \"flightDates\": \"https://test.api.amadeus.com/v1/shopping/flight-dates?origin=MIA&amp;destination=MSP&amp;departureDate=2021-09-01,2021-09-03&amp;oneWay=false&amp;duration=6&amp;nonStop=false&amp;viewBy=DURATION\",\n                \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=MIA&amp;destinationLocationCode=MSP&amp;departureDate=2021-09-01&amp;returnDate=2021-09-07&amp;adults=1&amp;nonStop=false\"\n            }\n        },\n        {\n            \"type\": \"flight-destination\",\n            \"origin\": \"MIA\",\n            \"destination\": \"STT\",\n            \"departureDate\": \"2021-09-02\",\n            \"returnDate\": \"2021-09-08\",\n            \"price\": {\n                \"total\": \"137.36\"\n            },\n            \"links\": {\n                \"flightDates\": \"https://test.api.amadeus.com/v1/shopping/flight-dates?origin=MIA&amp;destination=STT&amp;departureDate=2021-09-01,2021-09-03&amp;oneWay=false&amp;duration=6&amp;nonStop=false&amp;viewBy=DURATION\",\n                \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=MIA&amp;destinationLocationCode=STT&amp;departureDate=2021-09-02&amp;returnDate=2021-09-08&amp;adults=1&amp;nonStop=false\"\n            }\n        }\n</code></pre> <p>As you can see, all the recommendations have a duration of six days and are sorted by the lowest price. The API also provides link to the Flight Offers Search API for each result in order to check for available flights.</p>"},{"location":"resources/flights/#search-for-cheapest-flights-regardless-of-the-dates","title":"Search for cheapest flights regardless of the dates","text":"<p>The Flight Cheapest Date Search API finds the cheapest dates to travel from one city to another. The API provides a list of flight options with dates and prices, and allows you to order by price, departure date or duration.</p> <p>Information</p> <p>The Flight Cheapest Date Search API uses dynamic cache data. This cache data is created daily based on the most trending options that are derived from past searches and bookings. In this way, only the most trending options are included in the response.</p> <p>Information</p> <p>This API returns cached prices. Once the dates are chosen, use the Flight Offers Search API to get real-time pricing and availability.</p> <p>The <code>origin</code> and <code>destination</code> are the two mandatory query parameters:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=MAD&amp;destination=MUC\n</code></pre> <p>We can further refine our search query by the departure dates, one-way/round-trip, trip duration, connecting flights or maximum price.</p> <p>The API supports one or multiple departure dates in the query provided the dates are speficied in the ISO 8601 YYYY-MM-DD format and separated by a comma:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=BOS&amp;destination=CHI&amp;departureDate=2022-08-15,2022-08-28\n</code></pre> <p>If the <code>oneWay</code> parameter set to <code>true</code>, only one way flight options will be provided in the response. Alternatively, if the <code>oneWay</code> parameter set to <code>false</code>, the search results will show round-trip flights. Otherwise, both flight options will be included in the results. For example, the following request shows one-way flights out of Boston:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=BOS&amp;oneWay=true\n</code></pre> <p>One-way journeys can be optionally refined by the journey duration provided in days with the <code>duration</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=BOS&amp;oneWay=true&amp;duration=2\n</code></pre> <p>The <code>nonStop</code> parameter filters the search query to direct flights only:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=BOS&amp;nonStop=true\n</code></pre> <p>If you need to cap the maximum ticket price, just specify the maximum price in decimals using the <code>maxPrice</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=BOS&amp;maxPrice=100\n</code></pre> <p>The API provides a link to the Flight Offers Search API to search for flights once a destination is chosen, in order to proceed with the booking flow.</p>"},{"location":"resources/flights/#search-for-best-flight-offers","title":"Search for best flight offers","text":"<p>The Flight Offers Search API searches over 500 airlines to find the cheapest flights for a given itinerary. The API lets you search flights between two cities, perform multi-city searches for longer itineraries and access one-way combinable fares to offer the cheapest options possible. For each itinerary, the API provides a list of flight offers with prices, fare details, airline names, baggage allowances and departure terminals.</p> <p>Tip</p> <ul> <li>Flight Offers Search API is the first step of Flight booking engine flow. Check the details from Video Tutorials and Blog Tutorial. </li> </ul> <p>Warning</p> <ul> <li>Flights from low-cost carriers, American Airlines, Delta and British Airways are unavailable.</li> </ul> <p>The Flight Offers Search API  starts the booking cycle with a search for the best fares. The API returns a list of the cheapest flights given a city/airport of departure, a city/airport of arrival, the number and type of passengers and travel dates. The results are complete with airline name and fares as well as additional information, such as bag allowance and pricing for additional baggage. </p> <p>The API comes in two flavors:</p> <ul> <li>Simple version: GET operation with few parameters but which is quicker to integrate.</li> <li>On steroids: POST operation offering the full functionalities of the API.</li> </ul> <p>The minimum <code>GET</code> request has following mandatory query parameters:</p> <ul> <li>IATA code for the origin location</li> <li>IATA code for the destination location</li> <li>Departure date in the ISO 8601 YYYY-MM-DD format</li> <li>Number of adult travellers</li> </ul> <pre><code>GET https://test.api.amadus.com/v2/shopping/flight-offers?adults=1&amp;originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-22\n</code></pre> <p>Let's have a look at all the optional parameters that we can use to refine the search query. One or more of these parameters can be used in addition to the mandatory query parameters.</p> <p>Return date in the ISO 8601 YYYY-MM-DD format, same as the departure date:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-22&amp;returnDate=2022-07-26&amp;adults=1\n</code></pre> <p>Number of children travelling, same as the number of adults:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;children=1\n</code></pre> <p>Number of infants travelling, same as the number of adults:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;infants=1\n</code></pre> <p>Travel class, which includes economy, premium economy, business or first:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;travelClass=ECONOMY\n</code></pre> <p>We can limit the search to a specific airline by providing its IATA airline code, such as BA for the British Airways:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;includedAirlineCodes=BA\n</code></pre> <p>Alternatively, we can exclude an airline from the search in a similar way:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;excludedAirlineCodes=BA\n</code></pre> <p>The <code>nonStop</code> parameter filters the search query to direct flights only:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;nonStop=true\n</code></pre> <p>The <code>currencyCode</code> defines the currency in which we will see the offer prices:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;currencyCode=EUR\n</code></pre> <p>We can limit the maximum price to a certain amount and specify the currency as described above:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;maxPrice=500&amp;currencyCode=EUR\n</code></pre> <p>The maximum number of results retrieved can be limited using the <code>max</code> parameter in the search query:</p> <pre><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=BOS&amp;destinationLocationCode=CHI&amp;departureDate=2022-07-26&amp;adults=1&amp;max=1\n</code></pre> <p>The API returns a list of <code>flight-offer</code> objects (up to 250), including information such as itineraries, price, pricing options, etc.</p> <pre><code>\"data\": [\n    {\n      \"type\": \"flight-offer\",\n      \"id\": \"1\",\n      \"source\": \"GDS\",\n      \"instantTicketingRequired\": false,\n      \"nonHomogeneous\": false,\n      \"oneWay\": false,\n      \"lastTicketingDate\": \"2022-07-02\",\n      \"numberOfBookableSeats\": 9,\n      \"itineraries\": [ ],\n      \"price\": {\n        \"currency\": \"EUR\",\n        \"total\": \"22.00\",\n        \"base\": \"13.00\",\n        \"fees\": [\n          {\n            \"amount\": \"0.00\",\n            \"type\": \"SUPPLIER\"\n          },\n          {\n            \"amount\": \"0.00\",\n            \"type\": \"TICKETING\"\n          }\n        ],\n        \"grandTotal\": \"22.00\"\n      }\n    }\n  ]\n</code></pre> <p>The <code>POST</code> endpoint consumes JSON data in the format described below. So, instead of constructing a search query, we can specify all the required parameters in the payload and pass it onto the API in the request body. In addition to this, a <code>X-HTTP-Method-Override</code> header parameter is required.</p> <pre><code>{\n  \"currencyCode\": \"USD\",\n  \"originDestinations\": [\n    {\n      \"id\": \"1\",\n      \"originLocationCode\": \"RIO\",\n      \"destinationLocationCode\": \"MAD\",\n      \"departureDateTimeRange\": {\n        \"date\": \"2022-11-01\",\n        \"time\": \"10:00:00\"\n      }\n    },\n    {\n      \"id\": \"2\",\n      \"originLocationCode\": \"MAD\",\n      \"destinationLocationCode\": \"RIO\",\n      \"departureDateTimeRange\": {\n        \"date\": \"2022-11-05\",\n        \"time\": \"17:00:00\"\n      }\n    }\n  ],\n  \"travelers\": [\n    {\n      \"id\": \"1\",\n      \"travelerType\": \"ADULT\"\n    },\n    {\n      \"id\": \"2\",\n      \"travelerType\": \"CHILD\"\n    }\n  ],\n  \"sources\": [\n    \"GDS\"\n  ],\n  \"searchCriteria\": {\n    \"maxFlightOffers\": 2,\n    \"flightFilters\": {\n      \"cabinRestrictions\": [\n        {\n          \"cabin\": \"BUSINESS\",\n          \"coverage\": \"MOST_SEGMENTS\",\n          \"originDestinationIds\": [\n            \"1\"\n          ]\n        }\n      ],\n      \"carrierRestrictions\": {\n        \"excludedCarrierCodes\": [\n          \"AA\",\n          \"TP\",\n          \"AZ\"\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"resources/flights/#search-for-flights-including-or-excluding-specific-airlines","title":"Search for flights including or excluding specific airlines","text":"<p>If you want your search to return flights with only specified airlines, you can use the parameter <code>includedAirlineCodes</code> to consider specific airlines. For example, there is a traveler who wants to travel from Berlin to Athens only with Aegean Airlines (A3): </p> <p><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?max=3&amp;adults=1&amp;includedAirlineCodes=A3&amp;originLocationCode=BER&amp;destinationLocationCode=ATH&amp;departureDate=2022-12-06</code></p> <p>With the parameter <code>excludedAirlineCodes</code> you can ignore specific airlines. For example, there is a traveler who wants to travel from Berlin to Athens ignoring both Aegean Airlines (A3) and Iberia (IB):</p> <p><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?max=3&amp;adults=1&amp;excludedAirlineCodes=A3,IB&amp;originLocationCode=BER&amp;destinationLocationCode=ATH&amp;departureDate=2021-09-06</code></p>"},{"location":"resources/flights/#interactive-code-examples","title":"Interactive code examples","text":"<p>Check out this interactive code example which provides a flight search form to help you build your app. You can easily customize it and use the Flight Offers Search API to get the cheapest flight offers.</p>"},{"location":"resources/flights/#search-for-the-best-flight-option","title":"Search for the best flight option","text":"<p>The Flight Choice Prediction API predicts the flight your users will choose. Our machine-learning models have analyzed historical interactions with the Flight Offers Search API and can determine each flight\u2019s probability of being chosen. Boost conversions and create a personalized experience by filtering out the noise and showing your users the flights which are best for them.</p> <p>Here is a quick cURL example piping the Flight Offers Search API results directly to the prediction API. Please note that a <code>X-HTTP-Method-Override</code> header parameter is required.</p> <p>Let\u2019s look at flight offers for a Madrid-New York round trip (limiting to four options for this test illustration)</p> <pre><code>curl --request GET \\\n     --header 'Authorization: Bearer &lt;token&gt;' \\\n     --url https://test.api.amadeus.com/v2/shopping/flight-offers\\?origin\\=MAD\\&amp;destination\\=NYC\\&amp;departureDate\\=2019-08-24\\&amp;returnDate\\=2019-09-19\\&amp;adults\\=1 \\\n| curl --request POST \\\n       --header 'content-type: application/json' \\\n       --header 'Authorization: Bearer &lt;token&gt;' \\\n       --header 'X-HTTP-Method-Override: POST' \\\n       --url https://test.api.amadeus.com/v2/shopping/flight-offers/prediction --data @-\n</code></pre> <p>The prediction API returns the same content as the Low Fare search with the addition of the <code>choiceProbability</code> field for each flight offer element.</p> <pre><code> {\n  \"data\": [\n    {\n      \"choiceProbability\": \"0.9437563627430908\",\n      \"id\": \"1558602440311-352021104\",\n      \"offerItems\": [...],\n      \"type\": \"flight-offer\"\n    },\n    {\n      \"choiceProbability\": \"0.0562028823257711\",\n      \"id\": \"1558602440311--1831925786\",\n      \"offerItems\": [...],\n      \"type\": \"flight-offer\"\n    },\n    {\n      \"choiceProbability\": \"0.0000252425060482\",\n      \"id\": \"1558602440311-480701674\",\n      \"offerItems\": [...],\n      \"type\": \"flight-offer\"\n    },\n    {\n      \"choiceProbability\": \"0.0000155124250899\",\n      \"id\": \"1558602440311--966634676\",\n      \"offerItems\": [...],\n      \"type\": \"flight-offer\"\n    }\n  ],\n  \"dictionaries\": {...}\n  },\n  \"meta\": {...}\n  }\n}\n</code></pre>"},{"location":"resources/flights/#search-for-flight-offers-for-multiple-cities","title":"Search for flight offers for multiple cities","text":"<p>Many travelers take advantage of their international trips to visit several destinations. Multi-city search is a functionality that lets you search for consecutive one-way flights between multiple destinations in a single request. The returned flights are packaged as a complete, bookable itinerary. </p> <p>To perform multi-city searches, you must use the <code>POST</code> method of the Flight Offers Search API. The API lets you search for up to six origin and destination city pairs.</p> <p>In the following example, we\u2019ll fly from Madrid to Paris, where we\u2019ll spend a couple of days, then fly to Munich for three days. Next, we\u2019ll visit Amsterdam for two days before finishing our journey with a return to Madrid. We'll use the following IATA city codes: <code>MAD &gt; PAR &gt; MUC &gt; AMS &gt; MAD</code></p> <p>The request will look like this:</p> <pre><code>curl https://test.api.amadeus.com/v2/shopping/flight-offers \\\n-d '{ \n\u202f\u202f\"originDestinations\": [ \n\u202f\u202f\u202f\u202f{ \n\u202f\u202f\u202f\u202f\u202f\u202f\"id\":\u202f\"1\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"originLocationCode\":\u202f\"MAD\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"destinationLocationCode\":\u202f\"PAR\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"departureDateTimeRange\": { \n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\"date\":\u202f\"2022-10-03\" \n\u202f\u202f\u202f\u202f\u202f\u202f} \n\u202f\u202f\u202f\u202f}, \n\u202f\u202f\u202f\u202f{ \n\u202f\u202f\u202f\u202f\u202f\u202f\"id\":\u202f\"2\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"originLocationCode\":\u202f\"PAR\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"destinationLocationCode\":\u202f\"MUC\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"departureDateTimeRange\": { \n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\"date\":\u202f\"2022-10-05\" \n\u202f\u202f\u202f\u202f\u202f\u202f} \n\u202f\u202f\u202f\u202f}, \n\u202f\u202f\u202f\u202f{ \n\u202f\u202f\u202f\u202f\u202f\u202f\"id\":\u202f\"3\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"originLocationCode\":\u202f\"MUC\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"destinationLocationCode\":\u202f\"AMS\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"departureDateTimeRange\": { \n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\"date\":\u202f\"2022-10-08\" \n\u202f\u202f\u202f\u202f\u202f\u202f} \n\u202f\u202f\u202f\u202f}, \n\u202f\u202f\u202f\u202f{ \n\u202f\u202f\u202f\u202f\u202f\u202f\"id\":\u202f\"4\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"originLocationCode\":\u202f\"AMS\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"destinationLocationCode\":\u202f\"MAD\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"departureDateTimeRange\": { \n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\"date\":\u202f\"2022-10-11\" \n\u202f\u202f\u202f\u202f\u202f\u202f} \n\u202f\u202f\u202f\u202f} \n\u202f\u202f], \n\u202f\u202f\"travelers\": [ \n\u202f\u202f\u202f\u202f{ \n\u202f\u202f\u202f\u202f\u202f\u202f\"id\":\u202f\"1\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"travelerType\":\u202f\"ADULT\", \n\u202f\u202f\u202f\u202f\u202f\u202f\"fareOptions\": [ \n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\"STANDARD\" \n\u202f\u202f\u202f\u202f\u202f\u202f] \n\u202f\u202f\u202f\u202f} \n\u202f\u202f], \n\u202f\u202f\"sources\": [ \n\u202f\u202f\u202f\u202f\"GDS\" \n\u202f\u202f], \n\u202f\u202f\"searchCriteria\": { \n\u202f\u202f\u202f\u202f\"maxFlightOffers\":\u202f1 \n\u202f\u202f} \n}' \n</code></pre>"},{"location":"resources/flights/#search-using-loyalty-programs","title":"Search using loyalty programs","text":"<p>The Flight Offers Price API and the Seatmap Display API both accept Frequent Flyer information so end-users can benefit from their loyalty program. When adding Frequent Flyer information, please remember that each airline policy is different, and some require additional information, such as passenger name, email or phone number to validate the account. If the validation fails, your user won\u2019t receive their loyalty program advantages.</p>"},{"location":"resources/flights/#search-for-routes-from-a-specific-airport","title":"Search for routes from a specific airport","text":"<p>The Airport Routes API shows all destinations from a given airport. To follow up on our previous example, let's check where we can fly to from Madrid (MAD). The options are obviously quite broad, so we can limit the maximum number of results to 10. Keep in mind that this limit will apply from the beginning of the results list in the alphabetical order of the airport IATA codes.</p> <p>The request will look like this:</p> <pre><code>curl --request GET \\\n     --header 'Authorization: Bearer &lt;token&gt;' \\\n     --url https://test.api.amadeus.com/v1/airport/direct-destinations?departureAirportCode=MAD&amp;max=10 \\\n</code></pre> <p>So we can see the the following results:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 10,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/airport/direct-destinations?departureAirportCode=MAD&amp;max=10\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"ALBACETE\",\n      \"iataCode\": \"ABC\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"LANZAROTE\",\n      \"iataCode\": \"ACE\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"MALAGA\",\n      \"iataCode\": \"AGP\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"ALGHERO\",\n      \"iataCode\": \"AHO\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"ALICANTE\",\n      \"iataCode\": \"ALC\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"ALGIERS\",\n      \"iataCode\": \"ALG\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"AMMAN\",\n      \"iataCode\": \"AMM\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"AMSTERDAM\",\n      \"iataCode\": \"AMS\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"ASUNCION\",\n      \"iataCode\": \"ASU\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"ATHENS\",\n      \"iataCode\": \"ATH\"\n    }\n  ]\n}\n</code></pre>"},{"location":"resources/flights/#search-for-routes-for-a-specific-airline","title":"Search for routes for a specific airline","text":"<p>The Airline Routes API shows all destinations for a given airline. To follow up on our previous example, let's check what destinations the British Airways fly to. There's definitely plenty of options, so we can limit the maximum number of results to two for the sake of simplicity. Keep in mind that this limit will apply from the beginning of the results list in the alphabetical order of the city names.</p> <p>The request will look like this:</p> <pre><code>curl --request GET \\\n     --header 'Authorization: Bearer &lt;token&gt;' \\\n     --url https://test.api.amadeus.com/v1/airline/destinations?airlineCode=BA&amp;max=2 \\\n</code></pre> <p>So we can see the the following results:</p> <pre><code>{\n  \"data\": [\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"Bangalore\",\n      \"iataCode\": \"BLR\"\n    },\n    {\n      \"type\": \"location\",\n      \"subtype\": \"city\",\n      \"name\": \"Paris\",\n      \"iataCode\": \"PAR\"\n    }\n  ],\n  \"meta\": {\n    \"count\": \"2\",\n    \"sort\": \"iataCode\",\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/airline/destinations?airlineCode=BA&amp;max=2\"\n    }\n  }\n}\n</code></pre>"},{"location":"resources/flights/#look-up-the-airline-icao-code-by-the-iata-code","title":"Look up the airline ICAO code by the IATA code","text":"<p>If we need to know the IATA code for a particular airline but only have the airline's ICAO code, the Airline Code Lookup API can help us out. Just specify the IATA code in the query and send out the request:</p> <pre><code>curl --request GET \\\n     --header 'Authorization: Bearer &lt;token&gt;' \\\n     --url https://test.api.amadeus.com/v1/reference-data/airlines?airlineCodes=BA \\\n</code></pre> <p>The response is pretty straightforward:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 1,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/reference-data/airlines?airlineCodes=BA\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"airline\",\n      \"iataCode\": \"BA\",\n      \"icaoCode\": \"BAW\",\n      \"businessName\": \"BRITISH AIRWAYS\",\n      \"commonName\": \"BRITISH A/W\"\n    }\n  ]\n}\n</code></pre>"},{"location":"resources/flights/#search-for-flight-and-fare-availability","title":"Search for flight and fare availability","text":"<p>With the Flight Availabilities Search API you can check the flight and fare availability for any itinerary. This refers to the full inventory of fares available for an itinerary at any given time. The concept of flight availability originated in the early days of flight booking as a way for agents to check what options existed for their travelers\u2019 itineraries.</p> <p>You can build the request by passing into the body of the <code>POST</code> request an object that you can customise to your needs. An example of such object is provided in the specification of the Flight Availabilities Search API. In addition to this, a <code>X-HTTP-Method-Override</code> header parameter is required.</p> <p>Here\u2019s an example request for a one-way flight from Mad (MIA) to Atlanta (ATL) for one traveler departing on December 12, 2021: </p> <p><code>POST https://test.api.amadeus.com/v1/shopping/availability/flight-availabilities</code></p> <pre><code>{\n    \"originDestinations\": [\n        {\n            \"id\": \"1\",\n            \"originLocationCode\": \"MIA\",\n            \"destinationLocationCode\": \"ATL\",\n            \"departureDateTime\": {\n                \"date\": \"2021-11-01\"\n            }\n        }\n    ],\n    \"travelers\": [\n        {\n            \"id\": \"1\",\n            \"travelerType\": \"ADULT\"\n        }\n    ],\n    \"sources\": [\n        \"GDS\"\n    ]\n}\n</code></pre> <p>The response contains a list of available flights matching our request criteria (for the sake of this example, we only show the first result). Each flight availability includes descriptive data about the flight and an <code>availabilityClasses</code> list containing the available fare classes and the number of bookable seats remaining in each fare class.</p> <pre><code>\"data\": [\n        {\n            \"type\": \"flight-availability\",\n            \"id\": \"1\",\n            \"originDestinationId\": \"1\",\n            \"source\": \"GDS\",\n            \"instantTicketingRequired\": false,\n            \"paymentCardRequired\": false,\n            \"duration\": \"PT1H54M\",\n            \"segments\": [\n                {\n                    \"id\": \"1\",\n                    \"numberOfStops\": 0,\n                    \"blacklistedInEU\": false,\n                    \"departure\": {\n                        \"iataCode\": \"MIA\",\n                        \"at\": \"2021-11-01T05:30:00\"\n                    },\n                    \"arrival\": {\n                        \"iataCode\": \"ATL\",\n                        \"terminal\": \"S\",\n                        \"at\": \"2022-11-01T07:24:00\"\n                    },\n                    \"carrierCode\": \"DL\",\n                    \"number\": \"2307\",\n                    \"aircraft\": {\n                        \"code\": \"321\"\n                    },\n                    \"operating\": {},\n                    \"availabilityClasses\": [\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"J\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"C\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"D\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"I\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"Z\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"W\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"Y\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"B\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"M\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"H\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"Q\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"K\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"L\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"U\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"T\"\n                        },\n                        {\n                            \"numberOfBookableSeats\": 9,\n                            \"class\": \"E\"\n                        }\n                    ]\n                }\n            ]\n        },\n</code></pre> <p>Note that airlines\u2019 bookable seat counters goe up to a maximum of 9, even if more seats are available in that fare class. If there are less than 9 bookable seats available, the exact number is displayed.  </p>"},{"location":"resources/flights/#search-branded-fares","title":"Search branded fares","text":"<p>Branded fares are airfares that bundle tickets with extras, such as checked bags, seat selection, refundability or loyalty points accrual. Each airline defines and packages its own branded fares and they vary from one airline to another. Branded fares not only help build brand recognition and loyalty, but also offer travelers an attractive deal as the incremental cost of the fare is usually less than that of buying the included services \u00e0 la carte.  </p> <p>The Branded Fares Upsell API receives flight offers from the Flight Offers Search API and returns branded fares as flight offers which can be easily passed to the next step in the booking funnel. The booking flow is the following: </p> <ul> <li>Search for flights using the Flight Offers Search API. </li> <li>Find branded fare options for a selected flight using the Branded Fares Upsell API. </li> <li>Confirm the fare and get the final price using the Flight Offers Price API. </li> <li>Book the flight using the Flight Create Orders API. </li> </ul> <p>Let's see an example of how to search for branded fares. </p> <p>You can build the request by passing the flight-offer object from the Flight Offers Search API into the body of the <code>POST</code> request including the mandatory <code>X-HTTP-Method-Override</code> header parameter:</p> <pre><code>POST https://test.api.amadeus.com/v1/shopping/flight-offers/upselling\n</code></pre> <p>Please not that the <code>X-HTTP-Method-Override</code> header parameter is required to make this call.</p> <pre><code>{ \n  \"data\": { \n    \"type\": \"flight-offers-upselling\", \n    \"flightOffers\": [ \n      {\n            \"type\": \"flight-offer\",\n            \"id\": \"1\",\n            \"source\": \"GDS\",\n            \"instantTicketingRequired\": false,\n            \"nonHomogeneous\": false,\n            \"oneWay\": false,\n            \"lastTicketingDate\": \"2022-06-12\",\n            \"numberOfBookableSeats\": 3,\n            \"itineraries\": [\n                {\n                    \"duration\": \"PT6H10M\",\n                    \"segments\": [\n                        {\n                            \"departure\": {\n                                \"iataCode\": \"MAD\",\n                                \"terminal\": \"1\",\n                                \"at\": \"2022-06-22T17:40:00\"\n                            },\n                            \"arrival\": {\n                                \"iataCode\": \"FCO\",\n                                \"terminal\": \"1\",\n                                \"at\": \"2022-06-22T20:05:00\"\n                            },\n                            \"carrierCode\": \"AZ\",\n                            \"number\": \"63\",\n                            \"aircraft\": {\n                                \"code\": \"32S\"\n                            },\n                            \"operating\": {\n                                \"carrierCode\": \"AZ\"\n                            },\n                            \"duration\": \"PT2H25M\",\n                            \"id\": \"13\",\n                            \"numberOfStops\": 0,\n                            \"blacklistedInEU\": false\n                        },\n                        {\n                            \"departure\": {\n                                \"iataCode\": \"FCO\",\n                                \"terminal\": \"1\",\n                                \"at\": \"2022-06-22T21:50:00\"\n                            },\n                            \"arrival\": {\n                                \"iataCode\": \"ATH\",\n                                \"at\": \"2022-06-23T00:50:00\"\n                            },\n                            \"carrierCode\": \"AZ\",\n                            \"number\": \"722\",\n                            \"aircraft\": {\n                                \"code\": \"32S\"\n                            },\n                            \"operating\": {\n                                \"carrierCode\": \"AZ\"\n                            },\n                            \"duration\": \"PT2H\",\n                            \"id\": \"14\",\n                            \"numberOfStops\": 0,\n                            \"blacklistedInEU\": false\n                        }\n                    ]\n                }\n            ],\n            \"price\": {\n                \"currency\": \"EUR\",\n                \"total\": \"81.95\",\n                \"base\": \"18.00\",\n                \"fees\": [\n                    {\n                        \"amount\": \"0.00\",\n                        \"type\": \"SUPPLIER\"\n                    },\n                    {\n                        \"amount\": \"0.00\",\n                        \"type\": \"TICKETING\"\n                    }\n                ],\n                \"grandTotal\": \"81.95\",\n                \"additionalServices\": [\n                    {\n                        \"amount\": \"45.00\",\n                        \"type\": \"CHECKED_BAGS\"\n                    }\n                ]\n            },\n            \"pricingOptions\": {\n                \"fareType\": [\n                    \"PUBLISHED\"\n                ],\n                \"includedCheckedBagsOnly\": false\n            },\n            \"validatingAirlineCodes\": [\n                \"AZ\"\n            ],\n            \"travelerPricings\": [\n                {\n                    \"travelerId\": \"1\",\n                    \"fareOption\": \"STANDARD\",\n                    \"travelerType\": \"ADULT\",\n                    \"price\": {\n                        \"currency\": \"EUR\",\n                        \"total\": \"81.95\",\n                        \"base\": \"18.00\"\n                    },\n                    \"fareDetailsBySegment\": [\n                        {\n                            \"segmentId\": \"13\",\n                            \"cabin\": \"ECONOMY\",\n                            \"fareBasis\": \"OOLGEU1\",\n                            \"class\": \"O\",\n                            \"includedCheckedBags\": {\n                                \"quantity\": 0\n                            }\n                        },\n                        {\n                            \"segmentId\": \"14\",\n                            \"cabin\": \"ECONOMY\",\n                            \"fareBasis\": \"OOLGEU1\",\n                            \"brandedFare\": \"ECOLIGHT\",\n                            \"class\": \"O\",\n                            \"includedCheckedBags\": {\n                                \"quantity\": 0\n                            }\n                        }\n                    ]\n                }\n            ]\n        } \n    ]\n  } \n}  \n</code></pre> <p>The API will procide the following JSON in the response:</p> <pre><code>{\n    \"meta\": {\n        \"count\": 5\n    },\n    \"data\": [{\n                \"type\": \"flight-offer\",\n                \"id\": \"2\",\n                \"source\": \"GDS\",\n                \"instantTicketingRequired\": false,\n                \"paymentCardRequired\": false,\n                \"lastTicketingDate\": \"2022-11-30\",\n                \"itineraries\": [{\n                    \"segments\": [{\n                        \"departure\": {\n                            \"iataCode\": \"MAD\",\n                            \"terminal\": \"2\",\n                            \"at\": \"2022-12-01T07:10:00\"\n                        },\n                        \"arrival\": {\n                            \"iataCode\": \"ORY\",\n                            \"at\": \"2022-12-01T09:05:00\"\n                        },\n                        \"carrierCode\": \"UX\",\n                        \"number\": \"1027\",\n                        \"aircraft\": {\n                            \"code\": \"333\"\n                        },\n                        \"operating\": {\n                            \"carrierCode\": \"UX\"\n                        },\n                        \"duration\": \"PT1H55M\",\n                        \"id\": \"7\",\n                        \"numberOfStops\": 0,\n                        \"blacklistedInEU\": false\n                    }]\n                }],\n                \"price\": {\n                    \"currency\": \"EUR\",\n                    \"total\": \"228.38\",\n                    \"base\": \"210.00\",\n                    \"fees\": [{\n                        \"amount\": \"0.00\",\n                        \"type\": \"TICKETING\"\n                    }],\n                    \"grandTotal\": \"228.38\"\n                },\n                \"pricingOptions\": {\n                    \"fareType\": [\n                        \"PUBLISHED\"\n                    ],\n                    \"includedCheckedBagsOnly\": false,\n                    \"refundableFare\": false,\n                    \"noRestrictionFare\": false,\n                    \"noPenaltyFare\": false\n                },\n                \"validatingAirlineCodes\": [\n                    \"UX\"\n                ],\n                \"travelerPricings\": [{\n                            \"travelerId\": \"1\",\n                            \"fareOption\": \"STANDARD\",\n                            \"travelerType\": \"ADULT\",\n                            \"price\": {\n                                \"currency\": \"EUR\",\n                                \"total\": \"228.38\",\n                                \"base\": \"210.00\",\n                                \"taxes\": [{\n                                        \"amount\": \"3.27\",\n                                        \"code\": \"QV\"\n                                    },\n                                    {\n                                        \"amount\": \"0.63\",\n                                        \"code\": \"OG\"\n                                    },\n                                    {\n                                        \"amount\": \"14.48\",\n                                        \"code\": \"JD\"\n                                    }\n                                ]\n                            },\n                            \"fareDetailsBySegment\": [{\n                                \"segmentId\": \"7\",\n                                \"cabin\": \"ECONOMY\",\n                                \"fareBasis\": \"KYYO5L\",\n                                \"brandedFare\": \"LITE\",\n                                \"class\": \"K\",\n                                \"includedCheckedBags\": {\n                                    \"quantity\": 0\n                                },\n                                \"amenities\": [{\n                                        \"code\": \"0L5\",\n                                        \"description\": \"CARRY ON HAND BAGGAGE\",\n                                        \"isChargeable\": false,\n                                        \"amenityType\": \"BAGGAGE\"\n                                    },\n                                    {\n                                        \"code\": \"0CC\",\n                                        \"description\": \"FIRST PREPAID BAG\",\n                                        \"isChargeable\": true,\n                                        \"amenityType\": \"BAGGAGE\"\n                                    },\n                                    {\n                                        \"code\": \"0GO\",\n                                        \"description\": \"PREPAID BAG\",\n                                        \"isChargeable\": true,\n                                        \"amenityType\": \"BAGGAGE\"\n                                    },\n                                    {\n                                        \"code\": \"059\",\n                                        \"description\": \"CHANGEABLE TICKET\",\n                                        \"isChargeable\": true,\n                                        \"amenityType\": \"BRANDED_FARES\"\n                                    },\n                                    {\n                                        \"code\": \"0B5\",\n                                        \"description\": \"PRE RESERVED SEAT ASSIGNMENT\",\n                                        \"isChargeable\": true,\n                                        \"amenityType\": \"PRE_RESERVED_SEAT\"\n                                    },\n                                    {\n                                        \"code\": \"0G6\",\n                                        \"description\": \"PRIORITY BOARDING\",\n                                        \"isChargeable\": true,\n                                        \"amenityType\": \"TRAVEL_SERVICES\"\n                                    }\n                                ]\n                            }],\n                            \"dictionaries\": {\n                                \"locations\": {\n                                    \"MAD\": {\n                                        \"cityCode\": \"MAD\",\n                                        \"countryCode\": \"ES\"\n                                    },\n                                    \"ORY\": {\n                                        \"cityCode\": \"PAR\",\n                                        \"countryCode\": \"FR\"\n                                    }\n                                }\n                            }\n                        }\n</code></pre> <p>You can also see the process step to step How to upsell with branded fares in this video tutorial from Advanced flight booking engine series. </p> <p></p>"},{"location":"resources/flights/#search-for-personalized-destination-recommendations","title":"Search for personalized destination recommendations","text":"<p>The Travel Recommendations API  provides personalized destinations based on the traveler's location and an input destination, such as a previously searched flight destination or city of interest.</p> <p>For example, for a traveler based in San Francisco who has searched for multiple flights to Barcelona, what other similar destinations the API could recommend? The API takes as input the country of the traveler and the IATA code of the city that was searched, in our case this will be US and BCN respectively. </p> <p><code>GET https://test.api.amadeus.com/v1/reference-data/recommended-locations?cityCodes=BCN&amp;travelerCountryCode=US</code></p> <p>The response will look like this:</p> <pre><code>{\n     \"type\": \"flight-date\",\n     \"origin\": \"SFO\",\n     \"destination\": \"ROM\",\n     \"departureDate\": \"2021-09-19\",\n     \"returnDate\": \"2021-09-23\",\n     \"price\": {\n         \"total\": \"348.75\"\n     },\n     \"links\": {\n         \"flightDestinations\": \"https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=SFO&amp;departureDate=2021-04-15,2021-10-11&amp;oneWay=false&amp;duration=1,15&amp;nonStop=false&amp;viewBy=DURATION\",\n         \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=SFO&amp;destinationLocationCode=ROM&amp;departureDate=2021-09-19&amp;returnDate=2021-09-23&amp;adults=1&amp;nonStop=false\"\n     }\n }\n</code></pre> <p>The only required parameter for the Travel Recommendations API is the city code. So, the API is capable of suggesting flight based on that input alone:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/recommended-locations?cityCodes=PAR\n</code></pre> <p>You can also narrow the query down by using the <code>destinationCountryCodes</code> parameter, which supports one or more IATA country codes, separated by a comma:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/recommended-locations?cityCodes=PAR&amp;destinationCountryCodes=US\n</code></pre> <p>To expand the example of the San Francisco-based traveler searching for multiple flights to Barcelona, we can specify the destination country as well:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/recommended-locations?cityCodes=BCN&amp;travelerCountryCode=US&amp;destinationCountryCodes=ES\n</code></pre> <p>If you want to take it to the next level, you can call the Flight Cheapest Date Search API to let the users know not only the recommended destinations but also what are the cheapest dates to visit any of these cities. For real-time flights, you can also call the Flight Offers Search API. The Travel Recommendations API has returned links to both APIs. </p>"},{"location":"resources/flights/#search-for-recommended-nearby-destinations","title":"Search for recommended nearby destinations","text":"<p>With the Airport Nearest Relevant API you can find the closest major airports to a starting point. By default, results are sorted by relevance but they can also be sorted by <code>distance</code>, <code>flights</code>, <code>travelers</code> using the parameter <code>sort</code>.</p> <p>Information</p> <p>To get the latitude and longitude of a city you can use the Airport &amp; City Search API using the city's IATA code.</p> <p>Let's call the Airport Nearest Relevant API to find airports within the 500km radius of Madrid.</p> <p><code>GET https://test.api.amadeus.com/v1/reference-data/locations/airports?latitude=40.416775&amp;longitude=-3.703790&amp;radius=500</code></p> <p>A part of the response looks like:</p> <p><pre><code>        {\n            \"type\": \"location\",\n            \"subType\": \"AIRPORT\",\n            \"name\": \"AIRPORT\",\n            \"detailedName\": \"BARCELONA/ES:AIRPORT\",\n            \"timeZoneOffset\": \"+02:00\",\n            \"iataCode\": \"BCN\",\n            \"geoCode\": {\n                \"latitude\": 41.29694,\n                \"longitude\": 2.07833\n            },\n            \"address\": {\n                \"cityName\": \"BARCELONA\",\n                \"cityCode\": \"BCN\",\n                \"countryName\": \"SPAIN\",\n                \"countryCode\": \"ES\",\n                \"regionCode\": \"EUROP\"\n            },\n            \"distance\": {\n                \"value\": 496,\n                \"unit\": \"KM\"\n            },\n            \"analytics\": {\n                \"flights\": {\n                    \"score\": 25\n                },\n                \"travelers\": {\n                    \"score\": 25\n                }\n            },\n            \"relevance\": 5.11921\n        }\n</code></pre> What we want to do at this point, is to find the cheapest dates for all these destinations. </p> <p>We can do this by calling the Flight Cheapest Date Search API which finds the cheapest dates to travel from one city to another. Let's see, for example, the cheapest dates to fly to Barcelona in November 2021. </p> <p><code>GET https://test.api.amadeus.com/v1/shopping/flight-dates?origin=MAD&amp;destination=BCN&amp;departureDate=2021-05-01,2021-05-30</code></p> <p><pre><code>{\n    \"type\": \"flight-date\",\n    \"origin\": \"MAD\",\n    \"destination\": \"BCN\",\n    \"departureDate\": \"2021-05-29\",\n    \"returnDate\": \"2021-06-11\",\n    \"price\": {\n        \"total\": \"73.61\"\n    },\n    \"links\": {\n        \"flightDestinations\": \"https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=MAD&amp;departureDate=2021-05-01,2021-05-30&amp;oneWay=false&amp;duration=1,15&amp;nonStop=false&amp;viewBy=DURATION\",\n        \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=MAD&amp;destinationLocationCode=BCN&amp;departureDate=2022-09-29&amp;returnDate=2021-06-11&amp;adults=1&amp;nonStop=false\"\n    },\n{\n    \"type\": \"flight-date\",\n    \"origin\": \"MAD\",\n    \"destination\": \"BCN\",\n    \"departureDate\": \"2021-05-05\",\n    \"returnDate\": \"2021-05-06\",\n    \"price\": {\n        \"total\": \"79.67\"\n    },\n    \"links\": {\n        \"flightDestinations\": \"https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=MAD&amp;departureDate=2021-05-01,2021-05-30&amp;oneWay=false&amp;duration=1,15&amp;nonStop=false&amp;viewBy=DURATION\",\n        \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=MAD&amp;destinationLocationCode=BCN&amp;departureDate=2021-05-05&amp;returnDate=2021-05-06&amp;adults=1&amp;nonStop=false\"\n    }\n},\n{\n    \"type\": \"flight-date\",\n    \"origin\": \"MAD\",\n    \"destination\": \"BCN\",\n    \"departureDate\": \"2021-05-02\",\n    \"returnDate\": \"2021-05-06\",\n    \"price\": {\n        \"total\": \"80.61\"\n    },\n    \"links\": {\n        \"flightDestinations\": \"https://test.api.amadeus.com/v1/shopping/flight-destinations?origin=MAD&amp;departureDate=2021-05-01,2021-05-30&amp;oneWay=false&amp;duration=1,15&amp;nonStop=false&amp;viewBy=DURATION\",\n        \"flightOffers\": \"https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=MAD&amp;destinationLocationCode=BCN&amp;departureDate=2021-05-02&amp;returnDate=2021-05-06&amp;adults=1&amp;nonStop=false\"\n    }\n}\n</code></pre> As you can see above, in the results we have a list of dates for a roundtrip from Madrid to Barcelona ordered by the lowest price.</p> <p>In the last step, we want to let the traveler perform a flight search for any of the above dates that are convenient for them. That is very easy with our APIs, as the Flight Cheapest Date Search API for each result contains a link to the Flight Offers Search API. For example, if we want to perform a flight search for the first result, we only have to take the link provided and make an API call:</p> <p><code>GET https://test.api.amadeus.com/v2/shopping/flight-offers?originLocationCode=MAD&amp;destinationLocationCode=BCN&amp;departureDate=2021-05-29&amp;returnDate=2021-06-11&amp;adults=1&amp;nonStop=false</code></p>"},{"location":"resources/flights/#search-for-a-city-that-has-an-airport","title":"Search for a city that has an airport","text":"<p>The Airport &amp; City Search API finds airports and cities that match a specific word or a string of letters. Using this API, you can automatically suggest airports based on what the traveler enters in the search field. The API provides a list of airports/cities ordered by yearly passenger volume with the name, 3-letter IATA code, time zone and coordinates of each airport. </p> <p>Information</p> <p>Please keep in mind that Airport &amp; City Search API only returns the cities which have an airport.  If you want to retrieve any city that matches a search keyword, check out City Search API.</p> <p>The Airport &amp; City Search API has two endpoints:</p> <p>You can see the process step to step in this video tutorial.</p> <p></p> <ul> <li><code>GET \u200b/reference-data\u200b/locations</code> to return a list of airports and cities by a keyword</li> <li><code>GET \u200b/reference-data\u200b/locations//reference-data/locations/{locationId}</code> to return an airport or city by Id</li> </ul> <p>To get a list of airports and cities by a keyword, we need to two mandatory query parameters:</p> <ul> <li><code>subType</code> - this defines whether we are looking for an airport or a city</li> <li><code>keyword</code> - this defines the keyword (or a part of it) used in our search, which can be any character in the range of A-Za-z0-9./:-'()\"</li> </ul> <p>Here is a basic query to look for any airport whose name starts with a letter M:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/locations?subType=AIRPORT&amp;keyword=M\n</code></pre> <p>To narrow the search down, we can use an optional parameter <code>countryCode</code>, which is a location code in the ISO 3166-1 alpha-2 format:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/locations?subType=AIRPORT&amp;keyword=M&amp;countryCode=US\n</code></pre> <p>The Airport &amp; City Search API supports pagination and dynamic sorting. The dynamic sorting enables you to sort by the results by the number of travelers by airport or city where the airports and cities with the highest traffic will be on top of the list:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/locations?subType=AIRPORT&amp;keyword=M&amp;countryCode=US&amp;sort=analytics.travelers.score\n</code></pre> <p>In addition to that, we can select how detailed the response will be. This is done by the optional <code>view</code> parameter, which can be:</p> <ul> <li><code>LIGHT</code> - to only show the iataCode, name, detailedName, cityName and countryName</li> <li><code>FULL</code> - to add on top of the LIGHT information the timeZoneOffset, geoCode, detailed address and travelers.score</li> </ul> <p>The default option is <code>FULL</code>:</p> <pre><code>https://test.api.amadeus.com/v1/reference-data/locations?subType=AIRPORT&amp;keyword=M&amp;countryCode=US&amp;sort=analytics.travelers.score&amp;view=FULL\n</code></pre> <p>To search an airport or city by Id, we need to obtain the Id by using the <code>GET \u200b/reference-data\u200b/locations</code> endpoint. For example:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 2,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/reference-data/locations?subType=CITY,AIRPORT&amp;keyword=MUC&amp;countryCode=DE\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"location\",\n      \"subType\": \"CITY\",\n      \"name\": \"MUNICH INTERNATIONAL\",\n      \"detailedName\": \"MUNICH/DE:MUNICH INTERNATIONAL\",\n      \"id\": \"CMUC\",\n      \"self\": {\n        \"href\": \"https://test.api.amadeus.com/v1/reference-data/locations/CMUC\",\n        \"methods\": [\n          \"GET\"\n        ]\n      },\n      \"timeZoneOffset\": \"+02:00\",\n      \"iataCode\": \"MUC\",\n      \"geoCode\": {\n        \"latitude\": 48.35378,\n        \"longitude\": 11.78609\n      },\n      \"address\": {\n        \"cityName\": \"MUNICH\",\n        \"cityCode\": \"MUC\",\n        \"countryName\": \"GERMANY\",\n        \"countryCode\": \"DE\",\n        \"regionCode\": \"EUROP\"\n      },\n      \"analytics\": {\n        \"travelers\": {\n          \"score\": 27\n        }\n      }\n    },\n    {\n      \"type\": \"location\",\n      \"subType\": \"AIRPORT\",\n      \"name\": \"MUNICH INTERNATIONAL\",\n      \"detailedName\": \"MUNICH/DE:MUNICH INTERNATIONAL\",\n      \"id\": \"AMUC\",\n      \"self\": {\n        \"href\": \"https://test.api.amadeus.com/v1/reference-data/locations/AMUC\",\n        \"methods\": [\n          \"GET\"\n        ]\n      },\n      \"timeZoneOffset\": \"+02:00\",\n      \"iataCode\": \"MUC\",\n      \"geoCode\": {\n        \"latitude\": 48.35378,\n        \"longitude\": 11.78609\n      },\n      \"address\": {\n        \"cityName\": \"MUNICH\",\n        \"cityCode\": \"MUC\",\n        \"countryName\": \"GERMANY\",\n        \"countryCode\": \"DE\",\n        \"regionCode\": \"EUROP\"\n      },\n      \"analytics\": {\n        \"travelers\": {\n          \"score\": 27\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>The Id for the city of Munich is <code>CMUC</code>. However, for the Munich Airport the Id will be <code>AMUC</code>. Once we know this Id, we can use it to call the <code>GET \u200b/reference-data\u200b/locations//reference-data/locations/{locationId}</code>, as it is the only parameter that the query requires:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/CMUC\n</code></pre>"},{"location":"resources/flights/#compare-the-flight-price-to-historical-fares","title":"Compare the flight price to historical fares","text":"<p>When booking a flight, travelers need to be confident that they're getting a good deal. You can compare a flight price to historical fares for the same flight route using the Flight Price Analysis API. It uses an Artificial Intelligence algorithm trained on Amadeus historical flight booking data to show how current flight prices compare to historical fares and whether the price of a flight is below or above average.</p> <p>The only mandatory parameters for this search are the origin airport IATA code, destination airport IATA code and the departure date in the ISO 8601 YYYY-MM-DD format.</p> <p>Let's see how it works. In our example we will be flying from Madrid (MAD) to Paris (CDG) on 12 December 2022:</p> <pre><code>https://test.api.amadeus.com/v1/analytics/itinerary-price-metrics?originIataCode=MAD&amp;destinationIataCode=CDG&amp;departureDate=2022-12-12\n</code></pre> <p>This is what we get in the response:</p> <pre><code>{\n  \"warnings\": [],\n  \"data\": [\n    {\n      \"type\": \"itinerary-price-metric\",\n      \"origin\": {\n        \"iataCode\": \"MAD\"\n      },\n      \"destination\": {\n        \"iataCode\": \"CDG\"\n      },\n      \"departureDate\": \"2022-12-12\",\n      \"transportType\": \"FLIGHT\",\n      \"currencyCode\": \"EUR\",\n      \"oneWay\": true,\n      \"priceMetrics\": [\n        {\n          \"amount\": \"29.59\",\n          \"quartileRanking\": \"MINIMUM\"\n        },\n        {\n          \"amount\": \"76.17\",\n          \"quartileRanking\": \"FIRST\"\n        },\n        {\n          \"amount\": \"129.24\",\n          \"quartileRanking\": \"MEDIUM\"\n        },\n        {\n          \"amount\": \"185.59\",\n          \"quartileRanking\": \"THIRD\"\n        },\n        {\n          \"amount\": \"198.15\",\n          \"quartileRanking\": \"MAXIMUM\"\n        }\n      ]\n    }\n  ],\n  \"meta\": {\n    \"count\": 1,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/analytics/flight-price-metrics?originIataCode=MAD&amp;destinationIataCode=CDG&amp;departureDate=2022-12-12&amp;currencyCode=EUR&amp;oneWay=True\"\n    }\n  }\n}\n</code></pre> <p>By default the price will be shown in Euros. In this example we can see that the lowest price for such ticket should be 29.59 Euros and the highest 198.15 Euros. The first, medium and trird choices give you an idea about the possible price ranges for this flight.</p> <p>We also have an option to request the result in a different currency. This is done by using the <code>currencyCode</code> parameter, which is an ISO 4217 format currency code. In addition, we can specify whether we are inquiring about a round trip or a one way ticket.</p> <pre><code>GET https://test.api.amadeus.com/v1/analytics/itinerary-price-metrics?originIataCode=MAD&amp;destinationIataCode=CDG&amp;departureDate=2021-03-21&amp;currencyCode=EUR&amp;oneWay=true\n</code></pre>"},{"location":"resources/flights/#confirm-fares","title":"Confirm Fares","text":"<p>The availability and price of airfare fluctuate, so it\u2019s important to confirm before proceeding to book. This is especially true if time passes between the initial search and the decision to book, as fares are limited and there are thousands of bookings occurring every minute. During this step, you can also add ancillary products like extra bags or legroom. For that you can use the Flight Offers Price API.</p> <p>Once a flight has been selected, you\u2019ll need to confirm the availability and price of the fare. This is where the Flight Offers Price API comes in. This API returns the final fare price (including taxes and fees) of flights from the Flight Offers Search as well as pricing for ancillary products and the payment information that will be needed to make the final booking. </p> <p>The body to be sent via <code>POST</code> is built by a new object of type <code>flight-offers-pricing</code> composed by a list of <code>flight-offers</code> (up to 6) + payment information. In addition to this, a <code>X-HTTP-Method-Override</code> header parameter is required.</p> <pre><code>{\n   \"data\": {\n        \"type\": \"flight-offers-princing\",\n        \"flightOffers\": [\n            { \"type\": \"flight-offer\" }\n        ],\n        \"payment\" : [\n            { Payment_Object }\n        ]\n    }\n</code></pre>"},{"location":"resources/flights/#return-fare-rules","title":"Return fare rules","text":"<p>The Flight Offers Price API confirms the final price and availability of a fare. It also returns detailed fare rules, including the cancellation policy and other information. In addition to this, a <code>X-HTTP-Method-Override</code> header parameter is required. To get the fare rules, add the parameter <code>include=detailed-fare-rules</code> to your API call, as shown below: </p> <pre><code>POST https://test.api.amadeus.com/v1/shopping/flight-offers/pricing?include=detailed-fare-rules\n</code></pre> <p>The <code>FareRules</code> object represents a collection of fare rules and penalties associated with a specific fare. Each rule is represented as a <code>TermAndCondition</code> object, containing information about the rule category, circumstances, applicability, maximum penalty amount, and detailed descriptions.</p> <ul> <li> <p><code>FareRules</code>:</p> <ul> <li><code>currency</code>: The currency in which the penalties are expressed.</li> <li><code>rules</code>: An array of <code>TermAndCondition</code> objects, each representing a specific fare rule or condition.</li> </ul> </li> <li> <p><code>TermAndCondition</code>:</p> <ul> <li><code>category</code>: A string defining the type of modification concerned in the rule, such as <code>REFUND</code>, <code>EXCHANGE</code>, <code>REVALIDATION</code>, <code>REISSUE</code>, <code>REBOOK</code>, or <code>CANCELLATION</code>.</li> <li><code>circumstances</code>: A string providing additional information on the circumstances under which the rule applies.</li> <li><code>notApplicable</code>: A boolean indicating if the rule does not apply to the fare.</li> <li><code>maxPenaltyAmount</code>: A string representing the maximum penalty amount for the given rule.</li> <li><code>descriptions</code>: An array of <code>Description</code> objects that provide further details on the rule. Each <code>Description</code> object includes:<ul> <li><code>descriptionType</code>: A string representing the type of description.</li> <li><code>text</code>: The actual text of the description, providing more context or explanation for the rule.</li> </ul> </li> </ul> </li> </ul> <p>You can also see the process step to step How to display farerules in this video tutorial from Advanced flight booking engine series. </p> <p></p>"},{"location":"resources/flights/#check-co2-emissions-data","title":"Check CO2 emissions data","text":"<p>The Flight Offers Price API allows you to see the emissions data for your itinerary. This data is returned as part of the reponse in the following format:</p> <pre><code>                \"co2Emissions\": [\n                  {\n                    \"weight\": 46,\n                    \"weightUnit\": \"KG\",\n                    \"cabin\": \"ECONOMY\"\n                  }\n                ]\n</code></pre> <ul> <li><code>weight</code> is an integer representing the weight of CO2 emitted for the concerned flight segment</li> <li><code>weightUnit</code> is a string indicating the unit of measurement for the weight of CO2 emissions, which can be specified in either pounds or kilos.</li> <li><code>cabin</code> is a string representing the quality of service offered in the cabin where the seat is located. This is an enum, which can be <code>ECONOMY</code>, <code>PREMIUM_ECONOMY</code>, <code>BUSINESS</code>, <code>FIRST</code>. </li> </ul>"},{"location":"resources/flights/#book-a-flight","title":"Book a Flight","text":"<p>Once the fare is confirmed, you\u2019re ready to use the Flight Create Orders API to perform the actual booking. This API lets you log a reservation in the airlines\u2019 systems and create a PNR, and returns a unique Id number and the reservation details. If you\u2019re using an airline consolidator, the PNR will be automatically sent to the consolidator for ticket issuance. Visit the Flight Create Orders documentation page for more details on this API.</p> <p>Remember, you need to be able to issue a ticket to make bookings with our Flight Create Orders API. To access the API in production, you need to either sign a contract with an airline consolidator or be accredited to issue tickets yourself.</p>"},{"location":"resources/flights/#issue-a-ticket","title":"Issue a ticket","text":"<p>Once the booking is made, you need to complete payment. In most cases, you\u2019ll receive payment from the customer and then pay the airline, typically via an industry-specific settlement procedure like the BSP or ARC (more on those later).</p> <p>In the final step, a flight ticket is issued. In industry terms, a flight ticket is a confirmation that payment has been received, the reservation has been logged, and the customer has the right to enjoy the flight. For IATA member airlines, only certain accredited parties can issue tickets. In the next section, we\u2019ll go into detail about your options for managing this final step in the booking process.</p> <p>You can see How to manage and issue flight booking process in this video tutorial from Flight Booking Engine 101 series. </p> <p></p> <p>If you are interested in knowing more about issuing tickets in travel industry, please check out this article. </p>"},{"location":"resources/flights/#view-the-aircraft-cabin-layout","title":"View the aircraft cabin layout","text":"<p>With the Seatmap Display API you can view the aircraft cabin layout: </p> <ul> <li><code>deckConfiguration</code> - the dimensions of the passenger deck in (x,y) coordinates, including the location of the wings, exit rows, and cabins. These dimensions form a grid on which you will later place facilities and seats.</li> <li><code>facilities</code> - the (x,y) coordinates of aircraft facilities, such as bathrooms or galleys.</li> <li><code>seats</code> - the (x,y) coordinates of all seats on the aircraft, with their respective availability status, characteristics, and prices.</li> </ul> <p>To help you build a more consistent display, the API returns a uniform width for all cabins and classes. Rows with special seating like business class or extra-legroom seats have fewer seats per row (e.g., 4 seats for width of 7 coordinates) than economy rows (e.g. 7 seats for a width of 7 coordinates).</p> <p>You can see the more details about the aircraft cabin layout in the video below. </p> <p></p>"},{"location":"resources/flights/#display-in-flight-amenities","title":"Display in-flight amenities","text":"<p>Both endpoints of the Seatmap Display API return information about the following in-flight amenities:</p> <ul> <li>Seat</li> <li>Wi-fi</li> <li>Entertainment</li> <li>Power</li> <li>Food</li> <li>Beverage</li> </ul>"},{"location":"resources/flights/#select-a-seat","title":"Select a seat","text":"<p>Requests to either endpoint of the Seatmap Display API will return a list of seating options with their characteristics, pricing, and coordinates. Let's look at an example response:</p> <pre><code>{\n                \"cabin\": \"M\",\n                \"number\": \"20D\",\n                \"characteristicsCodes\": [\n                  \"A\",\n                  \"CH\",\n                  \"RS\"\n                ],\n                \"travelerPricing\": [\n                  {\n                    \"travelerId\": \"1\",\n                    \"seatAvailabilityStatus\": \"AVAILABLE\",\n                    \"price\": {\n                      \"currency\": \"EUR\",\n                      \"total\": \"17.00\",\n                      \"base\": \"17.00\",\n                      \"taxes\": [\n                        {\n                          \"amount\": \"0.00\",\n                          \"code\": \"SUPPLIER\"\n                        }\n                      ]\n                    }\n                  }\n                ],\n                \"coordinates\": {\n                  \"x\": 10,\n                  \"y\": 4\n                }\n              },\n</code></pre> <p>For each seat, the Seatmap Display API provides a seatAvailabilityStatus so you can indicate which seats are currently available for booking. Seats may have one of three\u202favailability statuses:</p> <ul> <li><code>AVAILABLE</code>\u202f\u2013 the seat is\u202fnot occupied\u202fand\u202fis\u202favailable to book.</li> <li><code>BLOCKED</code>\u202f\u2013\u202fthe seat is not occupied but isn\u2019t\u202favailable to book for the user. This is usually due to the passenger type (e.g., children may not sit in exit rows) or their fare class (e.g., some seats may be reserved for flyers in higher classes).</li> <li><code>OCCUPIED</code>\u202f\u2013 the seat is\u202f occupied\u202fand\u202funavailable to book.</li> </ul> <p>If a flight is fully booked, the API returns an OCCUPIED status for all seats. In most cases, fully booked flights are filtered\u202fout during search with\u202fthe Flight Offers Search API\u202for when confirming the price with\u202fthe Flight Offers Price API.\u202fThe Flight Create Orders API returns an error message if you try to book an unavailable seat. For more information on the booking flow, check out how to build a flight booking engine.</p> <p>Once your user has selected their seat, the next step is to add the desired seat to the flight offer and prepare them for booking.</p> <p>In the above\u202fexample\u202fresponse,\u202fseat\u202f<code>20D</code> is indicated as <code>AVAILABLE</code>. For your user to be able to book the seat, you must\u202fadd the seat to the flightOffer object and call Flight Offers Price\u202fto\u202fget a final order summary with the included seat.</p> <p>To include the seat in the <code>flightOffer</code> object, add it to\u202f<code>fareDetailsBySegment</code> \u2192 <code>additionalServices</code> \u2192 <code>chargeableSeatNumber</code>, as shown below:</p> <pre><code>\"fareDetailsBySegment\": [\n            {\n            \"additionalServices\": {\n             \"chargeableSeatNumber\": \"20D\"\n              },\n              \"segmentId\": \"60\",\n              \"cabin\": \"ECONOMY\",\n              \"fareBasis\": \"NLYO5L\",\n              \"brandedFare\": \"LITE\",\n              \"class\": \"N\",\n              \"includedCheckedBags\": {\n                \"quantity\": 0\n              }\n            }\n          ]\n</code></pre> <p>The Flight Offers Price API then returns the <code>flightOffer</code> object with the price of the chosen seat included within <code>additionalServices</code>:</p> <pre><code>\"additionalServices\":\n            {\n              \"type\": \"SEATS\",\n              \"amount\": \"17.00\"\n            }\n</code></pre> <p>You can use the same process to select seats for multiple passengers.\u202fFor each passenger, you must add the selected seats\u202fin\u202f<code>fareDetailsBySegment</code>\u202ffor each <code>travelerId</code> within the\u202fflight offer.</p> <p>At this point, you now have a priced <code>flightOffer</code> which includes your user's selected seat. The final step is to book the flight using the Flight Create Orders API. To do this, simply pass the <code>flightOffer</code> object into\u202fa request to the Flight Create Orders API, which will book the flight and return an order summary and a booking Id.</p>"},{"location":"resources/flights/#add-additional-baggage","title":"Add additional baggage","text":""},{"location":"resources/flights/#search-additional-baggage-options","title":"Search additional baggage options","text":"<p>The first step is to find the desired flight offer using the Flight Offers Search API. Each flight offer contains an <code>additionalServices</code> field with the types of additional services available, in this case bags, and the maximum price of the first additional bag. Note that at this point, the price is for informational purposes only.  </p> <p>To get the final price of the added baggage with the airline policy and the traveler's tier level taken into account, you must call the Flight Offers Price API. To do this, add the <code>include=bags</code> parameter in the path of the Flight Offers Price API: </p> <pre><code>POST https://test.api.amadeus.com/v1/shopping/flight-offers/pricing?include=bags \n</code></pre> <p>As you see below, the API returns the catalog of baggage options with the price and quantity (or weight): </p> <pre><code>\"bags\": { \n    \"1\": { \n        \"quantity\": 1, \n        \"name\": \"CHECKED_BAG\", \n        \"price\": { \n            \"amount\": \"25.00\", \n            \"currencyCode\": \"EUR\" \n        }, \n        \"bookableByItinerary\": true, \n        \"segmentIds\": [ \n            \"1\", \n            \"14\" \n        ], \n        \"travelerIds\": [ \n            \"1\" \n        ] \n    } \n    \"2\": {  \n        \"quantity\": 2, \n        \"name\": \"CHECKED_BAG\", \n        \"price\": { \n            \"amount\": \"50.00\", \n            \"currencyCode\": \"EUR\" \n        }, \n        \"bookableByItinerary\": true, \n        \"segmentIds\": [ \n            \"1\", \n            \"14\" \n        ], \n        \"travelerIds\": [ \n            \"1\" \n        ] \n    } \n} \n</code></pre> <p>The Flight Offers Price API returns two bag offers for the given flight. The catalog shows that either one or two bags are available to be booked per passenger. Higher bag quantity will be rejected due to the airline's policy.</p> <p>In the example above, the price of two bags is double that of one bag, though some airlines do offer discounts for purchasing more than one checked bag. Each bag offer is coupled to the specific segment and traveler Id returned in each bag offer. </p> <p>If there is no extra baggage service available, the API won\u2019t return a baggage catalog. </p>"},{"location":"resources/flights/#add-additional-baggage-to-the-flight-offer","title":"Add additional baggage to the flight offer","text":"<p>Next, you need to add the additional baggage to the desired flight segments. This gives you the flexibility to include extra bags on only certain segments of the flight.  </p> <p>Fill in <code>chargeableCheckedBags</code> with the desired quantity (or weight, depending on what the airline returns) in <code>travelerPricings/fareDetailsBySegment/additionalServices</code>, as shown below:</p> <pre><code>\"fareDetailsBySegment\": [{ \n    \"segmentId\": \"1\", \n    \"cabin\": \"ECONOMY\", \n    \"fareBasis\": \"TNOBAGD\", \n    \"brandedFare\": \"GOLIGHT\", \n    \"class\": \"T\", \n    \"includedCheckedBags\": { \n        \"quantity\": 0 \n    }, \n    \"additionalServices\": { \n        \"chargeableCheckedBags\": { \n            \"quantity\": 1 \n        } \n    } \n}] \n</code></pre>"},{"location":"resources/flights/#confirm-the-final-price-and-book","title":"Confirm the final price and book","text":"<p>Once you\u2019ve added the desired bags to the flight order, you need to call the Flight Offers Price API to get the final price of the flight with all additional services included. Once this is done, you can then call the Flight Create Orders API to book the flight. If you want to add different numbers of bags for different itineraries, you can do it following the same flow. </p> <p>If the desired flight you want to book, does not permit the additional service, the Flight Create Orders API will reject the booking and return the following error:</p> <p><pre><code>{ \n    \"errors\": [{ \n        \"status\": 400, \n        \"code\": 38034, \n        \"title\": \"ONE OR MORE SERVICES ARE NOT AVAILABLE\", \n        \"detail\": \"Error booking additional services\" \n    }] \n} \n</code></pre> You can see the process step to step in this video tutorial.</p> <p></p>"},{"location":"resources/flights/#video-tutorial","title":"Video Tutorial","text":"<p>You can also see the process step to step How to add additional baggages in this video tutorial from Advanced flight booking engine series. </p> <p></p>"},{"location":"resources/flights/#check-the-flight-status","title":"Check the flight status","text":"<p>The On-Demand Flight Status API provides real-time flight schedule data including up-to-date departure and arrival times, terminal and gate information, flight duration and real-time delay status.</p> <p>To get this information, the only mandatory parameters to send a query are the IATA carrier code, flight number and scheduled departure date, and you'll be up to date about your flight schedule. For example, checking the Iberia flight 532 on 23 March 2022:</p> <pre><code>https://test.api.amadeus.com/v2/schedule/flights?carrierCode=IB&amp;flightNumber=532&amp;scheduledDepartureDate=2022-03-23\n</code></pre> <p>If the flight changes and the carrier assigns a prefix to the flight number to indicate the change, you can specify it in the query using the additional one-letter <code>operationalSuffix</code> parameter:</p> <pre><code>https://test.api.amadeus.com/v2/schedule/flights?carrierCode=IB&amp;flightNumber=532&amp;scheduledDepartureDate=2021-03-23&amp;operationalSuffix=A\n</code></pre> <p>The example response looks as follows:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 1,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v2/schedule/flights?carrierCode=AZ&amp;flightNumber=319&amp;scheduledDepartureDate=2021-03-13\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"DatedFlight\",\n      \"scheduledDepartureDate\": \"2021-03-13\",\n      \"flightDesignator\": {\n        \"carrierCode\": \"AZ\",\n        \"flightNumber\": 319\n      },\n      \"flightPoints\": [\n        {\n          \"iataCode\": \"CDG\",\n          \"departure\": {\n            \"timings\": [\n              {\n                \"qualifier\": \"STD\",\n                \"value\": \"2021-03-13T11:10+01:00\"\n              }\n            ]\n          }\n        },\n        {\n          \"iataCode\": \"FCO\",\n          \"arrival\": {\n            \"timings\": [\n              {\n                \"qualifier\": \"STA\",\n                \"value\": \"2021-03-13T13:15+01:00\"\n              }\n            ]\n          }\n        }\n      ],\n      \"segments\": [\n        {\n          \"boardPointIataCode\": \"CDG\",\n          \"offPointIataCode\": \"FCO\",\n          \"scheduledSegmentDuration\": \"PT2H5M\"\n        }\n      ],\n      \"legs\": [\n        {\n          \"boardPointIataCode\": \"CDG\",\n          \"offPointIataCode\": \"FCO\",\n          \"aircraftEquipment\": {\n            \"aircraftType\": \"32S\"\n          },\n          \"scheduledLegDuration\": \"PT2H5M\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"resources/flights/#check-for-any-flight-delays","title":"Check for any flight delays","text":"<p>For any traveller it's quite important to know how far in advance they should get to the airport. The Flight Delay Prediction API estimates the probability of a specific flight being delayed. </p> <p>The query consists of ten mandatory parameters:</p> <ul> <li><code>originLocationCode</code> - IATA code of the city or airport from which the traveler is departing, e.g. <code>PAR</code> for Paris</li> <li><code>destinationLocationCode</code> - IATA code of the city or airport to which the traveler is going, e.g. <code>PAR</code> for Paris</li> <li><code>departureDate</code> - the date on which the traveler will depart from the origin to go to the destination in the ISO 8601 YYYY-MM-DD format, e.g. <code>2019-12-25</code></li> <li><code>departureTime</code> - local time relative to <code>originLocationCode</code> on which the traveler will depart from the origin in the ISO 8601 format, e.g. <code>13:22:00</code></li> <li><code>arrivalDate</code> - the date on which the traveler will arrive to the destination from the origin in the ISO 8601 in the YYYY-MM-DD format, e.g. <code>2019-12-25</code></li> <li><code>arrivalTime</code> - local time relative to <code>destinationLocationCode</code> on which the traveler will arrive to destination in the ISO 8601 standard. e.g. <code>13:22:00</code></li> <li><code>aircraftCode</code> - IATA aircraft code</li> <li><code>carrierCode</code> - airline / carrier code, e.g. <code>TK</code></li> <li><code>flightNumber</code> - flight number as assigned by the carrier, e.g. <code>1816</code></li> <li><code>duration</code> - flight duration in the ISO 8601 <code>PnYnMnDTnHnMnS</code> format, e.g. <code>PT2H10M</code></li> </ul> <pre><code>GET https://test.api.amadeus.com/v1/travel/predictions/flight-delay?originLocationCode=NCE&amp;destinationLocationCode=IST&amp;departureDate=2020-08-01&amp;departureTime=18%3A20%3A00&amp;arrivalDate=2020-08-01&amp;arrivalTime=22%3A15%3A00&amp;aircraftCode=321&amp;carrierCode=TK&amp;flightNumber=1816&amp;duration=PT31H10M\n</code></pre> <p>The response result will look as follows:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"TK1816NCEIST20200801\",\n      \"probability\": \"0.13336977\",\n      \"result\": \"LESS_THAN_30_MINUTES\",\n      \"subType\": \"flight-delay\",\n      \"type\": \"prediction\"\n    },\n    {\n      \"id\": \"TK1816NCEIST20200801\",\n      \"probability\": \"0.42023364\",\n      \"result\": \"BETWEEN_30_AND_60_MINUTES\",\n      \"subType\": \"flight-delay\",\n      \"type\": \"prediction\"\n    },\n    {\n      \"id\": \"TK1816NCEIST20200801\",\n      \"probability\": \"0.34671372\",\n      \"result\": \"BETWEEN_60_AND_120_MINUTES\",\n      \"subType\": \"flight-delay\",\n      \"type\": \"prediction\"\n    },\n    {\n      \"id\": \"TK1816NCEIST20200801\",\n      \"probability\": \"0.09968289\",\n      \"result\": \"OVER_120_MINUTES_OR_CANCELLED\",\n      \"subType\": \"flight-delay\",\n      \"type\": \"prediction\"\n    }\n  ],\n  \"meta\": {\n    \"count\": 4,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/travel/predictions/flight-delay?originLocationCode=NCE&amp;destinationLocationCode=IST&amp;departureDate=2020-08-01&amp;departureTime=18:20:00&amp;arrivalDate=2020-08-01&amp;arrivalTime=22:15:00&amp;aircraftCode=321&amp;carrierCode=TK&amp;flightNumber=1816&amp;duration=PT31H10M\"\n    }\n  }\n}\n</code></pre> <p>The main parameter of the dataset is the <code>result</code>, which contains a self-explanatory value, e.g. <code>LESS_THAN_30_MINUTES</code>, <code>BETWEEN_30_AND_60_MINUTES</code>, etc.</p>"},{"location":"resources/flights/#check-the-on-time-performance-of-an-airport","title":"Check the on-time performance of an airport","text":"<p>Another way to get prepared for any delays, is checking the on-time performance of the actual airport. The Airport On-Time Performance API estimates the probability of a specific flight being delayed. </p> <p>The search query is very simple. In our query we only need to provide our flight departure date and the departure airport. For example, JFK on 12 December 2022.</p> <pre><code>GET https://test.api.amadeus.com/v1/airport/predictions/on-time?airportCode=JFK&amp;date=2022-12-12 \n</code></pre> <p>This is the result:</p> <pre><code>{\n  \"data\": {\n    \"id\": \"JFK20221212\",\n    \"probability\": \"0.928\",\n    \"result\": \"0.77541769\",\n    \"subType\": \"on-time\",\n    \"type\": \"prediction\"\n  },\n  \"meta\": {\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/airport/predictions/on-time?airportCode=JFK&amp;date=2022-12-12\"\n    }\n  }\n}\n</code></pre> <p>The <code>probability</code> parameter shows the probability of the airport running smoothly. In our example, this metric means that there is a 92.8% chance that there will be no delays.</p>"},{"location":"resources/flights/#get-a-direct-link-to-the-airline-check-in-page","title":"Get a direct link to the airline check-in page","text":"<p>Suppose we are building an app with an integrated check-in flow for a particular airline. In this case, we can leverage the Flight Check-in Links  API to generate a link to the airline's official check-in page in a required language for both web and mobile platforms. The only parameter that we need to provide in our search query is the airline's IATA code. If required, we can request the links in a specific language, such as UK English (en-GB). This is what our request would look like:</p> <pre><code>curl --request GET \\\n     --header 'Authorization: Bearer &lt;token&gt;' \\\n     --url https://test.api.amadeus.com/v2/reference-data/urls/checkin-links?airlineCode=BA&amp;language=en-GB \\\n</code></pre> <p>This is what we get in the response:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 3,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v2/reference-data/urls/checkin-links?airlineCode=BA&amp;language=EN-GB\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"checkin-link\",\n      \"id\": \"BAEN-GBAll\",\n      \"href\": \"https://www.britishairways.com/travel/olcilandingpageauthreq/public/en_gb\",\n      \"channel\": \"All\"\n    },\n    {\n      \"type\": \"checkin-link\",\n      \"id\": \"BAEN-GBMobile\",\n      \"href\": \"https://www.britishairways.com/travel/olcilandingpageauthreq/public/en_gb/device-mobile\",\n      \"channel\": \"Mobile\"\n    },\n    {\n      \"type\": \"checkin-link\",\n      \"id\": \"BAEN-GBWeb\",\n      \"href\": \"https://www.britishairways.com/travel/olcilandingpageauthreq/public/en_gb\",\n      \"channel\": \"Web\"\n    }\n  ]\n}\n</code></pre> <p>Here we've got a dedicated link for web applications, a dedicated link for mobile applications and a link that works on all platforms.</p>"},{"location":"resources/flights/#cancel-a-reservation","title":"Cancel a reservation","text":"<p>Just as you can help users book a flight with the Flight Create Orders API, you can now also help them cancel their reservations with the Flight Order Management API. However, you have a limited window of time to cancel via API. If you\u2019re working with an airline consolidator for ticketing, cancellations via API are generally only allowed while the order is queued for ticketing. Once the ticket has been issued, you\u2019ll have to contact your consolidator directly to handle the cancellation.</p> <p>To call the Flight Order Management API, you have pass as a parameter the flight-orderId from the Flight Create Orders API.</p> <p>To retrieve the flight order data:</p> <pre><code>GET https://test.api.amadeus.com/v1/booking/flight-orders/eJzTd9f3NjIJdzUGAAp%2fAiY\n</code></pre> <p>To delete the flight order data:</p> <pre><code>DELETE https://test.api.amadeus.com/v1/booking/flight-orders/eJzTd9f3NjIJdzUGAAp%2fAiY\n</code></pre>"},{"location":"resources/flights/#view-reservation-details","title":"View reservation details","text":"<p>With the Flight Order Management API you can consult and check your flight reservation. </p> <p>To call the Flight Order Management API, you have pass as a parameter the flight-orderId from the Flight Create Orders API, such as:</p> <pre><code>GET https://test.api.amadeus.com/v1/booking/flight-orders/eJzTd9f3NjIJdzUGAAp%2fAiY\n</code></pre>"},{"location":"resources/flights/#common-errors","title":"Common Errors","text":""},{"location":"resources/flights/#issuance-not-allowed-in-self-service","title":"Issuance not allowed in Self Service","text":"<p>Self-Service users must work with an airline consolidator that can issue tickets on your behalf. In that case, the payment is not processed by the API but directly between you and the consolidator. Adding a form of payment to the Flight Create Orders API will be rejected by error INVALID FORMAT.</p>"},{"location":"resources/flights/#price-discrepancy","title":"Price discrepancy","text":"<p>The price of airfare fluctuates constantly. Creating an order for a flight whose price is no longer valid at the time of booking will trigger the following error:</p> <pre><code>{\n  \"errors\": [\n    {\n      \"status\": 400,\n      \"code\": 37200,\n      \"title\": \"PRICE DISCREPANCY\",\n      \"detail\": \"Current grandTotal price (2780.28) is different from request one (2779.58)\"\n    }\n  ]\n}\n</code></pre> <p>If you receive this error, reconfirm the fare price with the Flight Offers Price API before booking.</p> <p>The following is a common error in the test environment, as you can perform many bookings without restrictions (no real payment), but the inventory is a copy of the real one, so if you book many seats, the inventory will be empty and you won't be able to book anymore.</p> <pre><code>{\n            \"status\": 400,\n            \"code\": 34651,\n            \"title\": \"SEGMENT SELL FAILURE\",\n            \"detail\": \"Could not sell segment 1\"\n        }\n</code></pre>"},{"location":"resources/flights/#notes","title":"Notes","text":""},{"location":"resources/flights/#carriers-and-rates","title":"Carriers and rates","text":"<ul> <li>Low cost carriers (LCCs), American Airlines are not available. Depending on the market, British Airways is also not available.</li> <li>Published rates only returned in Self-Service. Cannot access to negotiated rates, or any other special rates. </li> </ul>"},{"location":"resources/flights/#post-booking-modifications","title":"Post-booking modifications","text":"<p>With the current version of our Self-Service APIs, you can\u2019t add additional baggage after the flight has been booked. This and other post-booking modifications must be handled directly with the airline consolidator that is issuing tickets on your behalf.   </p>"},{"location":"resources/flights/#how-payment-works","title":"How payment works","text":"<p>There are two things to consider regarding payments for flight booking:</p> <ul> <li>The payment between you (the app owner) and your customers (for the services provided + the price of the flight ticket). You decide how to collect this payment, it is not included in the API. A third party payment gateway, such as Stripe will be an easier solution for this.</li> <li>The payment between you and the consolidator (to be able to pay the airline and issue the flight ticket). This will be done between you and your consolidator of choice, and is to be agreed with the consolidator.</li> </ul>"},{"location":"resources/flights/#flight-booking-engine-101-video-tutorial","title":"Flight Booking Engine 101 Video tutorial","text":"<p>A video tutorial series to Explain Flight Booking Engine is available in Youtube channel. </p> <p></p>"},{"location":"resources/hotels/","title":"Hotels","text":"<p>The Hotels category contains APIs that can help you find the right hotel and complete the booking.</p> APIs Description Hotel List Returns the name, address, geoCode, and time zone for each hotel bookable in Amadeus. Hotel Ratings Uses sentiment analysis of hotel reviews to provide an overall hotel ratings and ratings for categories like location, comfort, service, staff, internet, food, facilities, pool or sleep quality. Hotel Search Provides a list of the cheapest hotels in a given location with detailed information on each hotel and the option to filter by category, chain, facilities or budget range. Hotel Booking Lets you complete bookings at over 150,000 hotels and accommodations around the world. Hotel Name Autocomplete API Provides a list of up to 20 hotels whose names most closely match the search query string. <p>Let's learn how to get started and help your users book the perfect rooms at over 150,000 hotels worldwide.</p> <p>Information</p> <p>This page has been updated based on <code>Hotel Search V3</code> updates since MAY 2022. </p>"},{"location":"resources/hotels/#search-hotels","title":"Search hotels","text":""},{"location":"resources/hotels/#get-a-list-of-hotels-by-location","title":"Get a list of hotels by location","text":"<p>First, users should be able to search hotels for a given location. The Hotel List API returns a list of hotels based on a city, a geographic code or the unique Amadeus hotel Id. To answer a question, such as \"what are the hotels closed to the city hall?\" the <code>Hotel List API</code> has three endpoints to utilize based on your search criteria. It returns <code>hotel name</code>, <code>location</code>, and <code>hotel id</code> for you to proceed to the next steps of the hotel search. </p> <p>The Hotel List API contains the following endpoints:</p> <ul> <li><code>GET \u200b/reference-data\u200b/locations\u200b/hotels\u200b/by-city</code> - searches hotels by a city code</li> <li><code>GET \u200b/reference-data\u200b/locations\u200b/hotels\u200b/by-geocode</code> - searches hotels by geographic coordinates</li> <li><code>GET /reference-data\u200b/locations\u200b/hotels\u200b/by-hotels</code> - searches hotels by a unique Amadeus hotel Id</li> </ul>"},{"location":"resources/hotels/#search-hotels-by-a-city","title":"Search hotels by a city","text":"<p>You can specify an IATA city code or Geocode to search a more specific area to get the list of hotels. You can customize the request using parameters, such as radius, chain code, amenities, star ratings, and hotel source. </p> <p>To search a hotel by a city code, the IATA city code is the only required query parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city?cityCode=PAR\n</code></pre> <p>To include places within a certain radius of the queried city, you can use the optional <code>radius</code> parameter in conjunction with the <code>radiusUnit</code> parameter that defines the unit of measurement for the radius. For example, to look for places within 100 km from Paris:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city?cityCode=PAR&amp;radius=100&amp;radiusUnit=KM\n</code></pre> <p>Another way to narrow down our search query is to limit the search to a specific hotel chain. To do this, we need to pass the hotel chain code (which is a two letters string) as the <code>chainCodes</code> parameter, such as EM for Marriott:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city?cityCode=PAR&amp;chainCodes=EM\n</code></pre> <p>If you are looking for hotels with certain amenities, such as a spa or a swimming pool, you can use the <code>amenities</code> parameter, which is an enum with the following options:</p> <ul> <li>FITNESS_CENTER</li> <li>AIR_CONDITIONING</li> <li>RESTAURANT</li> <li>PARKING</li> <li>PETS_ALLOWED</li> <li>AIRPORT_SHUTTLE</li> <li>BUSINESS_CENTER</li> <li>DISABLED_FACILITIES</li> <li>WIFI</li> <li>MEETING_ROOMS</li> <li>NO_KID_ALLOWED</li> <li>TENNIS</li> <li>GOLF</li> <li>KITCHEN</li> <li>ANIMAL_WATCHING</li> <li>BABY-SITTING</li> <li>BEACH</li> <li>CASINO</li> <li>JACUZZI</li> <li>SAUNA</li> <li>SOLARIUM</li> <li>MASSAGE</li> <li>VALET_PARKING</li> <li>BAR or LOUNGE</li> <li>KIDS_WELCOME</li> <li>NO_PORN_FILMS</li> <li>MINIBAR</li> <li>TELEVISION</li> <li>WI-FI_IN_ROOM</li> <li>ROOM_SERVICE</li> <li>GUARDED_PARKG</li> <li>SERV_SPEC_MENU</li> </ul> <p>The query to find a hotel in Paris with a swimming pool will look like this:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city?cityCode=PAR&amp;chainCodes=&amp;amenities=SWIMMING_POOL\n</code></pre> <p>If stars rating is important for the search, you can include up to four values separated by comma in the <code>ratings</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city?cityCode=PAR&amp;ratings=5\n</code></pre> <p>The source data for the Hotel List API comes from BEDBANK for aggregators and DIRECTCHAIN for GDS/Distribution. You can select both sources or include/ exclude a particular source:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city?cityCode=PAR&amp;hotelSource=ALL\n</code></pre> <p>The response will also include a dedicated Amadeus <code>hotelId</code>:</p> <pre><code>        {\n            \"chainCode\": \"AC\",\n            \"iataCode\": \"PAR\",\n            \"dupeId\": 700169556,\n            \"name\": \"ACROPOLIS HOTEL PARIS BOULOGNE\",\n            \"hotelId\": \"ACPARH29\",\n            \"geoCode\": {\n                \"latitude\": 48.83593,\n                \"longitude\": 2.24922\n            },\n            \"address\": {\n                \"countryCode\": \"FR\"\n            },\n            \"lastUpdate\": \"2022-03-01T15:22:17\"\n        }\n</code></pre>"},{"location":"resources/hotels/#search-hotels-by-geocode","title":"Search hotels by Geocode","text":"<p>Using the <code>by-geocode</code> endpoint, get a list of hotels in Paris (latitude=41.397158 and longitude=2.160873):</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-geocode?latitude=41.397158&amp;longitude=2.160873\n</code></pre> <p>To include places within a certain radius of the queried city, you can use the optional <code>radius</code> parameter in conjunction with the <code>radiusUnit</code> parameter that defines the unit of measurement for the radius. For example, to look for places within 100 km from Paris:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-geocode?latitude=41.397158&amp;longitude=2.160873&amp;radius=100&amp;radiusUnit=KM\n</code></pre> <p>Another way to narrow down our search query is to limit the search to a specific hotel chain. To do this, we need to pass the hotel chain code (which is a two letters string) as the <code>chainCodes</code> parameter, such as EM for Marriott:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-geocode?latitude=41.397158&amp;longitude=2.160873&amp;chainCodes=EM\n</code></pre> <p>If you are looking for hotels with certain amenities, such as a spa or a swimming pool, you can use the <code>amenities</code> parameter, which is an enum with the following options:</p> <ul> <li>FITNESS_CENTER</li> <li>AIR_CONDITIONING</li> <li>RESTAURANT</li> <li>PARKING</li> <li>PETS_ALLOWED</li> <li>AIRPORT_SHUTTLE</li> <li>BUSINESS_CENTER</li> <li>DISABLED_FACILITIES</li> <li>WIFI</li> <li>MEETING_ROOMS</li> <li>NO_KID_ALLOWED</li> <li>TENNIS</li> <li>GOLF</li> <li>KITCHEN</li> <li>ANIMAL_WATCHING</li> <li>BABY-SITTING</li> <li>BEACH</li> <li>CASINO</li> <li>JACUZZI</li> <li>SAUNA</li> <li>SOLARIUM</li> <li>MASSAGE</li> <li>VALET_PARKING</li> <li>BAR or LOUNGE</li> <li>KIDS_WELCOME</li> <li>NO_PORN_FILMS</li> <li>MINIBAR</li> <li>TELEVISION</li> <li>WI-FI_IN_ROOM</li> <li>ROOM_SERVICE</li> <li>GUARDED_PARKG</li> <li>SERV_SPEC_MENU</li> </ul> <p>The query to find a hotel in Paris with a swimming pool will look like this:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-geocode?latitude=41.397158&amp;longitude=2.160873&amp;chainCodes=&amp;amenities=SWIMMING_POOL&amp;ratings=\n</code></pre> <p>If stars rating is important for the search, you can include up to four values separated by comma in the <code>ratings</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-geocode?latitude=41.397158&amp;longitude=2.160873&amp;ratings=5\n</code></pre> <p>The source data for the Hotel List API comes from BEDBANK for aggregators and DIRECTCHAIN for GDS/Distribution. You can select both sources or include/ exclude a particular source:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-geocode?latitude=41.397158&amp;longitude=2.160873&amp;hotelSource=ALL\n</code></pre> <p>The response will also include a dedicated Amadeus <code>hotelId</code>:</p> <pre><code>        {\n            \"chainCode\": \"AC\",\n            \"iataCode\": \"PAR\",\n            \"dupeId\": 700169556,\n            \"name\": \"ACROPOLIS HOTEL PARIS BOULOGNE\",\n            \"hotelId\": \"ACPARH29\",\n            \"geoCode\": {\n                \"latitude\": 48.83593,\n                \"longitude\": 2.24922\n            },\n            \"address\": {\n                \"countryCode\": \"FR\"\n            },\n            \"lastUpdate\": \"2022-03-01T15:22:17\"\n        }\n</code></pre>"},{"location":"resources/hotels/#search-hotels-by-hotel-ids","title":"Search hotels by hotel ids","text":"<p>If you already know the Id of a hotel that you would like to check, you can use it to call the Hotel List API. </p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-hotels?hotelIds=ACPARF58\n</code></pre>"},{"location":"resources/hotels/#interactive-code-examples","title":"Interactive code examples","text":"<p>Check out this interactive code example which provides a hotel search form to help you build your app. You can easily customize it and use the Hotel Search API to get the cheapest flight offers.</p>"},{"location":"resources/hotels/#autocomplete-hotel-names","title":"Autocomplete Hotel Names","text":"<p>Your application can also display a list of suggested hotel names based on keywords used in the search query. </p> <p>Hotel Name Autocomplete API provides a list of up to 20 hotels whose names most closely match the search query string. For each hotel in the results, the API also provides descriptive data, including the hotel name, address, geocode, property type, IATA hotel code and the Amadeus hotel ID. </p> <p>The two mandatory query parameters for this API are the <code>keyword</code> and <code>subtype</code>. The keyword can be anything from four to fourty letters. The sub type is the category of search, which can be either <code>HOTEL_LEISURE</code> to target aggregators or <code>HOTEL_GDS</code> to target the chains directly.</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotel?keyword=PARI&amp;subType=HOTEL_LEISURE\n</code></pre> <pre><code>{\n    \"data\": [\n        {\n            \"id\": 2969353,\n            \"name\": \"BEST WESTERN PREMIER OPERA FAUBOURG PARI\",\n            \"iataCode\": \"PAR\",\n            \"subType\": \"HOTEL_LEISURE\",\n            \"relevance\": 70,\n            \"type\": \"location\",\n            \"hotelIds\": [\n                \"TEPARCFG\"\n            ],\n            \"address\": {\n                \"cityName\": \"PARIS\",\n                \"countryCode\": \"FR\"\n            },\n            \"geoCode\": {\n                \"latitude\": 48.86821,\n                \"longitude\": 2.40085\n            }\n        },\n        {\n            \"id\": 3012697,\n            \"name\": \"HOTEL PARI MAHAL\",\n            \"iataCode\": \"SXR\",\n            \"subType\": \"HOTEL_LEISURE\",\n            \"relevance\": 70,\n            \"type\": \"location\",\n            \"hotelIds\": [\n                \"TKSXRAHS\"\n            ],\n            \"address\": {\n                \"cityName\": \"SRINAGAR\",\n                \"countryCode\": \"IN\"\n            },\n            \"geoCode\": {\n                \"latitude\": 34.08106,\n                \"longitude\": 74.83126\n            }\n        },\n</code></pre> <p>We can narrow the search down to a country specified by a code in the ISO 3166-1 alpha-2 format:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotel?keyword=PARI&amp;subType=HOTEL_LEISURE&amp;countryCode=FR\n</code></pre> <p>We can request the results in various languages, although if a language is not supported, the results will be shown in English by default:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotel?keyword=PARI&amp;subType=HOTEL_LEISURE&amp;lang=FR\n</code></pre> <p>We can also define the maximum number of results by using the <code>max</code> parameter:</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/hotel?keyword=PARI&amp;subType=HOTEL_LEISURE&amp;countryCode=FR&amp;lang=EN&amp;max=20\n</code></pre>"},{"location":"resources/hotels/#display-hotel-ratings","title":"Display Hotel Ratings","text":"<p>When users search for hotels in a desired area, they may wonder about the hotel rating. Hotel Ratings API returns ratings for many crucial elements of a hotel, such as sleep quality, services, facilities, room comfort, value for money, location and many others. Hotel Ratings API guarantees high-quality service for your customers.</p> <p>The sentiment analysis, just like the one below, is displayed in a simple flow to allow you to easily identify the best hotels based on traveler reviews:</p> <pre><code>GET https://test.api.amadeus.com/v2/e-reputation/hotel-sentiments?hotelIds=TELONMFS,ADNYCCTB,XXXYYY01\n</code></pre> <pre><code>{ \"data\": [  {\n    \"type\": \"hotelSentiment\",\n    \"numberOfReviews\": 218,\n    \"numberOfRatings\": 278,\n   \"hotelId\": \"ADNYCCTB\",\n    \"overallRating\": 93,\n    \"sentiments\": {\n      \"sleepQuality\": 87,\n      \"service\": 98,\n      \"facilities\": 90,\n      \"roomComforts\": 92,\n      \"valueForMoney\": 87,\n      \"catering\": 89,\n      \"location\": 98,\n      \"pointsOfInterest\": 91,\n      \"staff\": 100\n    }\n  },\n  {\n    \"type\": \"hotelSentiment\",\n    \"numberOfReviews\": 2667,\n    \"numberOfRatings\": 2666,\n    \"hotelId\": \"TELONMFS\",\n    \"overallRating\": 81,\n    \"sentiments\": {\n      \"sleepQuality\": 78,\n      \"service\": 80,\n      \"facilities\": 75,\n      \"roomComforts\": 87,\n      \"valueForMoney\": 75,\n      \"catering\": 81,\n     \"location\": 89,\n      \"internet\": 72,\n      \"pointsOfInterest\": 81,\n      \"staff\": 89\n    }\n  }\n]\n</code></pre> <p>With these additional filters, your booking process becomes more efficient and you can offer your customers an enriched shopping experience. In this way, you can be confident that you are offering a highly rated hotels selection in the areas that customers appreciate the most.</p>"},{"location":"resources/hotels/#check-availabilities-and-prices","title":"Check Availabilities and Prices","text":"<p>Once users have explored the list of hotels in their desired area, they would want to check the price of a specific hotel or compare the prices of hotels on the list. With the <code>hotelIds</code> that you got from Hotel List API, you now can check the available rooms with real-time prices and room descriptions by calling the Hotel Search API. </p> <p>An example to request available rooms and prices for one room in Hilton Paris Opera for one adult with check-in date 2022-11-22:</p> <pre><code>GET https://test.api.amadeus.com/v3/shopping/hotel-offers?hotelIds=HLPAR266&amp;adults=1&amp;checkInDate=2022-11-22&amp;roomQuantity=1\n</code></pre> <p>The API returns a list of <code>offers</code> objects containing the price of the cheapest available room as well as information including the room description and payment policy. </p> <p>Note</p> <p>The response of <code>Hotel Search V3</code> contains real-time data, so you don't need an additional validation step anymore. However, as there are thousands of people reserving hotels at any given second, the availability of a given room may change between the moment you search and the moment you decide to book. It is therefore advised that you proceed with booking as soon as possible or add a validation step by searching by <code>offerid</code> described below.</p> <pre><code>{\n    \"data\": [\n        {\n            \"type\": \"hotel-offers\",\n            \"hotel\": {\n                \"type\": \"hotel\",\n                \"hotelId\": \"HLPAR266\",\n                \"chainCode\": \"HL\",\n                \"dupeId\": \"700006199\",\n                \"name\": \"Hilton Paris Opera\",\n                \"cityCode\": \"PAR\",\n                \"latitude\": 48.8757,\n                \"longitude\": 2.32553\n            },\n            \"available\": true,\n            \"offers\": [\n                {\n                    \"id\": \"ZBC0IYFMFV\",\n                    \"checkInDate\": \"2022-11-22\",\n                    \"checkOutDate\": \"2022-11-23\",\n                    \"rateCode\": \"RAC\",\n                    \"rateFamilyEstimated\": {\n                        \"code\": \"PRO\",\n                        \"type\": \"P\"\n                    },\n                    \"commission\": {\n                        \"percentage\": \"8\"\n                    },\n                    \"room\": {\n                        \"type\": \"A07\",\n                        \"typeEstimated\": {\n                            \"category\": \"SUPERIOR_ROOM\"\n                        },\n                        \"description\": {\n                            \"text\": \"ADVANCE PURCHASE\\nSUPERIOR ROOM\\nFREE WIFI/AIRCON\\nHD/ SAT TV/SAFE\",\n                            \"lang\": \"EN\"\n                        }\n                    },\n                    \"guests\": {\n                        \"adults\": 1\n                    },\n                    \"price\": {\n                        \"currency\": \"EUR\",\n                        \"base\": \"359.01\",\n                        \"total\": \"361.89\",\n                        \"taxes\": [\n                            {\n                                \"code\": \"TOTAL_TAX\",\n                                \"pricingFrequency\": \"PER_STAY\",\n                                \"pricingMode\": \"PER_PRODUCT\",\n                                \"amount\": \"2.88\",\n                                \"currency\": \"EUR\",\n                                \"included\": false\n                            }\n                        ],\n                        \"variations\": {\n                            \"average\": {\n                                \"base\": \"359.01\"\n                            },\n                            \"changes\": [\n                                {\n                                    \"startDate\": \"2022-11-22\",\n                                    \"endDate\": \"2022-11-23\",\n                                    \"base\": \"359.01\"\n                                }\n                            ]\n                        }\n                    },\n                    \"policies\": {\n                        \"deposit\": {\n                            \"acceptedPayments\": {\n                                \"creditCards\": [\n                                    \"VI\",\n                                    \"CA\",\n                                    \"AX\",\n                                    \"DC\",\n                                    \"DS\",\n                                    \"JC\",\n                                    \"CU\"\n                                ],\n                                \"methods\": [\n                                    \"CREDIT_CARD\"\n                                ]\n                            }\n                        },\n                        \"paymentType\": \"deposit\",\n                        \"cancellation\": {\n                            \"amount\": \"361.89\",\n                            \"type\": \"FULL_STAY\",\n                            \"description\": {\n                                \"text\": \"Non refundable rate\",\n                                \"lang\": \"EN\"\n                            }\n                        }\n                    },\n                    \"self\": \"https://api.amadeus.com/v3/shopping/hotel-offers/ZBC0IYFMFV\",\n                    \"cancelPolicyHash\": \"F1DC3A564AF1C421C90F7DB318E70EBC688A5A70A93B944F6628D0338F9\"\n                }\n            ],\n            \"self\": \"https://api.amadeus.com/v3/shopping/hotel-offers?hotelIds=HLPAR266&amp;adults=1&amp;checkInDate=2022-11-22&amp;roomQuantity=1\"\n        }\n    ]\n}\n</code></pre> <p>Information</p> <p>The commission information returned by the <code>commission</code> parameter is for information only. Hotels can voluntary provide commission. They are only obliged to do it if you are a IATA certified travel agency, in which case you need to contact our Enterprise APIs team to get access to our REST/JSON booking APIs. Once you have moved to the production environment and obtained the offerId, it will be necessary for you to directly communicate with the hotel to receive the commission on this offer.</p> <p>If the time between displaying prices and booking the room is long enough to allow others to book the same room, you can consider requesting Hotel Search API again with the <code>offerid</code> that you got before. This is not mandatory as you always will see if the offer is available or not when you try to book the offer.</p> <p>An example to request the offer information with <code>offer id</code>: </p> <pre><code>GET https://test.api.amadeus.com/v3/shopping/hotel-offers/ZBC0IYFMFV\n</code></pre> <p>Now that you have found the available offer (and its <code>offerId</code>) with the price, you're ready to book! </p>"},{"location":"resources/hotels/#booking-the-hotel","title":"Booking the Hotel","text":"<p>The Hotel Booking API\u202fis the final step in the hotel booking flow. By making a <code>POST</code> request with the offer Id returned by the Hotel Search API, the guest information, and the payment information, you can create a booking directly in the hotel reservation system. </p> <pre><code>POST https://test.api.amadeus.com/v1/booking/hotel-bookings \\\n{\n  \"data\": {\n    \"offerId\": \"ZBC0IYFMFV\",\n    \"guests\": [\n      {\n        \"id\": 1,\n        \"name\": {\n          \"title\": \"MR\",\n          \"firstName\": \"BOB\",\n          \"lastName\": \"SMITH\"\n        },\n        \"contact\": {\n          \"phone\": \"+33679278416\",\n          \"email\": \"bob.smith@email.com\"\n        }\n      }\n    ],\n    \"payments\": [\n      {\n        \"id\": 1,\n        \"method\": \"creditCard\",\n        \"card\": {\n          \"vendorCode\": \"VI\",\n          \"cardNumber\": \"4151289722471370\",\n          \"expiryDate\": \"2023-08\"\n        }\n      }\n    ],\n    \"rooms\": [\n      {\n        \"guestIds\": [\n          1\n        ],\n        \"paymentId\": 1,\n        \"specialRequest\": \"I will arrive at midnight\"\n      }\n    ]\n  }\n}'\n</code></pre> <p>Congratulations! You\u2019ve just performed your first hotel booking! Once the reservation is made, the API will return a unique booking confirmation ID which you can send to your users. </p>"},{"location":"resources/hotels/#notes-about-payment","title":"Notes about Payment","text":"<p>The Hotel Search API returns information about the payment policy of each hotel. The main policy types are: </p> <ul> <li>Guarantee: the hotel will save credit card information during booking but not make any charges to the account. In the case of a no-show or out-of-policy cancellation, the hotel may charge penalties to the card. </li> <li>Deposit: at the time of booking or by a given deadline, the hotel will charge the guest a percentage of the total amount of the reservation. The remaining amount is paid by the traveler directly at the hotel. </li> <li>Prepay: the total amount of the reservation fee must be paid by the traveler when making the booking. </li> </ul> <p>The current version of the Hotel Booking API only permits booking at hotels that accept credit cards. During the booking process, Amadeus passes the payment and guest information to the hotel but does not validate this information. Be sure to validate the payment and guest information, as invalid information may result in the reservation being canceled. </p> <p>As soon as your application stores transmits, or processes cardholder information, you will need to comply with\u202fPCI Data Security Standard (PCI DSS). For more information, visit the PCI Security Council website. </p>"},{"location":"resources/hotels/#guide-for-multiple-hotel-rooms","title":"Guide for multiple hotel rooms","text":"<p>Now that we have gone through the hotel booking flow, you may wonder how to proceed to booking more than two rooms in a hotel. </p>"},{"location":"resources/hotels/#check-availability-and-prices-for-multiple-rooms","title":"Check availability and prices for multiple rooms","text":"<p>The first step to booking multiple rooms is to search for hotels in your destination with the desired number of available rooms. You can do this by specifying the <code>roomQuantity</code> parameter when you call the Hotel Search API using the <code>hotelid</code> that you got from the Hotel List API. </p> <p>Here is an example of a search in Hilton Paris for two rooms for three adults: </p> <pre><code>GET https://test.api.amadeus.com/v3/shopping/hotel-offers?hotelIds=HLPAR266&amp;adults=3&amp;checkInDate=2022-11-22&amp;roomQuantity=2\n</code></pre> <p>The API will then return the available offers where <code>roomQuantity</code>is equal to 2.</p> <pre><code> \"offers\": [ \n            { \n                \"id\": \"48E6C8C7DAA0BA5C22663E2A2A2B7629F5468BCBE2722FE4AB8174\", \n                \"roomQuantity\": \"2\", \n                \"checkInDate\": \"2022-11-22\", \n                \"checkOutDate\": \"2022-11-23\",\n</code></pre> <p>Information</p> <p>The current version of the Hotel Search API returns the price per room. To get the total price of a reservation for multiple rooms, you must multiply the price by <code>roomQuantity</code>. </p>"},{"location":"resources/hotels/#book-multiple-rooms-with-details-for-one-guest","title":"Book multiple rooms with details for one guest","text":"<p>To call the Hotel Booking API, you must provide details for at least one guest per offer (the offer contains all rooms for the reservation). For example, the JSON query below details a request for one guest to book two rooms using <code>offerId</code>: </p> <p><pre><code>{ \n   \"data\":{ \n      \"offerId\":\"F837D841218665647003CC9A8CA2A37CEC7276BBE14F9B9C525FBD1B7B69A8FF\", \n      \"guests\":[ \n         { \n            \"name\":{ \n               \"title\":\"MR\", \n               \"firstName\":\"BOB\", \n               \"lastName\":\"SMITH\" \n            }, \n            \"contact\":{ \n               \"phone\":\"+33679278416\", \n               \"email\":\"bob.smith@email.com\" \n            } \n         } \n      ], \n      \"payments\":[ \n         { \n            \"method\":\"creditCard\", \n            \"card\":{ \n               \"vendorCode\":\"VI\", \n               \"cardNumber\":\"4111111111111111\", \n               \"expiryDate\":\"2026-01\" \n            } \n         } \n      ] \n   } \n} \n</code></pre> Once the booking is complete, the API will return the following confirmation:</p> <pre><code>{ \n    \"data\": [ \n        { \n            \"type\": \"hotel-booking\", \n            \"id\": \"HA_36000507\", \n            \"providerConfirmationId\": \"36000507\", \n            \"associatedRecords\": [ \n                { \n                    \"reference\": \"R622XL\", \n                    \"originSystemCode\": \"GDS\" \n                } \n            ] \n        }, \n        { \n            \"type\": \"hotel-booking\", \n            \"id\": \"HA_36000506\", \n            \"providerConfirmationId\": \"36000506\", \n            \"associatedRecords\": [ \n                { \n                    \"reference\": \"R622XL\", \n                    \"originSystemCode\": \"GDS\" \n                } \n            ] \n        } \n    ] \n}\n</code></pre>"},{"location":"resources/hotels/#book-multiple-rooms-with-guest-distribution","title":"Book multiple rooms with guest distribution","text":"<p>One common question is how to assign guest distribution among the booked rooms. </p> <p>When you call the Hotel Booking API, the <code>rooms</code> object represents the rooms. Each room contains guests distributed per room. Specifically, each <code>room</code> object needs IDs of the guests staying in that room.  </p> <p>Below is a sample request to book two rooms with guest distribution. The first room is for guest ID\u2019s <code>1</code> &amp; <code>2</code> and the second room for guest Id <code>3</code>.</p> <pre><code>{ \n  \"data\": { \n    \"offerId\": \"4A449AE835DD68F2E7C3571740FD00B76209D7311E719E3B66DE4E1100\", \n    \"guests\": [ \n      { \n        \"id\": 1, \n        \"name\": { \n          \"title\": \"MR\", \n          \"firstName\": \"BOB\", \n          \"lastName\": \"SMITH\" \n        }, \n        \"contact\": { \n          \"phone\": \"+33679278416\", \n          \"email\": \"bob.smith@email.com\" \n        } \n      }, \n      { \n        \"id\": 2, \n        \"name\": { \n          \"title\": \"MRS\", \n          \"firstName\": \"EMILY\", \n          \"lastName\": \"SMITH\" \n        }, \n        \"contact\": { \n          \"phone\": \"+33679278416\", \n          \"email\": \"bob.smith@email.com\" \n        } \n      }, \n      { \n        \"id\": 3, \n        \"name\": { \n          \"firstName\": \"JOHNY\", \n          \"lastName\": \"SMITH\" \n        }, \n        \"contact\": { \n          \"phone\": \"+33679278416\", \n          \"email\": \"bob.smith@email.com\" \n        } \n      } \n    ], \n    \"payments\": [ \n      { \n        \"id\": 1, \n        \"method\": \"creditCard\", \n        \"card\": { \n          \"vendorCode\": \"VI\", \n          \"cardNumber\": \"4151289722471370\", \n          \"expiryDate\": \"2026-08\" \n        } \n      } \n    ], \n    \"rooms\": [ \n      { \n        \"guestIds\": [ \n          1, 2 \n        ], \n        \"paymentId\": 1, \n        \"specialRequest\": \"I will arrive at midnight\" \n      }, \n      { \n        \"guestIds\": [ \n          3 \n        ], \n        \"paymentId\": 1, \n        \"specialRequest\": \"I will arrive at midnight\" \n      } \n    ] \n  } \n} \n</code></pre> <p>The API response will be the same as when you booked multiple rooms using the details of just one guest:</p> <pre><code>{ \n    \"data\": [ \n        { \n            \"type\": \"hotel-booking\", \n            \"id\": \"XK_88803316\", \n            \"providerConfirmationId\": \"88803316\", \n            \"associatedRecords\": [ \n                { \n                    \"reference\": \"MJ6HLK\", \n                    \"originSystemCode\": \"GDS\" \n                } \n            ] \n        }, \n        { \n            \"type\": \"hotel-booking\", \n            \"id\": \"XK_88803315\", \n            \"providerConfirmationId\": \"88803315\", \n            \"associatedRecords\": [ \n                { \n                    \"reference\": \"MJ6HLK\", \n                    \"originSystemCode\": \"GDS\" \n                } \n            ] \n        } \n    ]\u200b \n</code></pre>"},{"location":"resources/hotels/#common-errors","title":"Common Errors","text":""},{"location":"resources/hotels/#acceptedpayments-must-be-creditcards","title":"AcceptedPayments must be creditCards","text":"<p>The current version of the Hotel Booking API only supports credit card payments, which are accepted by most hotels. The Hotel Search API returns the payment policy of each hotel under <code>acceptedPayments</code> in the policies section.</p>"},{"location":"resources/hotels/#empty-response-from-the-view-room-endpoint","title":"Empty response from the View Room endpoint","text":"<p>If you get an empty response from the Hotel Search API\u2019s second endpoint, then the hotel is fully booked and has no vacancy for the requested dates. If you don't use the <code>checkInDate</code> and <code>checkOutDate</code> parameters in the request, the API will return results for a one-night stay starting on the current date. If the hotel is full, the response will be empty. </p>"},{"location":"resources/hotels/#no-rooms-available-at-requested-property","title":"No rooms available at requested property","text":"<pre><code>{\n    \"errors\": [\n        {\n            \"status\": 400,\n            \"code\": 3664,\n            \"title\": \"NO ROOMS AVAILABLE AT REQUESTED PROPERTY\"\n        }\n    ]\n}\n</code></pre> <p>The offer for the selected Hotel is no longer available. Please select a new one.</p>"},{"location":"resources/itinerary-managment/","title":"Itinerary Management","text":"<p>In the Itinerary Management category, you can give travelers a simple and personalized way to view their itinerary. </p> APIs Description Trip Purpose Prediction Analyze a flight itinerary and predict whether the trip is for business or leisure."},{"location":"resources/itinerary-managment/#predict-the-trip-purpose-from-a-flight","title":"Predict the trip purpose from a flight","text":"<p>Another API in the itinerary management category, the Trip Purpose Prediction API, predicts whether a flight is searched for business or leisure. Our machine-learning models have detected which patterns of departure and arrival cities, flight dates, and search dates are associated with business and leisure trips. Understand why your users travel and show them the flights, fares, and ancillaries that suit them best.</p> <p>Below is an example to see if the flight from New York to Madrid from 2022-12-01 to 2022-12-12 is leisure or business. </p> <pre><code>GET https://test.api.amadeus.com/v1/travel/predictions/trip-purpose?originLocationCode=NYC&amp;destinationLocationCode=MAD&amp;departureDate=2022-12-01&amp;returnDate=2022-12-12\n</code></pre> <p>The result? You can probably guess it. :) </p> <pre><code>{\n  \"data\": {\n    \"id\": \"NYCMAD20221201\",\n    \"probability\": \"0.9970142\",\n    \"result\": \"LEISURE\",\n    \"subType\": \"trip-purpose\",\n    \"type\": \"prediction\"\n  },\n  \"meta\": {\n    \"defaults\": {\n      \"searchDate\": \"2022-06-30\"\n    },\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/travel/predictions/trip-purpose?originLocationCode=NYC&amp;destinationLocationCode=MAD&amp;departureDate=2022-12-01&amp;returnDate=2022-12-12&amp;searchDate=2022-06-30\"\n    }\n  }\n}\n</code></pre>"},{"location":"resources/itinerary-managment/#find-a-city-by-keywords","title":"Find a city by keywords","text":"<p>If you are unsure of the exact spelling of a city, you can reach out to the City Search API. This API uses a keyword, which is a string containing a minimum of 3 and a maximum of 10 characters, to search for a city whose name contains this keyword. It is not critical whether you enter the entire city name or only a part of it. For example, <code>Paris</code>, <code>Par</code> or <code>ari</code> will all return <code>Paris</code> in the search results.</p> <p>There are two optional parameters to help you make the query more precise - <code>countryCode</code> and <code>max</code>. The <code>countryCode</code> is a string for the ISO 3166 Alpha-2 code of the country where you need to locate a city, for example, <code>FR</code> for France. The <code>max</code> is an integer that defines the maximum number of search results.</p> <p>You can also include a list of airports for each city returned in the search results. To do this, you need to add <code>AIRPORTS</code> to the include field, which is an array of strings defining additional resources for your search.</p> <p>Let's check out the results for keyword <code>PAR</code>. We will limit the search scope to <code>FR</code> and the number of results to two.</p> <pre><code>GET https://test.api.amadeus.com/v1/reference-data/locations/cities?countryCode=FR&amp;keyword=PAR&amp;max=2\n</code></pre> <p>The results are probably rather predictable:</p> <pre><code>{\n  \"meta\": {\n    \"count\": 2,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/reference-data/locations/cities?countryCode=FR&amp;keyword=PAR&amp;max=2\"\n    }\n  },\n  \"data\": [\n    {\n      \"type\": \"location\",\n      \"subType\": \"city\",\n      \"name\": \"Paris\",\n      \"iataCode\": \"PAR\",\n      \"address\": {\n        \"countryCode\": \"FR\",\n        \"stateCode\": \"FR-75\"\n      },\n      \"geoCode\": {\n        \"latitude\": 48.85341,\n        \"longitude\": 2.3488\n      }\n    },\n    {\n      \"type\": \"location\",\n      \"subType\": \"city\",\n      \"name\": \"Le Touquet-Paris-Plage\",\n      \"iataCode\": \"LTQ\",\n      \"address\": {\n        \"countryCode\": \"FR\",\n        \"stateCode\": \"FR-62\"\n      },\n      \"geoCode\": {\n        \"latitude\": 50.52432,\n        \"longitude\": 1.58571\n      }\n    }\n  ]\n}\n</code></pre> <p>First of all we see the French capital at the top of the list. The second result refers to the town Le Touquet-Paris-Plage, whose official name contains three letters that match our keyword. If we want to see more results, we can always adjust the <code>max</code> number of results.</p> <p>The main difference between the Airport &amp; City Search API and City Search API is that the Airport &amp; City Search API only shows cities that have an airport, while the City Search API retrieves any city that matches a keyword.</p>"},{"location":"resources/market-insight/","title":"Market insights","text":"<p>With Amadeus Self-Service APIs, you can get insights from millions of bookings and our technology partners.  In the Market insights category, we have four APIs available.</p> APIs Description Flight Most Traveled Destinations See the top destinations by passenger volume for a given city and month. Flight Most Booked Destinations See the top destinations by booking volume for a given city and month. Flight Busiest Traveling Period See monthly air traffic levels by city to understand season trends. Location Score Assess a neighborhood\u2019s popularity for sightseeing, shopping, eating out, or nightlife."},{"location":"resources/market-insight/#find-the-top-destinations-or-the-busiest-period-for-a-given-city","title":"Find the top destinations or the busiest period for a given city","text":"<p>You may wonder which destination the travelers travel to the most and when is the busiest period for a given city. You can get the travel insight from a given city and month with the following three endpoints.</p> <p>Information</p> <ul> <li>The results of these three endpoints are based on estimated flight traffic summary data from the past 12 months. </li> <li>Flight traffic summary data is based on bookings made over Amadeus systems.</li> </ul>"},{"location":"resources/market-insight/#the-top-destinations-by-passenger-volume","title":"The top destinations by passenger volume","text":"<p>Flight Most Traveled Destinations  API returns the most visited destinations from a given city. </p> <pre><code>GET https://test.api.amadeus.com/v1/travel/analytics/air-traffic/traveled?originCityCode=NCE&amp;period=2018-01\n</code></pre>"},{"location":"resources/market-insight/#the-top-destinations-by-booking-volume","title":"The top destinations by booking volume","text":"<p>Flight Most Booked Destinations API returns the most booked destinations from a given city. </p> <pre><code>GET https://test.api.amadeus.com/v1/travel/analytics/air-traffic/booked?originCityCode=NCE&amp;period=2018-01\n</code></pre>"},{"location":"resources/market-insight/#the-busiest-monthperiod-by-air-traffic","title":"The busiest month/period by air traffic","text":"<p>Flight Busiest Traveling Period  API returns the peak periods for travel to/from a specific city. </p> <pre><code>GET https://test.api.amadeus.com/v1/travel/analytics/air-traffic/busiest-period?cityCode=NCE&amp;period=2018\n</code></pre>"},{"location":"resources/market-insight/#response","title":"Response","text":"<p>The three endpoints have the same response structure.</p> <p>Response to the top destinations from a given city : </p> <pre><code>{\n    \"meta\": {\n        \"count\": 8,\n        \"links\": {\n            \"self\": \"https://test.api.amadeus.com/v1/travel/analytics/air-traffic/booked?originCityCode=NCE&amp;page%5Blimit%5D=10&amp;page%5Boffset%5D=0&amp;period=2018-01&amp;sort=analytics.travelers.score\"\n        }\n    },\n    \"data\": [\n        {\n            \"type\": \"air-traffic\",\n            \"destination\": \"PAR\",\n            \"subType\": \"BOOKED\",\n            \"analytics\": {\n                \"flights\": {\n                    \"score\": 100\n                },\n                \"travelers\": {\n                    \"score\": 100\n                }\n            }\n        },\n        {\n            \"type\": \"air-traffic\",\n            \"destination\": \"MAD\",\n            \"subType\": \"BOOKED\",\n            \"analytics\": {\n                \"flights\": {\n                    \"score\": 10\n                },\n                \"travelers\": {\n                    \"score\": 8\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Response to the busines period from a given city : </p> <pre><code>{\n    \"meta\": {\n        \"count\": 3,\n        \"links\": {\n            \"self\": \"https://test.api.amadeus.com/v1/travel/analytics/air-traffic/busiest-period?cityCode=PAR&amp;direction=ARRIVING&amp;period=2018\"\n        }\n    },\n    \"data\": [\n        {\n            \"type\": \"air-traffic\",\n            \"period\": \"2018-03\",\n            \"analytics\": {\n                \"travelers\": {\n                    \"score\": 34\n                }\n            }\n        },\n        {\n            \"type\": \"air-traffic\",\n            \"period\": \"2018-02\",\n            \"analytics\": {\n                \"travelers\": {\n                    \"score\": 33\n                }\n            }\n        },\n        {\n            \"type\": \"air-traffic\",\n            \"period\": \"2018-01\",\n            \"analytics\": {\n                \"travelers\": {\n                    \"score\": 33\n                }\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li><code>subType</code> is <code>BOOKED</code> or <code>TRAVELED</code>, depending on the endpoint. </li> <li>In <code>analytics</code>, the <code>score</code> in <code>flight</code> is flights to this destination as a percentage of total departures, and the <code>score</code> in <code>traveler</code> is the number of passengers traveling to the destination as a percentage of total passenger departures.</li> </ul>"},{"location":"resources/market-insight/#sorting","title":"Sorting","text":"<p>Sorting is enabled on the \"top destinations\" endpoints. </p> <ul> <li>analytics.flights.score - sort destination by flights score (decreasing)</li> <li>analytics.travelers.score - sort destination by traveler's score (decreasing)</li> </ul> <p>For example : </p> <pre><code>GET https://test.api.amadeus.com/v1/travel/analytics/air-traffic/traveled?originCityCode=NCE&amp;period=2018-01&amp;sort=analytics.travelers.score\n</code></pre>"},{"location":"resources/market-insight/#direction","title":"Direction","text":"<p>For the Flight Busiest Traveling Period insight, you can specify the direction as:</p> <ul> <li><code>ARRIVING</code> for statistics on travelers arriving in the city</li> <li><code>DEPARTING</code> for statistics on travelers leaving the city</li> </ul> <p>By default, statistics are given on travelers ARRIVING in the city.</p> <pre><code>GET https://test.api.amadeus.com/v1/travel/analytics/air-traffic/busiest-period?cityCode=PAR&amp;period=2018&amp;direction=ARRIVING\n</code></pre>"},{"location":"resources/market-insight/#find-insight-within-a-given-city","title":"Find insight within a given city","text":"<p>Apart from the top destinations and busiest period insight in a city, you can also help users gain insights into a neighborhood, hotel, or vacation rental with the Location Score API. </p> <p>For a given latitude and longitude, it provides popularity scores for the following leisure and tourism categories:</p> <ul> <li>Sightseeing</li> <li>Restaurants</li> <li>Shopping</li> <li>Nightlife</li> </ul> <p>For each category, the API provides an overall popularity score as well as scores for select subcategories,  such as luxury shopping, vegetarian restaurants, or historical sights. Location scores are on  a simple 0-100 scale and are powered by the AVUXI TopPlace algorithm, which analyzes millions of online reviews, comments, and points of interest.</p> <p>Notes</p> <ul> <li>For each location, the API will return scores for a 200m., 500m., and 1500m. radius. </li> <li>Scores indicate positive traveler sentiments and may not reflect the most visited locations.</li> </ul> <p>Request:</p> <pre><code>curl https://test.api.amadeus.com/v1/location/analytics/category-rated-areas?latitude=41.397158&amp;longitude=2.160873\n</code></pre> <p>Response:</p> <pre><code>{\n  \"data\": [\n    {\n      \"type\": \"category-rated-area\",\n      \"geoCode\": {\n        \"latitude\": 41.397158,\n        \"longitude\": 2.160873\n      },\n      \"radius\": 200,\n      \"categoryScores\": {\n        \"sight\": {\n          \"overall\": 87,\n          \"historical\": 83,\n          \"beachAndPark\": 0\n        },\n        \"restaurant\": {\n          \"overall\": 92,\n          \"vegetarian\": 61\n        },\n        \"shopping\": {\n          \"overall\": 96,\n          \"luxury\": 96\n        },\n        \"nightLife\": {\n          \"overall\": 86\n        }\n      }\n    },\n    {\n      \"type\": \"category-rated-area\",\n      \"geoCode\": {\n        \"latitude\": 41.397158,\n        \"longitude\": 2.160873\n      },\n      \"radius\": 500,\n      \"categoryScores\": {\n        \"sight\": {\n          \"overall\": 99,\n          \"historical\": 69,\n          \"beachAndPark\": 0\n        },\n        \"restaurant\": {\n          \"overall\": 94,\n          \"vegetarian\": 71\n        },\n        \"shopping\": {\n          \"overall\": 99,\n          \"luxury\": 99\n        },\n        \"nightLife\": {\n          \"overall\": 88\n        }\n      }\n    }\n  ],\n  \"meta\": {\n    \"count\": 3,\n    \"links\": {\n      \"self\": \"https://test.api.amadeus.com/v1/location/analytics/category-rated-areas?latitude=41.397158&amp;longitude=2.160873\"\n    }\n  }\n}\n</code></pre>"}]}